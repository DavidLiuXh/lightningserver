!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddExitSignalEvent	./LightningServer.cxx	/^        static void AddExitSignalEvent(event_base* eb,$/;"	f	class:LightningServerUtil	access:public	signature:(event_base* eb, event_callback_fn callBackFunc, void* arg, int signal)
AddSockEvent	./LightningServer.cxx	/^        static bool AddSockEvent(event_base* eb,$/;"	f	class:LightningServerUtil	access:public	signature:(event_base* eb, evutil_socket_t fd, short type, event_callback_fn callBackFunc, void* arg, const struct timeval* timeOut)
DHT_STREAM_WITH_HEADER	./datahandlerfactory.hxx	/^                DHT_STREAM_WITH_HEADER = 0,$/;"	e	enum:Lightning::DataHandlerFactory::DataHandlerType
DataHandler	./datahandler.hxx	/^    class DataHandler$/;"	c	namespace:Lightning
DataHandlerFactory	./datahandlerfactory.hxx	/^            DataHandlerFactory();$/;"	p	class:Lightning::DataHandlerFactory	access:private	signature:()
DataHandlerFactory	./datahandlerfactory.hxx	/^    class DataHandlerFactory$/;"	c	namespace:Lightning	inherits:boost::noncopyable
DataHandlerFactory::create	./datahandlerfactory.cxx	/^boost::shared_ptr<DataHandler> DataHandlerFactory::create(DataHandlerType type,$/;"	f	class:DataHandlerFactory	signature:(DataHandlerType type, boost::shared_ptr<UserRequest> request)
DataHandlerType	./datahandlerfactory.hxx	/^            enum DataHandlerType$/;"	g	class:Lightning::DataHandlerFactory	access:public
DataStreamHandler	./datastreamhandler.cxx	/^DataStreamHandler::DataStreamHandler(boost::shared_ptr<UserRequest> request)$/;"	f	class:DataStreamHandler	signature:(boost::shared_ptr<UserRequest> request)
DataStreamHandler	./datastreamhandler.hxx	/^            DataStreamHandler(boost::shared_ptr<UserRequest> request);$/;"	p	class:Lightning::DataStreamHandler	access:public	signature:(boost::shared_ptr<UserRequest> request)
DataStreamHandler	./datastreamhandler.hxx	/^    class DataStreamHandler$/;"	c	namespace:Lightning	inherits:DataHandler
DataStreamHandler::DataStreamHandler	./datastreamhandler.cxx	/^DataStreamHandler::DataStreamHandler(boost::shared_ptr<UserRequest> request)$/;"	f	class:DataStreamHandler	signature:(boost::shared_ptr<UserRequest> request)
DataStreamHandler::initEvBuffer	./datastreamhandler.cxx	/^void DataStreamHandler::initEvBuffer()$/;"	f	class:DataStreamHandler	signature:()
DataStreamHandler::pushData	./datastreamhandler.cxx	/^void DataStreamHandler::pushData(evbuffer* buffer)$/;"	f	class:DataStreamHandler	signature:(evbuffer* buffer)
DataStreamHandler::recvBody	./datastreamhandler.cxx	/^bool DataStreamHandler::recvBody()$/;"	f	class:DataStreamHandler	signature:()
DataStreamHandler::recvHeader	./datastreamhandler.cxx	/^bool DataStreamHandler::recvHeader()$/;"	f	class:DataStreamHandler	signature:()
EventBaseWeakPtrType	./LightningServerProcessor.hxx	/^            typedef boost::weak_ptr<event_base> EventBaseWeakPtrType;$/;"	t	class:Lightning::LightningServerProcessor	access:public
EventBaseWeakPtrType	./responseprocessor.hxx	/^            typedef boost::weak_ptr<event_base> EventBaseWeakPtrType;$/;"	t	class:Lightning::ResponseProcessor	access:public
EventBaseWeakPtrType	./responsequeue.hxx	/^            typedef boost::weak_ptr<event_base> EventBaseWeakPtrType;$/;"	t	class:Lightning::ResponseQueue	access:public
FreeBufferEvent	./session.cxx	/^struct FreeBufferEvent$/;"	s	file:
FreeBufferEvent::operator ()	./session.cxx	/^    void operator()(bufferevent* be)$/;"	f	struct:FreeBufferEvent	access:public	signature:(bufferevent* be)
FreeEvBuffer	./datastreamhandler.cxx	/^struct FreeEvBuffer$/;"	s	file:
FreeEvBuffer::operator ()	./datastreamhandler.cxx	/^    void operator()(evbuffer* buffer)$/;"	f	struct:FreeEvBuffer	access:public	signature:(evbuffer* buffer)
FreeEventBase	./LightningServer.cxx	/^struct FreeEventBase$/;"	s	file:
FreeEventBase::operator ()	./LightningServer.cxx	/^    void operator()(event_base* eb)$/;"	f	struct:FreeEventBase	access:public	signature:(event_base* eb)
IoUtil	./IoUtil.hxx	/^    class IoUtil$/;"	c	namespace:Lightning
IoUtil::setSockBlock	./IoUtil.cxx	/^bool IoUtil::setSockBlock(int fd, bool blocking)$/;"	f	class:IoUtil	signature:(int fd, bool blocking)
IoUtil::setSockOptByIntValue	./IoUtil.cxx	/^bool IoUtil::setSockOptByIntValue(int fd,$/;"	f	class:IoUtil	signature:(int fd, int level, int optName, bool use)
IoUtil::tcpListen	./IoUtil.cxx	/^bool IoUtil::tcpListen(const char* ip,$/;"	f	class:IoUtil	signature:(const char* ip, int port, bool blocking, int& fd)
LIGHTNGING_USERREQUEST_HXX	./userrequest.hxx	2;"	d
LIGHTNGING_USERRESPONSE_HXX	./userresponse.hxx	2;"	d
LIGHTNING_BASE_REQUEST_HXX	./baserequest.hxx	2;"	d
LIGHTNING_DATA_HANDLER_FACTORY_HXX	./datahandlerfactory.hxx	2;"	d
LIGHTNING_DATA_HANDLER_HXX	./datahandler.hxx	2;"	d
LIGHTNING_DATA_STREAM_HANDLER_HXX	./datastreamhandler.hxx	2;"	d
LIGHTNING_IO_UTIL_HXX	./IoUtil.hxx	2;"	d
LIGHTNING_MESSAGE_HXX	./message.hxx	2;"	d
LIGHTNING_PROCESS_QUEUE_HXX	./processqueue.hxx	2;"	d
LIGHTNING_REQUEST_HXX	./request.hxx	2;"	d
LIGHTNING_REQUEST_PROCESSOR_HXX	./requestprocessor.hxx	2;"	d
LIGHTNING_RESPONSE_HXX	./response.hxx	2;"	d
LIGHTNING_RESPONSE_PROCESSOR_HXX	./responseprocessor.hxx	2;"	d
LIGHTNING_RESPONSE_QUEUE_HXX	./responsequeue.hxx	2;"	d
LIGHTNING_SERVER_HXX	./LightningServer.hxx	2;"	d
LIGHTNING_SERVER_PROCESSOR_HXX	./LightningServerProcessor.hxx	2;"	d
LIGHTNING_SESSION_HANDLER_HXX	./sessionHandler.hxx	2;"	d
LIGHTNING_SESSION_HXX	./session.hxx	2;"	d
LIGHTNING_SESSION_INFO_HXX	./sessioninfo.hxx	2;"	d
LIGHTNING_SESSION_MANAGER_HXX	./sessionmanager.hxx	2;"	d
LIGHTNING_SOCK_EVENT_CALLBACK_UTIL_HXX	./SockEventCallbackUtil.hxx	2;"	d
Lightning	./IoUtil.hxx	/^namespace Lightning$/;"	n
Lightning	./LightningServer.hxx	/^namespace Lightning$/;"	n
Lightning	./LightningServerProcessor.hxx	/^namespace Lightning$/;"	n
Lightning	./SockEventCallbackUtil.hxx	/^namespace Lightning$/;"	n
Lightning	./baserequest.hxx	/^namespace Lightning$/;"	n
Lightning	./datahandler.hxx	/^namespace Lightning$/;"	n
Lightning	./datahandlerfactory.hxx	/^namespace Lightning$/;"	n
Lightning	./datastreamhandler.hxx	/^namespace Lightning$/;"	n
Lightning	./message.hxx	/^namespace Lightning$/;"	n
Lightning	./processqueue.hxx	/^namespace Lightning$/;"	n
Lightning	./request.hxx	/^namespace Lightning$/;"	n
Lightning	./requestprocessor.hxx	/^namespace Lightning$/;"	n
Lightning	./response.hxx	/^namespace Lightning$/;"	n
Lightning	./responseprocessor.hxx	/^namespace Lightning$/;"	n
Lightning	./responsequeue.hxx	/^namespace Lightning$/;"	n
Lightning	./session.hxx	/^namespace Lightning$/;"	n
Lightning	./sessionHandler.hxx	/^namespace Lightning$/;"	n
Lightning	./sessioninfo.hxx	/^namespace Lightning$/;"	n
Lightning	./sessionmanager.hxx	/^namespace Lightning$/;"	n
Lightning	./userrequest.hxx	/^namespace Lightning$/;"	n
Lightning	./userresponse.hxx	/^namespace Lightning$/;"	n
Lightning::DataHandler	./datahandler.hxx	/^    class DataHandler$/;"	c	namespace:Lightning
Lightning::DataHandler::OnRecvRequestFinished	./datahandler.hxx	/^            RecvRequestFinishedNotifyEvent OnRecvRequestFinished;$/;"	m	class:Lightning::DataHandler	access:public
Lightning::DataHandler::RecvRequestFinishedNotifyEvent	./datahandler.hxx	/^                        boost::shared_ptr<UserRequest>)> RecvRequestFinishedNotifyEvent;$/;"	t	class:Lightning::DataHandler	access:public
Lightning::DataHandler::pushData	./datahandler.hxx	/^            virtual void pushData(evbuffer* buffer) = 0;$/;"	p	class:Lightning::DataHandler	access:public	signature:(evbuffer* buffer)
Lightning::DataHandler::~DataHandler	./datahandler.hxx	/^            virtual ~DataHandler() {}$/;"	f	class:Lightning::DataHandler	access:public	signature:()
Lightning::DataHandlerFactory	./datahandlerfactory.hxx	/^    class DataHandlerFactory$/;"	c	namespace:Lightning	inherits:boost::noncopyable
Lightning::DataHandlerFactory::DHT_STREAM_WITH_HEADER	./datahandlerfactory.hxx	/^                DHT_STREAM_WITH_HEADER = 0,$/;"	e	enum:Lightning::DataHandlerFactory::DataHandlerType
Lightning::DataHandlerFactory::DataHandlerFactory	./datahandlerfactory.hxx	/^            DataHandlerFactory();$/;"	p	class:Lightning::DataHandlerFactory	access:private	signature:()
Lightning::DataHandlerFactory::DataHandlerType	./datahandlerfactory.hxx	/^            enum DataHandlerType$/;"	g	class:Lightning::DataHandlerFactory	access:public
Lightning::DataHandlerFactory::create	./datahandlerfactory.hxx	/^            static boost::shared_ptr<DataHandler> create(DataHandlerType type,$/;"	p	class:Lightning::DataHandlerFactory	access:public	signature:(DataHandlerType type, boost::shared_ptr<UserRequest>)
Lightning::DataStreamHandler	./datastreamhandler.hxx	/^    class DataStreamHandler$/;"	c	namespace:Lightning	inherits:DataHandler
Lightning::DataStreamHandler::DataStreamHandler	./datastreamhandler.hxx	/^            DataStreamHandler(boost::shared_ptr<UserRequest> request);$/;"	p	class:Lightning::DataStreamHandler	access:public	signature:(boost::shared_ptr<UserRequest> request)
Lightning::DataStreamHandler::PS_BODY	./datastreamhandler.hxx	/^                PS_BODY,$/;"	e	enum:Lightning::DataStreamHandler::ParseStep
Lightning::DataStreamHandler::PS_HEADER	./datastreamhandler.hxx	/^                PS_HEADER = 0,$/;"	e	enum:Lightning::DataStreamHandler::ParseStep
Lightning::DataStreamHandler::ParseStep	./datastreamhandler.hxx	/^            enum ParseStep$/;"	g	class:Lightning::DataStreamHandler	access:private
Lightning::DataStreamHandler::initEvBuffer	./datastreamhandler.hxx	/^            void initEvBuffer();$/;"	p	class:Lightning::DataStreamHandler	access:private	signature:()
Lightning::DataStreamHandler::mBodySize	./datastreamhandler.hxx	/^            size_t mBodySize;$/;"	m	class:Lightning::DataStreamHandler	access:private
Lightning::DataStreamHandler::mCache	./datastreamhandler.hxx	/^            boost::shared_ptr<evbuffer> mCache;$/;"	m	class:Lightning::DataStreamHandler	access:private
Lightning::DataStreamHandler::mHeaderSize	./datastreamhandler.hxx	/^            size_t mHeaderSize;$/;"	m	class:Lightning::DataStreamHandler	access:private
Lightning::DataStreamHandler::mStep	./datastreamhandler.hxx	/^            ParseStep mStep;$/;"	m	class:Lightning::DataStreamHandler	access:private
Lightning::DataStreamHandler::mUserRequest	./datastreamhandler.hxx	/^            boost::shared_ptr<UserRequestWithHeader> mUserRequest;$/;"	m	class:Lightning::DataStreamHandler	access:private
Lightning::DataStreamHandler::pushData	./datastreamhandler.hxx	/^            virtual void pushData(evbuffer* buffer);$/;"	p	class:Lightning::DataStreamHandler	access:public	signature:(evbuffer* buffer)
Lightning::DataStreamHandler::recvBody	./datastreamhandler.hxx	/^            bool recvBody();$/;"	p	class:Lightning::DataStreamHandler	access:private	signature:()
Lightning::DataStreamHandler::recvHeader	./datastreamhandler.hxx	/^            bool recvHeader();$/;"	p	class:Lightning::DataStreamHandler	access:private	signature:()
Lightning::IoUtil	./IoUtil.hxx	/^    class IoUtil$/;"	c	namespace:Lightning
Lightning::IoUtil::setSockBlock	./IoUtil.hxx	/^            static bool setSockBlock(int fd, bool blocking);$/;"	p	class:Lightning::IoUtil	access:public	signature:(int fd, bool blocking)
Lightning::IoUtil::setSockOptByIntValue	./IoUtil.hxx	/^            static bool setSockOptByIntValue(int fd,$/;"	p	class:Lightning::IoUtil	access:public	signature:(int fd, int level, int optName, bool use)
Lightning::IoUtil::tcpListen	./IoUtil.hxx	/^            static bool tcpListen(const char* ip,$/;"	p	class:Lightning::IoUtil	access:public	signature:(const char* ip, int port, bool blocking, int& fd)
Lightning::LightningServer	./LightningServer.hxx	/^    class LightningServer$/;"	c	namespace:Lightning
Lightning::LightningServer::LightningServer	./LightningServer.hxx	/^            LightningServer(UserRequestFactoryPtrType userReuqestFactory,$/;"	p	class:Lightning::LightningServer	access:public	signature:(UserRequestFactoryPtrType userReuqestFactory, UserResponseFactoryPtrType userResponseFactory, const char* logPath)
Lightning::LightningServer::SessionHandlerPtrType	./LightningServer.hxx	/^            typedef boost::shared_ptr<SessionHandler> SessionHandlerPtrType;$/;"	t	class:Lightning::LightningServer	access:public
Lightning::LightningServer::UserRequestFactoryPtrType	./LightningServer.hxx	/^            typedef boost::shared_ptr<UserRequestFactory> UserRequestFactoryPtrType;$/;"	t	class:Lightning::LightningServer	access:public
Lightning::LightningServer::UserResponseFactoryPtrType	./LightningServer.hxx	/^            typedef boost::shared_ptr<UserResponseFactory> UserResponseFactoryPtrType;$/;"	t	class:Lightning::LightningServer	access:public
Lightning::LightningServer::initLog	./LightningServer.hxx	/^            void initLog(const char* path);$/;"	p	class:Lightning::LightningServer	access:private	signature:(const char* path)
Lightning::LightningServer::mEventBase	./LightningServer.hxx	/^            boost::shared_ptr<event_base> mEventBase;$/;"	m	class:Lightning::LightningServer	access:private
Lightning::LightningServer::mLSProcessor	./LightningServer.hxx	/^            boost::scoped_ptr<LightningServerProcessor> mLSProcessor;$/;"	m	class:Lightning::LightningServer	access:private
Lightning::LightningServer::mRequestFactory	./LightningServer.hxx	/^            UserRequestFactoryPtrType mRequestFactory;$/;"	m	class:Lightning::LightningServer	access:private
Lightning::LightningServer::mResponseFactory	./LightningServer.hxx	/^            UserResponseFactoryPtrType mResponseFactory;$/;"	m	class:Lightning::LightningServer	access:private
Lightning::LightningServer::mSessionHandler	./LightningServer.hxx	/^            SessionHandlerPtrType mSessionHandler;$/;"	m	class:Lightning::LightningServer	access:private
Lightning::LightningServer::process	./LightningServer.hxx	/^            void process();$/;"	p	class:Lightning::LightningServer	access:private	signature:()
Lightning::LightningServer::regSessionHandler	./LightningServer.hxx	/^            bool regSessionHandler(SessionHandlerPtrType sessionHandler);$/;"	p	class:Lightning::LightningServer	access:public	signature:(SessionHandlerPtrType sessionHandler)
Lightning::LightningServer::setupEventBase	./LightningServer.hxx	/^            bool setupEventBase();$/;"	p	class:Lightning::LightningServer	access:private	signature:()
Lightning::LightningServer::setupSignalHandler	./LightningServer.hxx	/^            void setupSignalHandler();$/;"	p	class:Lightning::LightningServer	access:private	signature:()
Lightning::LightningServer::start	./LightningServer.hxx	/^            void start(const char* ip, int port);$/;"	p	class:Lightning::LightningServer	access:public	signature:(const char* ip, int port)
Lightning::LightningServer::startListen	./LightningServer.hxx	/^            bool startListen(const char* ip, int port);$/;"	p	class:Lightning::LightningServer	access:private	signature:(const char* ip, int port)
Lightning::LightningServer::stop	./LightningServer.hxx	/^            void stop();$/;"	p	class:Lightning::LightningServer	access:public	signature:()
Lightning::LightningServer::~LightningServer	./LightningServer.hxx	/^            ~LightningServer();$/;"	p	class:Lightning::LightningServer	access:public	signature:()
Lightning::LightningServerProcessor	./LightningServerProcessor.hxx	/^    class LightningServerProcessor$/;"	c	namespace:Lightning
Lightning::LightningServerProcessor::EventBaseWeakPtrType	./LightningServerProcessor.hxx	/^            typedef boost::weak_ptr<event_base> EventBaseWeakPtrType;$/;"	t	class:Lightning::LightningServerProcessor	access:public
Lightning::LightningServerProcessor::LightningServerProcessor	./LightningServerProcessor.hxx	/^            LightningServerProcessor(EventBaseWeakPtrType eb,$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:(EventBaseWeakPtrType eb, SessionHandlerPtrType sessionHandler, boost::shared_ptr<UserRequestFactory> userReuqestFactory, boost::shared_ptr<UserResponseFactory> userResponseFactory)
Lightning::LightningServerProcessor::SessionHandlerPtrType	./LightningServerProcessor.hxx	/^            typedef boost::weak_ptr<SessionHandler> SessionHandlerPtrType;$/;"	t	class:Lightning::LightningServerProcessor	access:public
Lightning::LightningServerProcessor::addSession	./LightningServerProcessor.hxx	/^            void addSession(evutil_socket_t fd, sockaddr_in& addr);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(evutil_socket_t fd, sockaddr_in& addr)
Lightning::LightningServerProcessor::handleRequestEvent	./LightningServerProcessor.hxx	/^            void handleRequestEvent(RequestProcessor& requestProcessor,$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(RequestProcessor& requestProcessor, const boost::shared_ptr<ProcessQueueItem>& requestTask)
Lightning::LightningServerProcessor::handleResponseEvent	./LightningServerProcessor.hxx	/^            void handleResponseEvent(const boost::shared_ptr<ProcessQueueItem>& requestTask);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
Lightning::LightningServerProcessor::isRunning	./LightningServerProcessor.hxx	/^            bool isRunning() const { return mRunning; }$/;"	f	class:Lightning::LightningServerProcessor	access:public	signature:() const
Lightning::LightningServerProcessor::mEventBase	./LightningServerProcessor.hxx	/^            EventBaseWeakPtrType mEventBase;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mRequestFactory	./LightningServerProcessor.hxx	/^            boost::weak_ptr<UserRequestFactory> mRequestFactory;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mRequestProcessor	./LightningServerProcessor.hxx	/^            boost::scoped_ptr<RequestProcessor> mRequestProcessor;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mResponseFactory	./LightningServerProcessor.hxx	/^            boost::weak_ptr<UserResponseFactory> mResponseFactory;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mResponseProcessor	./LightningServerProcessor.hxx	/^            boost::shared_ptr<ResponseProcessor> mResponseProcessor;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mRunning	./LightningServerProcessor.hxx	/^            bool mRunning;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mSessionHandler	./LightningServerProcessor.hxx	/^            SessionHandlerPtrType mSessionHandler;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::mSessionManager	./LightningServerProcessor.hxx	/^            boost::shared_ptr<SessionManager> mSessionManager;$/;"	m	class:Lightning::LightningServerProcessor	access:private
Lightning::LightningServerProcessor::onRecvRequestFinished	./LightningServerProcessor.hxx	/^            void onRecvRequestFinished(boost::shared_ptr<Session>, boost::shared_ptr<UserRequest> request);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(boost::shared_ptr<Session>, boost::shared_ptr<UserRequest> request)
Lightning::LightningServerProcessor::processAccepted	./LightningServerProcessor.hxx	/^            void processAccepted(evutil_socket_t fd);$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:(evutil_socket_t fd)
Lightning::LightningServerProcessor::processRequestTask	./LightningServerProcessor.hxx	/^            void processRequestTask(const boost::shared_ptr<ProcessQueueItem>& requestTask);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
Lightning::LightningServerProcessor::processStartTask	./LightningServerProcessor.hxx	/^            void processStartTask(const boost::shared_ptr<ProcessQueueItem>& requestTask);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
Lightning::LightningServerProcessor::start	./LightningServerProcessor.hxx	/^            void start();$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:()
Lightning::LightningServerProcessor::startRequestProcessor	./LightningServerProcessor.hxx	/^            void startRequestProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
Lightning::LightningServerProcessor::startResponseProcessor	./LightningServerProcessor.hxx	/^            void startResponseProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
Lightning::LightningServerProcessor::stop	./LightningServerProcessor.hxx	/^            void stop();$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:()
Lightning::LightningServerProcessor::stopRequestProcessor	./LightningServerProcessor.hxx	/^            void stopRequestProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
Lightning::LightningServerProcessor::stopResponseProcessor	./LightningServerProcessor.hxx	/^            void stopResponseProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
Lightning::Message	./message.hxx	/^    class Message$/;"	c	namespace:Lightning
Lightning::Message::~Message	./message.hxx	/^            virtual ~Message() {}$/;"	f	class:Lightning::Message	access:public	signature:()
Lightning::ProcessQueue	./processqueue.hxx	/^    class ProcessQueue$/;"	c	namespace:Lightning
Lightning::ProcessQueue::ProcessItemQueueType	./processqueue.hxx	/^            typedef boost::lockfree::fifo<ProcessQueueItem*> ProcessItemQueueType;$/;"	t	class:Lightning::ProcessQueue	access:private
Lightning::ProcessQueue::ProcessQueue	./processqueue.hxx	/^            ProcessQueue();$/;"	p	class:Lightning::ProcessQueue	access:public	signature:()
Lightning::ProcessQueue::isEmpty	./processqueue.hxx	/^            bool isEmpty() { return mProcessItems.empty(); }$/;"	f	class:Lightning::ProcessQueue	access:public	signature:()
Lightning::ProcessQueue::mProcessItems	./processqueue.hxx	/^            ProcessItemQueueType mProcessItems;$/;"	m	class:Lightning::ProcessQueue	access:protected
Lightning::ProcessQueue::pop	./processqueue.hxx	/^            ProcessQueueItemPtrType pop();$/;"	p	class:Lightning::ProcessQueue	access:public	signature:()
Lightning::ProcessQueue::push	./processqueue.hxx	/^            bool push(ProcessQueueItem* item);$/;"	p	class:Lightning::ProcessQueue	access:public	signature:(ProcessQueueItem* item)
Lightning::ProcessQueue::~ProcessQueue	./processqueue.hxx	/^            ~ProcessQueue();$/;"	p	class:Lightning::ProcessQueue	access:public	signature:()
Lightning::ProcessQueueItem	./baserequest.hxx	/^    class ProcessQueueItem$/;"	c	namespace:Lightning
Lightning::ProcessQueueItem::PRT_NONE	./baserequest.hxx	/^                PRT_NONE = 0,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
Lightning::ProcessQueueItem::PRT_REQUEST	./baserequest.hxx	/^                PRT_REQUEST,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
Lightning::ProcessQueueItem::PRT_RESPONSE	./baserequest.hxx	/^                PRT_RESPONSE,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
Lightning::ProcessQueueItem::PRT_START	./baserequest.hxx	/^                PRT_START,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
Lightning::ProcessQueueItem::ProcessQueueItem	./baserequest.hxx	/^            ProcessQueueItem(ProcessRequestType type)$/;"	f	class:Lightning::ProcessQueueItem	access:protected	signature:(ProcessRequestType type)
Lightning::ProcessQueueItem::ProcessRequestType	./baserequest.hxx	/^            enum ProcessRequestType$/;"	g	class:Lightning::ProcessQueueItem	access:public
Lightning::ProcessQueueItem::getType	./baserequest.hxx	/^            ProcessRequestType getType() const { return mType; }$/;"	f	class:Lightning::ProcessQueueItem	access:public	signature:() const
Lightning::ProcessQueueItem::mType	./baserequest.hxx	/^            ProcessRequestType mType;$/;"	m	class:Lightning::ProcessQueueItem	access:protected
Lightning::ProcessQueueItem::~ProcessQueueItem	./baserequest.hxx	/^            virtual ~ProcessQueueItem() {}$/;"	f	class:Lightning::ProcessQueueItem	access:public	signature:()
Lightning::ProcessQueueItemPtrType	./processqueue.hxx	/^    typedef boost::shared_ptr<ProcessQueueItem> ProcessQueueItemPtrType;$/;"	t	namespace:Lightning
Lightning::ReceivedRequestTask	./request.hxx	/^    class ReceivedRequestTask$/;"	c	namespace:Lightning	inherits:ProcessQueueItem
Lightning::ReceivedRequestTask::ReceivedRequestTask	./request.hxx	/^            ReceivedRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	p	class:Lightning::ReceivedRequestTask	access:public	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session, boost::shared_ptr<UserRequest> request)
Lightning::ReceivedRequestTask::getRequest	./request.hxx	/^            boost::shared_ptr<UserRequest> getRequest() const$/;"	f	class:Lightning::ReceivedRequestTask	access:public	signature:() const
Lightning::ReceivedRequestTask::mRequest	./request.hxx	/^            boost::shared_ptr<UserRequest> mRequest;$/;"	m	class:Lightning::ReceivedRequestTask	access:private
Lightning::ReceivedRequestTask::mSession	./request.hxx	/^            boost::weak_ptr<Session> mSession;$/;"	m	class:Lightning::ReceivedRequestTask	access:private
Lightning::RequestProcessor	./requestprocessor.hxx	/^    class RequestProcessor $/;"	c	namespace:Lightning
Lightning::RequestProcessor::ProcessQueueItemPtrType	./requestprocessor.hxx	/^            typedef boost::shared_ptr<ProcessQueueItem> ProcessQueueItemPtrType;$/;"	t	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::RequestProcessor	./requestprocessor.hxx	/^            RequestProcessor(size_t workThreadSize);$/;"	p	class:Lightning::RequestProcessor	access:public	signature:(size_t workThreadSize)
Lightning::RequestProcessor::SessionRequestEvent	./requestprocessor.hxx	/^            boost::function<void (RequestProcessor&, const ProcessQueueItemPtrType&)> SessionRequestEvent;$/;"	m	class:Lightning::RequestProcessor	access:public
Lightning::RequestProcessor::addRequest	./requestprocessor.hxx	/^            void addRequest(ProcessQueueItem* request);$/;"	p	class:Lightning::RequestProcessor	access:public	signature:(ProcessQueueItem* request)
Lightning::RequestProcessor::addTask	./requestprocessor.hxx	/^            void addTask(ProcessQueueItemPtrType requestTask);$/;"	p	class:Lightning::RequestProcessor	access:private	signature:(ProcessQueueItemPtrType requestTask)
Lightning::RequestProcessor::initThreadPool	./requestprocessor.hxx	/^            void initThreadPool();$/;"	p	class:Lightning::RequestProcessor	access:private	signature:()
Lightning::RequestProcessor::mCondition	./requestprocessor.hxx	/^            boost::condition mCondition;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::mMutex	./requestprocessor.hxx	/^            boost::mutex mMutex;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::mProcessQueue	./requestprocessor.hxx	/^            boost::shared_ptr<ProcessQueue> mProcessQueue;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::mShutdown	./requestprocessor.hxx	/^            bool mShutdown;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::mTaskExcutor	./requestprocessor.hxx	/^            boost::shared_ptr<boost::threadpool::pool> mTaskExcutor;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::mThread	./requestprocessor.hxx	/^            boost::scoped_ptr<boost::thread> mThread;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::mWorkThreadSize	./requestprocessor.hxx	/^            size_t mWorkThreadSize;$/;"	m	class:Lightning::RequestProcessor	access:private
Lightning::RequestProcessor::processTask	./requestprocessor.hxx	/^            void processTask(ProcessQueueItemPtrType requestTask);$/;"	p	class:Lightning::RequestProcessor	access:private	signature:(ProcessQueueItemPtrType requestTask)
Lightning::RequestProcessor::run	./requestprocessor.hxx	/^            void run();$/;"	p	class:Lightning::RequestProcessor	access:private	signature:()
Lightning::RequestProcessor::start	./requestprocessor.hxx	/^            void start();$/;"	p	class:Lightning::RequestProcessor	access:public	signature:()
Lightning::RequestProcessor::stop	./requestprocessor.hxx	/^            void stop();$/;"	p	class:Lightning::RequestProcessor	access:public	signature:()
Lightning::RequestProcessor::~RequestProcessor	./requestprocessor.hxx	/^            ~RequestProcessor();$/;"	p	class:Lightning::RequestProcessor	access:public	signature:()
Lightning::Response	./response.hxx	/^    class Response$/;"	c	namespace:Lightning	inherits:ProcessQueueItem
Lightning::Response::Response	./response.hxx	/^            Response()$/;"	f	class:Lightning::Response	access:public	signature:()
Lightning::ResponseProcessor	./responseprocessor.hxx	/^    class ResponseProcessor$/;"	c	namespace:Lightning
Lightning::ResponseProcessor::EventBaseWeakPtrType	./responseprocessor.hxx	/^            typedef boost::weak_ptr<event_base> EventBaseWeakPtrType;$/;"	t	class:Lightning::ResponseProcessor	access:public
Lightning::ResponseProcessor::OnProcessResponse	./responseprocessor.hxx	/^            ResponseNotifyEvent OnProcessResponse;$/;"	m	class:Lightning::ResponseProcessor	access:public
Lightning::ResponseProcessor::ProcessQueueItemPtrType	./responseprocessor.hxx	/^            typedef boost::shared_ptr<ProcessQueueItem> ProcessQueueItemPtrType;$/;"	t	class:Lightning::ResponseProcessor	access:private
Lightning::ResponseProcessor::ResponseNotifyEvent	./responseprocessor.hxx	/^            typedef boost::function<void (const ProcessQueueItemPtrType&)> ResponseNotifyEvent;$/;"	t	class:Lightning::ResponseProcessor	access:private
Lightning::ResponseProcessor::ResponseProcessor	./responseprocessor.hxx	/^            ResponseProcessor(EventBaseWeakPtrType eventBase);$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:(EventBaseWeakPtrType eventBase)
Lightning::ResponseProcessor::addResponse	./responseprocessor.hxx	/^            void addResponse(ProcessQueueItem* response); $/;"	p	class:Lightning::ResponseProcessor	access:public	signature:(ProcessQueueItem* response)
Lightning::ResponseProcessor::mEventBase	./responseprocessor.hxx	/^            EventBaseWeakPtrType mEventBase;$/;"	m	class:Lightning::ResponseProcessor	access:private
Lightning::ResponseProcessor::mProcessQueue	./responseprocessor.hxx	/^            boost::shared_ptr<ResponseQueue> mProcessQueue;$/;"	m	class:Lightning::ResponseProcessor	access:private
Lightning::ResponseProcessor::mStop	./responseprocessor.hxx	/^            bool mStop;$/;"	m	class:Lightning::ResponseProcessor	access:private
Lightning::ResponseProcessor::onResponsePushNotify	./responseprocessor.hxx	/^            void onResponsePushNotify(ResponseQueue*);$/;"	p	class:Lightning::ResponseProcessor	access:private	signature:(ResponseQueue*)
Lightning::ResponseProcessor::process	./responseprocessor.hxx	/^            void process();$/;"	p	class:Lightning::ResponseProcessor	access:private	signature:()
Lightning::ResponseProcessor::start	./responseprocessor.hxx	/^            void start();$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:()
Lightning::ResponseProcessor::stop	./responseprocessor.hxx	/^            void stop();$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:()
Lightning::ResponseProcessor::~ResponseProcessor	./responseprocessor.hxx	/^            ~ResponseProcessor();$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:()
Lightning::ResponseQueue	./responsequeue.hxx	/^    class ResponseQueue$/;"	c	namespace:Lightning	inherits:ProcessQueue
Lightning::ResponseQueue::EventBaseWeakPtrType	./responsequeue.hxx	/^            typedef boost::weak_ptr<event_base> EventBaseWeakPtrType;$/;"	t	class:Lightning::ResponseQueue	access:public
Lightning::ResponseQueue::OnResponsePushNotify	./responsequeue.hxx	/^            ResponsePushNotifyEvent OnResponsePushNotify;$/;"	m	class:Lightning::ResponseQueue	access:public
Lightning::ResponseQueue::ResponsePushNotifyEvent	./responsequeue.hxx	/^            typedef boost::function<void (ResponseQueue*)> ResponsePushNotifyEvent;$/;"	t	class:Lightning::ResponseQueue	access:private
Lightning::ResponseQueue::ResponseQueue	./responsequeue.hxx	/^            ResponseQueue(EventBaseWeakPtrType eventBase);$/;"	p	class:Lightning::ResponseQueue	access:public	signature:(EventBaseWeakPtrType eventBase)
Lightning::ResponseQueue::init	./responsequeue.hxx	/^            bool init();$/;"	p	class:Lightning::ResponseQueue	access:public	signature:()
Lightning::ResponseQueue::initFdPair	./responsequeue.hxx	/^            bool initFdPair();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
Lightning::ResponseQueue::mEventBase	./responsequeue.hxx	/^            EventBaseWeakPtrType mEventBase;$/;"	m	class:Lightning::ResponseQueue	access:private
Lightning::ResponseQueue::mFdPair	./responsequeue.hxx	/^            int mFdPair[2];$/;"	m	class:Lightning::ResponseQueue	access:private
Lightning::ResponseQueue::notifyResponsePush	./responsequeue.hxx	/^            bool notifyResponsePush();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
Lightning::ResponseQueue::onResponsePushNotify	./responsequeue.hxx	/^            static void onResponsePushNotify(evutil_socket_t fd,$/;"	p	class:Lightning::ResponseQueue	access:private	signature:(evutil_socket_t fd, short events, void* userData)
Lightning::ResponseQueue::push	./responsequeue.hxx	/^            bool push(ProcessQueueItem* item);$/;"	p	class:Lightning::ResponseQueue	access:public	signature:(ProcessQueueItem* item)
Lightning::ResponseQueue::recvResponsePushNotify	./responsequeue.hxx	/^            bool recvResponsePushNotify();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
Lightning::ResponseQueue::uninit	./responsequeue.hxx	/^            void uninit();$/;"	p	class:Lightning::ResponseQueue	access:public	signature:()
Lightning::ResponseQueue::uninitFdPair	./responsequeue.hxx	/^            void uninitFdPair();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
Lightning::ResponseQueue::~ResponseQueue	./responsequeue.hxx	/^            ~ResponseQueue();$/;"	p	class:Lightning::ResponseQueue	access:public	signature:()
Lightning::Session	./session.hxx	/^    class Session$/;"	c	namespace:Lightning	inherits:boost::enable_shared_from_this
Lightning::Session::OnRecvRequestFinished	./session.hxx	/^            RecvRequestFinishNotify OnRecvRequestFinished;$/;"	m	class:Lightning::Session	access:public
Lightning::Session::RecvRequestFinishNotify	./session.hxx	/^            typedef boost::function<void (boost::shared_ptr<Session>, UserRequestPtrType)> RecvRequestFinishNotify;$/;"	t	class:Lightning::Session	access:private
Lightning::Session::Session	./session.hxx	/^            Session(evutil_socket_t fd, const char* ip);$/;"	p	class:Lightning::Session	access:public	signature:(evutil_socket_t fd, const char* ip)
Lightning::Session::UserRequestPtrType	./session.hxx	/^            typedef boost::shared_ptr<UserRequest> UserRequestPtrType;$/;"	t	class:Lightning::Session	access:private
Lightning::Session::getInfo	./session.hxx	/^            const SessionInfo& getInfo() const { return *mSessionInfo; }$/;"	f	class:Lightning::Session	access:public	signature:() const
Lightning::Session::init	./session.hxx	/^            bool init(event_base* eb,$/;"	p	class:Lightning::Session	access:public	signature:(event_base* eb, UserRequestPtrType userRequest)
Lightning::Session::mBufferEvent	./session.hxx	/^            boost::shared_ptr<bufferevent> mBufferEvent;$/;"	m	class:Lightning::Session	access:private
Lightning::Session::mDataStreamHandler	./session.hxx	/^            boost::shared_ptr<DataHandler> mDataStreamHandler;$/;"	m	class:Lightning::Session	access:private
Lightning::Session::mSessionInfo	./session.hxx	/^            boost::shared_ptr<SessionInfo> mSessionInfo;$/;"	m	class:Lightning::Session	access:private
Lightning::Session::mUserRequest	./session.hxx	/^            UserRequestPtrType mUserRequest;$/;"	m	class:Lightning::Session	access:private
Lightning::Session::onBufferEventRead	./session.hxx	/^            static void onBufferEventRead(bufferevent* bev, void* ctx);$/;"	p	class:Lightning::Session	access:private	signature:(bufferevent* bev, void* ctx)
Lightning::Session::onBufferEventWrite	./session.hxx	/^            static void onBufferEventWrite(bufferevent* bev, void* ctx);$/;"	p	class:Lightning::Session	access:private	signature:(bufferevent* bev, void* ctx)
Lightning::Session::onBuffereventEvent	./session.hxx	/^            static void onBuffereventEvent(bufferevent* bev, short what, void* ctx);$/;"	p	class:Lightning::Session	access:private	signature:(bufferevent* bev, short what, void* ctx)
Lightning::Session::onRecvRequestFinished	./session.hxx	/^            void onRecvRequestFinished(DataHandler*, UserRequestPtrType);$/;"	p	class:Lightning::Session	access:private	signature:(DataHandler*, UserRequestPtrType)
Lightning::Session::startAction	./session.hxx	/^            void startAction(short what);$/;"	p	class:Lightning::Session	access:public	signature:(short what)
Lightning::Session::toString	./session.hxx	/^            std::ostream& toString(std::ostream& os) const;$/;"	p	class:Lightning::Session	access:public	signature:(std::ostream& os) const
Lightning::Session::uninit	./session.hxx	/^            void uninit();$/;"	p	class:Lightning::Session	access:public	signature:()
Lightning::Session::~Session	./session.hxx	/^            ~Session();$/;"	p	class:Lightning::Session	access:public	signature:()
Lightning::SessionHandler	./sessionHandler.hxx	/^    class SessionHandler$/;"	c	namespace:Lightning
Lightning::SessionHandler::onRequest	./sessionHandler.hxx	/^            virtual void onRequest(const boost::shared_ptr<UserRequest>& request) = 0;$/;"	p	class:Lightning::SessionHandler	access:public	signature:(const boost::shared_ptr<UserRequest>& request)
Lightning::SessionHandler::onStart	./sessionHandler.hxx	/^            virtual void onStart(const SessionInfo& sessionInfo) = 0;$/;"	p	class:Lightning::SessionHandler	access:public	signature:(const SessionInfo& sessionInfo)
Lightning::SessionHandler::~SessionHandler	./sessionHandler.hxx	/^            virtual ~SessionHandler() {}$/;"	f	class:Lightning::SessionHandler	access:public	signature:()
Lightning::SessionInfo	./sessioninfo.hxx	/^    struct SessionInfo$/;"	s	namespace:Lightning
Lightning::SessionInfo::SessionInfo	./sessioninfo.hxx	/^        SessionInfo(evutil_socket_t fd,$/;"	p	struct:Lightning::SessionInfo	access:public	signature:(evutil_socket_t fd, const char* ip)
Lightning::SessionInfo::mClientFd	./sessioninfo.hxx	/^        evutil_socket_t mClientFd;$/;"	m	struct:Lightning::SessionInfo	access:public
Lightning::SessionInfo::mClientIp	./sessioninfo.hxx	/^        std::string mClientIp;$/;"	m	struct:Lightning::SessionInfo	access:public
Lightning::SessionManager	./sessionmanager.hxx	/^    class SessionManager$/;"	c	namespace:Lightning
Lightning::SessionManager::SessionContainerType	./sessionmanager.hxx	/^            typedef std::set<SessionPtrType> SessionContainerType;$/;"	t	class:Lightning::SessionManager	access:public
Lightning::SessionManager::SessionManager	./sessionmanager.hxx	/^            SessionManager();$/;"	p	class:Lightning::SessionManager	access:public	signature:()
Lightning::SessionManager::SessionPtrType	./sessionmanager.hxx	/^            typedef boost::shared_ptr<Session> SessionPtrType;$/;"	t	class:Lightning::SessionManager	access:public
Lightning::SessionManager::addSession	./sessionmanager.hxx	/^            bool addSession(SessionPtrType session);$/;"	p	class:Lightning::SessionManager	access:public	signature:(SessionPtrType session)
Lightning::SessionManager::mSessionContainer	./sessionmanager.hxx	/^            SessionContainerType mSessionContainer;$/;"	m	class:Lightning::SessionManager	access:private
Lightning::SessionManager::removedSession	./sessionmanager.hxx	/^            void removedSession(SessionPtrType session);$/;"	p	class:Lightning::SessionManager	access:public	signature:(SessionPtrType session)
Lightning::SessionManager::~SessionManager	./sessionmanager.hxx	/^            ~SessionManager();$/;"	p	class:Lightning::SessionManager	access:public	signature:()
Lightning::SockEventCallbackUtil	./SockEventCallbackUtil.hxx	/^    class SockEventCallbackUtil$/;"	c	namespace:Lightning
Lightning::SockEventCallbackUtil::onAccepted	./SockEventCallbackUtil.hxx	/^            static void onAccepted(evutil_socket_t, short, void *);$/;"	p	class:Lightning::SockEventCallbackUtil	access:public	signature:(evutil_socket_t, short, void *)
Lightning::SockEventCallbackUtil::onSignalHandler	./SockEventCallbackUtil.hxx	/^            static void onSignalHandler(evutil_socket_t, short, void *);$/;"	p	class:Lightning::SockEventCallbackUtil	access:public	signature:(evutil_socket_t, short, void *)
Lightning::StartRequestTask	./request.hxx	/^    class StartRequestTask$/;"	c	namespace:Lightning	inherits:ProcessQueueItem
Lightning::StartRequestTask::StartRequestTask	./request.hxx	/^            StartRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	p	class:Lightning::StartRequestTask	access:public	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session)
Lightning::StartRequestTask::getSession	./request.hxx	/^            boost::shared_ptr<Session> getSession() const$/;"	f	class:Lightning::StartRequestTask	access:public	signature:() const
Lightning::StartRequestTask::mSession	./request.hxx	/^            boost::weak_ptr<Session> mSession;$/;"	m	class:Lightning::StartRequestTask	access:private
Lightning::UserRequest	./userrequest.hxx	/^    class UserRequest$/;"	c	namespace:Lightning
Lightning::UserRequest::toString	./userrequest.hxx	/^            virtual std::string toString() = 0;$/;"	p	class:Lightning::UserRequest	access:public	signature:()
Lightning::UserRequest::~UserRequest	./userrequest.hxx	/^            virtual ~UserRequest() {}$/;"	f	class:Lightning::UserRequest	access:public	signature:()
Lightning::UserRequestFactory	./userrequest.hxx	/^    class UserRequestFactory$/;"	c	namespace:Lightning
Lightning::UserRequestFactory::create	./userrequest.hxx	/^            virtual UserRequestPtrType create() = 0;$/;"	p	class:Lightning::UserRequestFactory	access:public	signature:()
Lightning::UserRequestFactory::~UserRequestFactory	./userrequest.hxx	/^            virtual ~UserRequestFactory() {}$/;"	f	class:Lightning::UserRequestFactory	access:public	signature:()
Lightning::UserRequestFactoryPtrType	./userrequest.hxx	/^    typedef boost::shared_ptr<UserRequestFactory> UserRequestFactoryPtrType;$/;"	t	namespace:Lightning
Lightning::UserRequestPtrType	./userrequest.hxx	/^    typedef boost::shared_ptr<UserRequest> UserRequestPtrType;$/;"	t	namespace:Lightning
Lightning::UserRequestWithHeader	./userrequest.hxx	/^    class UserRequestWithHeader$/;"	c	namespace:Lightning	inherits:UserRequest
Lightning::UserRequestWithHeader::getBodySize	./userrequest.hxx	/^            virtual size_t getBodySize() const = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:() const
Lightning::UserRequestWithHeader::getHeaderSize	./userrequest.hxx	/^            virtual size_t getHeaderSize() const = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:() const
Lightning::UserRequestWithHeader::setBody	./userrequest.hxx	/^            virtual bool setBody(const char* body, size_t length) = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:(const char* body, size_t length)
Lightning::UserRequestWithHeader::setHeader	./userrequest.hxx	/^            virtual bool setHeader(const char* header, size_t length) = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:(const char* header, size_t length)
Lightning::UserRequestWithHeader::~UserRequestWithHeader	./userrequest.hxx	/^            virtual ~UserRequestWithHeader() {}$/;"	f	class:Lightning::UserRequestWithHeader	access:public	signature:()
Lightning::UserRequestWithHeaderFactory	./userrequest.hxx	/^    class UserRequestWithHeaderFactory$/;"	c	namespace:Lightning	inherits:UserRequestFactory
Lightning::UserRequestWithHeaderFactory::create	./userrequest.hxx	/^            virtual UserRequestPtrType create() = 0;$/;"	p	class:Lightning::UserRequestWithHeaderFactory	access:public	signature:()
Lightning::UserRequestWithHeaderFactory::~UserRequestWithHeaderFactory	./userrequest.hxx	/^            virtual ~UserRequestWithHeaderFactory() {}$/;"	f	class:Lightning::UserRequestWithHeaderFactory	access:public	signature:()
Lightning::UserRequestWithHeaderPtrType	./userrequest.hxx	/^    typedef boost::shared_ptr<UserRequestWithHeader> UserRequestWithHeaderPtrType;$/;"	t	namespace:Lightning
Lightning::UserResponse	./userresponse.hxx	/^    class UserResponse$/;"	c	namespace:Lightning
Lightning::UserResponse::write	./userresponse.hxx	/^            virtual void write(boost::shared_array<char>& data) = 0;$/;"	p	class:Lightning::UserResponse	access:public	signature:(boost::shared_array<char>& data)
Lightning::UserResponse::~UserResponse	./userresponse.hxx	/^            virtual ~UserResponse() {}$/;"	f	class:Lightning::UserResponse	access:public	signature:()
Lightning::UserResponseFactory	./userresponse.hxx	/^    class UserResponseFactory$/;"	c	namespace:Lightning	inherits:boost::noncopyable
Lightning::UserResponseFactory::create	./userresponse.hxx	/^            virtual UserResponsePtrType create() = 0;$/;"	p	class:Lightning::UserResponseFactory	access:public	signature:()
Lightning::UserResponseFactory::~UserResponseFactory	./userresponse.hxx	/^            virtual ~UserResponseFactory() {}$/;"	f	class:Lightning::UserResponseFactory	access:public	signature:()
Lightning::UserResponseFactoryPtrType	./userresponse.hxx	/^    typedef boost::shared_ptr<UserResponseFactory> UserResponseFactoryPtrType;$/;"	t	namespace:Lightning
Lightning::UserResponsePtrType	./userresponse.hxx	/^    typedef boost::shared_ptr<UserResponse> UserResponsePtrType;$/;"	t	namespace:Lightning
Lightning::operator <<	./session.cxx	/^std::ostream& Lightning::operator << (std::ostream& os, const Session& session)$/;"	f	class:Lightning	signature:(std::ostream& os, const Session& session)
Lightning::operator <<	./session.hxx	/^    std::ostream& operator << (std::ostream& os, const Session& session);$/;"	p	namespace:Lightning	signature:(std::ostream& os, const Session& session)
LightningServer	./LightningServer.cxx	/^LightningServer::LightningServer(UserRequestFactoryPtrType userRequestFactory,$/;"	f	class:LightningServer	signature:(UserRequestFactoryPtrType userRequestFactory, UserResponseFactoryPtrType userResponseFactory, const char* logPath)
LightningServer	./LightningServer.hxx	/^            LightningServer(UserRequestFactoryPtrType userReuqestFactory,$/;"	p	class:Lightning::LightningServer	access:public	signature:(UserRequestFactoryPtrType userReuqestFactory, UserResponseFactoryPtrType userResponseFactory, const char* logPath)
LightningServer	./LightningServer.hxx	/^    class LightningServer$/;"	c	namespace:Lightning
LightningServer::LightningServer	./LightningServer.cxx	/^LightningServer::LightningServer(UserRequestFactoryPtrType userRequestFactory,$/;"	f	class:LightningServer	signature:(UserRequestFactoryPtrType userRequestFactory, UserResponseFactoryPtrType userResponseFactory, const char* logPath)
LightningServer::initLog	./LightningServer.cxx	/^void LightningServer::initLog(const char* path)$/;"	f	class:LightningServer	signature:(const char* path)
LightningServer::process	./LightningServer.cxx	/^void LightningServer::process()$/;"	f	class:LightningServer	signature:()
LightningServer::regSessionHandler	./LightningServer.cxx	/^bool LightningServer::regSessionHandler(SessionHandlerPtrType sessionHandler)$/;"	f	class:LightningServer	signature:(SessionHandlerPtrType sessionHandler)
LightningServer::setupEventBase	./LightningServer.cxx	/^bool LightningServer::setupEventBase()$/;"	f	class:LightningServer	signature:()
LightningServer::setupSignalHandler	./LightningServer.cxx	/^void LightningServer::setupSignalHandler()$/;"	f	class:LightningServer	signature:()
LightningServer::start	./LightningServer.cxx	/^void LightningServer::start(const char* ip, int port)$/;"	f	class:LightningServer	signature:(const char* ip, int port)
LightningServer::startListen	./LightningServer.cxx	/^bool LightningServer::startListen(const char* ip, int port)$/;"	f	class:LightningServer	signature:(const char* ip, int port)
LightningServer::stop	./LightningServer.cxx	/^void LightningServer::stop()$/;"	f	class:LightningServer	signature:()
LightningServer::~LightningServer	./LightningServer.cxx	/^LightningServer::~LightningServer()$/;"	f	class:LightningServer	signature:()
LightningServerProcessor	./LightningServerProcessor.cxx	/^LightningServerProcessor::LightningServerProcessor(EventBaseWeakPtrType eb,$/;"	f	class:LightningServerProcessor	signature:(EventBaseWeakPtrType eb, SessionHandlerPtrType sessionHandler, boost::shared_ptr<UserRequestFactory> userRequestFactory, boost::shared_ptr<UserResponseFactory> userResponseFactory)
LightningServerProcessor	./LightningServerProcessor.hxx	/^            LightningServerProcessor(EventBaseWeakPtrType eb,$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:(EventBaseWeakPtrType eb, SessionHandlerPtrType sessionHandler, boost::shared_ptr<UserRequestFactory> userReuqestFactory, boost::shared_ptr<UserResponseFactory> userResponseFactory)
LightningServerProcessor	./LightningServerProcessor.hxx	/^    class LightningServerProcessor$/;"	c	namespace:Lightning
LightningServerProcessor::LightningServerProcessor	./LightningServerProcessor.cxx	/^LightningServerProcessor::LightningServerProcessor(EventBaseWeakPtrType eb,$/;"	f	class:LightningServerProcessor	signature:(EventBaseWeakPtrType eb, SessionHandlerPtrType sessionHandler, boost::shared_ptr<UserRequestFactory> userRequestFactory, boost::shared_ptr<UserResponseFactory> userResponseFactory)
LightningServerProcessor::addSession	./LightningServerProcessor.cxx	/^void LightningServerProcessor::addSession(evutil_socket_t fd,$/;"	f	class:LightningServerProcessor	signature:(evutil_socket_t fd, sockaddr_in& addr)
LightningServerProcessor::handleRequestEvent	./LightningServerProcessor.cxx	/^void LightningServerProcessor::handleRequestEvent(RequestProcessor& requestProcessor,$/;"	f	class:LightningServerProcessor	signature:(RequestProcessor& requestProcessor, const boost::shared_ptr<ProcessQueueItem>& requestTask)
LightningServerProcessor::handleResponseEvent	./LightningServerProcessor.cxx	/^void LightningServerProcessor::handleResponseEvent(const boost::shared_ptr<ProcessQueueItem>& requestTask)$/;"	f	class:LightningServerProcessor	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
LightningServerProcessor::onRecvRequestFinished	./LightningServerProcessor.cxx	/^void LightningServerProcessor::onRecvRequestFinished(boost::shared_ptr<Session> session,$/;"	f	class:LightningServerProcessor	signature:(boost::shared_ptr<Session> session, boost::shared_ptr<UserRequest> request)
LightningServerProcessor::processAccepted	./LightningServerProcessor.cxx	/^void LightningServerProcessor::processAccepted(evutil_socket_t fd)$/;"	f	class:LightningServerProcessor	signature:(evutil_socket_t fd)
LightningServerProcessor::processRequestTask	./LightningServerProcessor.cxx	/^void LightningServerProcessor::processRequestTask(const boost::shared_ptr<ProcessQueueItem>& requestTask)$/;"	f	class:LightningServerProcessor	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
LightningServerProcessor::processStartTask	./LightningServerProcessor.cxx	/^void LightningServerProcessor::processStartTask(const boost::shared_ptr<ProcessQueueItem>& requestTask)$/;"	f	class:LightningServerProcessor	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
LightningServerProcessor::start	./LightningServerProcessor.cxx	/^void LightningServerProcessor::start()$/;"	f	class:LightningServerProcessor	signature:()
LightningServerProcessor::startRequestProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::startRequestProcessor()$/;"	f	class:LightningServerProcessor	signature:()
LightningServerProcessor::startResponseProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::startResponseProcessor()$/;"	f	class:LightningServerProcessor	signature:()
LightningServerProcessor::stop	./LightningServerProcessor.cxx	/^void LightningServerProcessor::stop()$/;"	f	class:LightningServerProcessor	signature:()
LightningServerProcessor::stopRequestProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::stopRequestProcessor()$/;"	f	class:LightningServerProcessor	signature:()
LightningServerProcessor::stopResponseProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::stopResponseProcessor()$/;"	f	class:LightningServerProcessor	signature:()
LightningServerUtil	./LightningServer.cxx	/^class LightningServerUtil$/;"	c	file:
LightningServerUtil::AddExitSignalEvent	./LightningServer.cxx	/^        static void AddExitSignalEvent(event_base* eb,$/;"	f	class:LightningServerUtil	access:public	signature:(event_base* eb, event_callback_fn callBackFunc, void* arg, int signal)
LightningServerUtil::AddSockEvent	./LightningServer.cxx	/^        static bool AddSockEvent(event_base* eb,$/;"	f	class:LightningServerUtil	access:public	signature:(event_base* eb, evutil_socket_t fd, short type, event_callback_fn callBackFunc, void* arg, const struct timeval* timeOut)
MAX_WORK_THREAD_COUNT	./LightningServerProcessor.cxx	/^const int MAX_WORK_THREAD_COUNT = 5;$/;"	v
Message	./message.hxx	/^    class Message$/;"	c	namespace:Lightning
OnProcessResponse	./responseprocessor.hxx	/^            ResponseNotifyEvent OnProcessResponse;$/;"	m	class:Lightning::ResponseProcessor	access:public
OnRecvRequestFinished	./datahandler.hxx	/^            RecvRequestFinishedNotifyEvent OnRecvRequestFinished;$/;"	m	class:Lightning::DataHandler	access:public
OnRecvRequestFinished	./session.hxx	/^            RecvRequestFinishNotify OnRecvRequestFinished;$/;"	m	class:Lightning::Session	access:public
OnResponsePushNotify	./responsequeue.hxx	/^            ResponsePushNotifyEvent OnResponsePushNotify;$/;"	m	class:Lightning::ResponseQueue	access:public
PRT_NONE	./baserequest.hxx	/^                PRT_NONE = 0,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
PRT_REQUEST	./baserequest.hxx	/^                PRT_REQUEST,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
PRT_RESPONSE	./baserequest.hxx	/^                PRT_RESPONSE,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
PRT_START	./baserequest.hxx	/^                PRT_START,$/;"	e	enum:Lightning::ProcessQueueItem::ProcessRequestType
PS_BODY	./datastreamhandler.hxx	/^                PS_BODY,$/;"	e	enum:Lightning::DataStreamHandler::ParseStep
PS_HEADER	./datastreamhandler.hxx	/^                PS_HEADER = 0,$/;"	e	enum:Lightning::DataStreamHandler::ParseStep
ParseStep	./datastreamhandler.hxx	/^            enum ParseStep$/;"	g	class:Lightning::DataStreamHandler	access:private
ProcessItemQueueType	./processqueue.hxx	/^            typedef boost::lockfree::fifo<ProcessQueueItem*> ProcessItemQueueType;$/;"	t	class:Lightning::ProcessQueue	access:private
ProcessQueue	./processqueue.cxx	/^ProcessQueue::ProcessQueue()$/;"	f	class:ProcessQueue	signature:()
ProcessQueue	./processqueue.hxx	/^            ProcessQueue();$/;"	p	class:Lightning::ProcessQueue	access:public	signature:()
ProcessQueue	./processqueue.hxx	/^    class ProcessQueue$/;"	c	namespace:Lightning
ProcessQueue::ProcessQueue	./processqueue.cxx	/^ProcessQueue::ProcessQueue()$/;"	f	class:ProcessQueue	signature:()
ProcessQueue::pop	./processqueue.cxx	/^ProcessQueueItemPtrType ProcessQueue::pop()$/;"	f	class:ProcessQueue	signature:()
ProcessQueue::push	./processqueue.cxx	/^bool ProcessQueue::push(ProcessQueueItem* item)$/;"	f	class:ProcessQueue	signature:(ProcessQueueItem* item)
ProcessQueue::~ProcessQueue	./processqueue.cxx	/^ProcessQueue::~ProcessQueue()$/;"	f	class:ProcessQueue	signature:()
ProcessQueueItem	./baserequest.hxx	/^            ProcessQueueItem(ProcessRequestType type)$/;"	f	class:Lightning::ProcessQueueItem	access:protected	signature:(ProcessRequestType type)
ProcessQueueItem	./baserequest.hxx	/^    class ProcessQueueItem$/;"	c	namespace:Lightning
ProcessQueueItemPtrType	./processqueue.hxx	/^    typedef boost::shared_ptr<ProcessQueueItem> ProcessQueueItemPtrType;$/;"	t	namespace:Lightning
ProcessQueueItemPtrType	./requestprocessor.hxx	/^            typedef boost::shared_ptr<ProcessQueueItem> ProcessQueueItemPtrType;$/;"	t	class:Lightning::RequestProcessor	access:private
ProcessQueueItemPtrType	./responseprocessor.hxx	/^            typedef boost::shared_ptr<ProcessQueueItem> ProcessQueueItemPtrType;$/;"	t	class:Lightning::ResponseProcessor	access:private
ProcessRequestType	./baserequest.hxx	/^            enum ProcessRequestType$/;"	g	class:Lightning::ProcessQueueItem	access:public
ReceivedRequestTask	./request.cxx	/^ReceivedRequestTask::ReceivedRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	f	class:ReceivedRequestTask	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session, boost::shared_ptr<UserRequest> request)
ReceivedRequestTask	./request.hxx	/^            ReceivedRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	p	class:Lightning::ReceivedRequestTask	access:public	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session, boost::shared_ptr<UserRequest> request)
ReceivedRequestTask	./request.hxx	/^    class ReceivedRequestTask$/;"	c	namespace:Lightning	inherits:ProcessQueueItem
ReceivedRequestTask::ReceivedRequestTask	./request.cxx	/^ReceivedRequestTask::ReceivedRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	f	class:ReceivedRequestTask	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session, boost::shared_ptr<UserRequest> request)
RecvRequestFinishNotify	./session.hxx	/^            typedef boost::function<void (boost::shared_ptr<Session>, UserRequestPtrType)> RecvRequestFinishNotify;$/;"	t	class:Lightning::Session	access:private
RecvRequestFinishedNotifyEvent	./datahandler.hxx	/^                        boost::shared_ptr<UserRequest>)> RecvRequestFinishedNotifyEvent;$/;"	t	class:Lightning::DataHandler	access:public
RequestProcessor	./requestprocessor.cxx	/^RequestProcessor::RequestProcessor(size_t workThreadSize)$/;"	f	class:RequestProcessor	signature:(size_t workThreadSize)
RequestProcessor	./requestprocessor.hxx	/^            RequestProcessor(size_t workThreadSize);$/;"	p	class:Lightning::RequestProcessor	access:public	signature:(size_t workThreadSize)
RequestProcessor	./requestprocessor.hxx	/^    class RequestProcessor $/;"	c	namespace:Lightning
RequestProcessor::RequestProcessor	./requestprocessor.cxx	/^RequestProcessor::RequestProcessor(size_t workThreadSize)$/;"	f	class:RequestProcessor	signature:(size_t workThreadSize)
RequestProcessor::addRequest	./requestprocessor.cxx	/^void RequestProcessor::addRequest(ProcessQueueItem* request)$/;"	f	class:RequestProcessor	signature:(ProcessQueueItem* request)
RequestProcessor::addTask	./requestprocessor.cxx	/^void RequestProcessor::addTask(ProcessQueueItemPtrType requestTask)$/;"	f	class:RequestProcessor	signature:(ProcessQueueItemPtrType requestTask)
RequestProcessor::initThreadPool	./requestprocessor.cxx	/^void RequestProcessor::initThreadPool()$/;"	f	class:RequestProcessor	signature:()
RequestProcessor::processTask	./requestprocessor.cxx	/^void RequestProcessor::processTask(ProcessQueueItemPtrType requestTask)$/;"	f	class:RequestProcessor	signature:(ProcessQueueItemPtrType requestTask)
RequestProcessor::run	./requestprocessor.cxx	/^void RequestProcessor::run()$/;"	f	class:RequestProcessor	signature:()
RequestProcessor::start	./requestprocessor.cxx	/^void RequestProcessor::start()$/;"	f	class:RequestProcessor	signature:()
RequestProcessor::stop	./requestprocessor.cxx	/^void RequestProcessor::stop()$/;"	f	class:RequestProcessor	signature:()
RequestProcessor::~RequestProcessor	./requestprocessor.cxx	/^RequestProcessor::~RequestProcessor()$/;"	f	class:RequestProcessor	signature:()
Response	./response.hxx	/^            Response()$/;"	f	class:Lightning::Response	access:public	signature:()
Response	./response.hxx	/^    class Response$/;"	c	namespace:Lightning	inherits:ProcessQueueItem
ResponseNotifyEvent	./responseprocessor.hxx	/^            typedef boost::function<void (const ProcessQueueItemPtrType&)> ResponseNotifyEvent;$/;"	t	class:Lightning::ResponseProcessor	access:private
ResponseProcessor	./responseprocessor.cxx	/^ResponseProcessor::ResponseProcessor(EventBaseWeakPtrType eventBase)$/;"	f	class:ResponseProcessor	signature:(EventBaseWeakPtrType eventBase)
ResponseProcessor	./responseprocessor.hxx	/^            ResponseProcessor(EventBaseWeakPtrType eventBase);$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:(EventBaseWeakPtrType eventBase)
ResponseProcessor	./responseprocessor.hxx	/^    class ResponseProcessor$/;"	c	namespace:Lightning
ResponseProcessor::ResponseProcessor	./responseprocessor.cxx	/^ResponseProcessor::ResponseProcessor(EventBaseWeakPtrType eventBase)$/;"	f	class:ResponseProcessor	signature:(EventBaseWeakPtrType eventBase)
ResponseProcessor::addResponse	./responseprocessor.cxx	/^void ResponseProcessor::addResponse(ProcessQueueItem* response)$/;"	f	class:ResponseProcessor	signature:(ProcessQueueItem* response)
ResponseProcessor::onResponsePushNotify	./responseprocessor.cxx	/^void ResponseProcessor::onResponsePushNotify(ResponseQueue*)$/;"	f	class:ResponseProcessor	signature:(ResponseQueue*)
ResponseProcessor::process	./responseprocessor.cxx	/^void ResponseProcessor::process()$/;"	f	class:ResponseProcessor	signature:()
ResponseProcessor::start	./responseprocessor.cxx	/^void ResponseProcessor::start()$/;"	f	class:ResponseProcessor	signature:()
ResponseProcessor::stop	./responseprocessor.cxx	/^void ResponseProcessor::stop()$/;"	f	class:ResponseProcessor	signature:()
ResponseProcessor::~ResponseProcessor	./responseprocessor.cxx	/^ResponseProcessor::~ResponseProcessor()$/;"	f	class:ResponseProcessor	signature:()
ResponsePushNotifyEvent	./responsequeue.hxx	/^            typedef boost::function<void (ResponseQueue*)> ResponsePushNotifyEvent;$/;"	t	class:Lightning::ResponseQueue	access:private
ResponseQueue	./responsequeue.cxx	/^ResponseQueue::ResponseQueue(EventBaseWeakPtrType eventBase)$/;"	f	class:ResponseQueue	signature:(EventBaseWeakPtrType eventBase)
ResponseQueue	./responsequeue.hxx	/^            ResponseQueue(EventBaseWeakPtrType eventBase);$/;"	p	class:Lightning::ResponseQueue	access:public	signature:(EventBaseWeakPtrType eventBase)
ResponseQueue	./responsequeue.hxx	/^    class ResponseQueue$/;"	c	namespace:Lightning	inherits:ProcessQueue
ResponseQueue::ResponseQueue	./responsequeue.cxx	/^ResponseQueue::ResponseQueue(EventBaseWeakPtrType eventBase)$/;"	f	class:ResponseQueue	signature:(EventBaseWeakPtrType eventBase)
ResponseQueue::init	./responsequeue.cxx	/^bool ResponseQueue::init()$/;"	f	class:ResponseQueue	signature:()
ResponseQueue::initFdPair	./responsequeue.cxx	/^bool ResponseQueue::initFdPair()$/;"	f	class:ResponseQueue	signature:()
ResponseQueue::notifyResponsePush	./responsequeue.cxx	/^bool ResponseQueue::notifyResponsePush()$/;"	f	class:ResponseQueue	signature:()
ResponseQueue::onResponsePushNotify	./responsequeue.cxx	/^void ResponseQueue::onResponsePushNotify(evutil_socket_t fd,$/;"	f	class:ResponseQueue	signature:(evutil_socket_t fd, short events, void* userData)
ResponseQueue::push	./responsequeue.cxx	/^bool ResponseQueue::push(ProcessQueueItem* item)$/;"	f	class:ResponseQueue	signature:(ProcessQueueItem* item)
ResponseQueue::recvResponsePushNotify	./responsequeue.cxx	/^bool ResponseQueue::recvResponsePushNotify()$/;"	f	class:ResponseQueue	signature:()
ResponseQueue::uninit	./responsequeue.cxx	/^void ResponseQueue::uninit()$/;"	f	class:ResponseQueue	signature:()
ResponseQueue::uninitFdPair	./responsequeue.cxx	/^void ResponseQueue::uninitFdPair()$/;"	f	class:ResponseQueue	signature:()
ResponseQueue::~ResponseQueue	./responsequeue.cxx	/^ResponseQueue::~ResponseQueue()$/;"	f	class:ResponseQueue	signature:()
Session	./session.cxx	/^Session::Session(evutil_socket_t fd,$/;"	f	class:Session	signature:(evutil_socket_t fd, const char* ip)
Session	./session.hxx	/^            Session(evutil_socket_t fd, const char* ip);$/;"	p	class:Lightning::Session	access:public	signature:(evutil_socket_t fd, const char* ip)
Session	./session.hxx	/^    class Session$/;"	c	namespace:Lightning	inherits:boost::enable_shared_from_this
Session::Session	./session.cxx	/^Session::Session(evutil_socket_t fd,$/;"	f	class:Session	signature:(evutil_socket_t fd, const char* ip)
Session::init	./session.cxx	/^bool Session::init(event_base* eb,$/;"	f	class:Session	signature:(event_base* eb, UserRequestPtrType userRequest)
Session::onBufferEventRead	./session.cxx	/^void Session::onBufferEventRead(bufferevent* bev, void* ctx)$/;"	f	class:Session	signature:(bufferevent* bev, void* ctx)
Session::onBufferEventWrite	./session.cxx	/^void Session::onBufferEventWrite(bufferevent* bev, void* ctx)$/;"	f	class:Session	signature:(bufferevent* bev, void* ctx)
Session::onBuffereventEvent	./session.cxx	/^void Session::onBuffereventEvent(bufferevent* bev, short what, void* ctx)$/;"	f	class:Session	signature:(bufferevent* bev, short what, void* ctx)
Session::onRecvRequestFinished	./session.cxx	/^void Session::onRecvRequestFinished(DataHandler*, UserRequestPtrType request)$/;"	f	class:Session	signature:(DataHandler*, UserRequestPtrType request)
Session::startAction	./session.cxx	/^void Session::startAction(short what)$/;"	f	class:Session	signature:(short what)
Session::toString	./session.cxx	/^std::ostream& Session::toString(std::ostream& os) const$/;"	f	class:Session	signature:(std::ostream& os) const
Session::~Session	./session.cxx	/^Session::~Session()$/;"	f	class:Session	signature:()
SessionContainerType	./sessionmanager.hxx	/^            typedef std::set<SessionPtrType> SessionContainerType;$/;"	t	class:Lightning::SessionManager	access:public
SessionHandler	./sessionHandler.hxx	/^    class SessionHandler$/;"	c	namespace:Lightning
SessionHandlerPtrType	./LightningServer.hxx	/^            typedef boost::shared_ptr<SessionHandler> SessionHandlerPtrType;$/;"	t	class:Lightning::LightningServer	access:public
SessionHandlerPtrType	./LightningServerProcessor.hxx	/^            typedef boost::weak_ptr<SessionHandler> SessionHandlerPtrType;$/;"	t	class:Lightning::LightningServerProcessor	access:public
SessionInfo	./sessioninfo.cxx	/^SessionInfo::SessionInfo(evutil_socket_t fd,$/;"	f	class:SessionInfo	signature:(evutil_socket_t fd, const char* ip)
SessionInfo	./sessioninfo.hxx	/^        SessionInfo(evutil_socket_t fd,$/;"	p	struct:Lightning::SessionInfo	access:public	signature:(evutil_socket_t fd, const char* ip)
SessionInfo	./sessioninfo.hxx	/^    struct SessionInfo$/;"	s	namespace:Lightning
SessionInfo::SessionInfo	./sessioninfo.cxx	/^SessionInfo::SessionInfo(evutil_socket_t fd,$/;"	f	class:SessionInfo	signature:(evutil_socket_t fd, const char* ip)
SessionManager	./sessionmanager.cxx	/^SessionManager::SessionManager()$/;"	f	class:SessionManager	signature:()
SessionManager	./sessionmanager.hxx	/^            SessionManager();$/;"	p	class:Lightning::SessionManager	access:public	signature:()
SessionManager	./sessionmanager.hxx	/^    class SessionManager$/;"	c	namespace:Lightning
SessionManager::SessionManager	./sessionmanager.cxx	/^SessionManager::SessionManager()$/;"	f	class:SessionManager	signature:()
SessionManager::addSession	./sessionmanager.cxx	/^bool SessionManager::addSession(SessionPtrType session)$/;"	f	class:SessionManager	signature:(SessionPtrType session)
SessionManager::removedSession	./sessionmanager.cxx	/^void SessionManager::removedSession(SessionPtrType session)$/;"	f	class:SessionManager	signature:(SessionPtrType session)
SessionManager::~SessionManager	./sessionmanager.cxx	/^SessionManager::~SessionManager()$/;"	f	class:SessionManager	signature:()
SessionPtrType	./sessionmanager.hxx	/^            typedef boost::shared_ptr<Session> SessionPtrType;$/;"	t	class:Lightning::SessionManager	access:public
SessionRequestEvent	./requestprocessor.hxx	/^            boost::function<void (RequestProcessor&, const ProcessQueueItemPtrType&)> SessionRequestEvent;$/;"	m	class:Lightning::RequestProcessor	access:public
SockEventCallbackUtil	./SockEventCallbackUtil.hxx	/^    class SockEventCallbackUtil$/;"	c	namespace:Lightning
SockEventCallbackUtil::onAccepted	./SockEventCallbackUtil.cxx	/^void SockEventCallbackUtil::onAccepted(evutil_socket_t fd,$/;"	f	class:SockEventCallbackUtil	signature:(evutil_socket_t fd, short events, void* userData)
SockEventCallbackUtil::onSignalHandler	./SockEventCallbackUtil.cxx	/^void SockEventCallbackUtil::onSignalHandler(evutil_socket_t, short what, void* arg)$/;"	f	class:SockEventCallbackUtil	signature:(evutil_socket_t, short what, void* arg)
StartRequestTask	./request.cxx	/^StartRequestTask::StartRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	f	class:StartRequestTask	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session)
StartRequestTask	./request.hxx	/^            StartRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	p	class:Lightning::StartRequestTask	access:public	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session)
StartRequestTask	./request.hxx	/^    class StartRequestTask$/;"	c	namespace:Lightning	inherits:ProcessQueueItem
StartRequestTask::StartRequestTask	./request.cxx	/^StartRequestTask::StartRequestTask(ProcessQueueItem::ProcessRequestType type,$/;"	f	class:StartRequestTask	signature:(ProcessQueueItem::ProcessRequestType type, boost::shared_ptr<Session> session)
UserRequest	./userrequest.hxx	/^    class UserRequest$/;"	c	namespace:Lightning
UserRequestFactory	./userrequest.hxx	/^    class UserRequestFactory$/;"	c	namespace:Lightning
UserRequestFactoryPtrType	./LightningServer.hxx	/^            typedef boost::shared_ptr<UserRequestFactory> UserRequestFactoryPtrType;$/;"	t	class:Lightning::LightningServer	access:public
UserRequestFactoryPtrType	./userrequest.hxx	/^    typedef boost::shared_ptr<UserRequestFactory> UserRequestFactoryPtrType;$/;"	t	namespace:Lightning
UserRequestPtrType	./session.hxx	/^            typedef boost::shared_ptr<UserRequest> UserRequestPtrType;$/;"	t	class:Lightning::Session	access:private
UserRequestPtrType	./userrequest.hxx	/^    typedef boost::shared_ptr<UserRequest> UserRequestPtrType;$/;"	t	namespace:Lightning
UserRequestWithHeader	./userrequest.hxx	/^    class UserRequestWithHeader$/;"	c	namespace:Lightning	inherits:UserRequest
UserRequestWithHeaderFactory	./userrequest.hxx	/^    class UserRequestWithHeaderFactory$/;"	c	namespace:Lightning	inherits:UserRequestFactory
UserRequestWithHeaderPtrType	./userrequest.hxx	/^    typedef boost::shared_ptr<UserRequestWithHeader> UserRequestWithHeaderPtrType;$/;"	t	namespace:Lightning
UserResponse	./userresponse.hxx	/^    class UserResponse$/;"	c	namespace:Lightning
UserResponseFactory	./userresponse.hxx	/^    class UserResponseFactory$/;"	c	namespace:Lightning	inherits:boost::noncopyable
UserResponseFactoryPtrType	./LightningServer.hxx	/^            typedef boost::shared_ptr<UserResponseFactory> UserResponseFactoryPtrType;$/;"	t	class:Lightning::LightningServer	access:public
UserResponseFactoryPtrType	./userresponse.hxx	/^    typedef boost::shared_ptr<UserResponseFactory> UserResponseFactoryPtrType;$/;"	t	namespace:Lightning
UserResponsePtrType	./userresponse.hxx	/^    typedef boost::shared_ptr<UserResponse> UserResponsePtrType;$/;"	t	namespace:Lightning
addRequest	./requestprocessor.cxx	/^void RequestProcessor::addRequest(ProcessQueueItem* request)$/;"	f	class:RequestProcessor	signature:(ProcessQueueItem* request)
addRequest	./requestprocessor.hxx	/^            void addRequest(ProcessQueueItem* request);$/;"	p	class:Lightning::RequestProcessor	access:public	signature:(ProcessQueueItem* request)
addResponse	./responseprocessor.cxx	/^void ResponseProcessor::addResponse(ProcessQueueItem* response)$/;"	f	class:ResponseProcessor	signature:(ProcessQueueItem* response)
addResponse	./responseprocessor.hxx	/^            void addResponse(ProcessQueueItem* response); $/;"	p	class:Lightning::ResponseProcessor	access:public	signature:(ProcessQueueItem* response)
addSession	./LightningServerProcessor.cxx	/^void LightningServerProcessor::addSession(evutil_socket_t fd,$/;"	f	class:LightningServerProcessor	signature:(evutil_socket_t fd, sockaddr_in& addr)
addSession	./LightningServerProcessor.hxx	/^            void addSession(evutil_socket_t fd, sockaddr_in& addr);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(evutil_socket_t fd, sockaddr_in& addr)
addSession	./sessionmanager.cxx	/^bool SessionManager::addSession(SessionPtrType session)$/;"	f	class:SessionManager	signature:(SessionPtrType session)
addSession	./sessionmanager.hxx	/^            bool addSession(SessionPtrType session);$/;"	p	class:Lightning::SessionManager	access:public	signature:(SessionPtrType session)
addTask	./requestprocessor.cxx	/^void RequestProcessor::addTask(ProcessQueueItemPtrType requestTask)$/;"	f	class:RequestProcessor	signature:(ProcessQueueItemPtrType requestTask)
addTask	./requestprocessor.hxx	/^            void addTask(ProcessQueueItemPtrType requestTask);$/;"	p	class:Lightning::RequestProcessor	access:private	signature:(ProcessQueueItemPtrType requestTask)
boost	./requestprocessor.hxx	/^namespace boost$/;"	n
create	./datahandlerfactory.cxx	/^boost::shared_ptr<DataHandler> DataHandlerFactory::create(DataHandlerType type,$/;"	f	class:DataHandlerFactory	signature:(DataHandlerType type, boost::shared_ptr<UserRequest> request)
create	./datahandlerfactory.hxx	/^            static boost::shared_ptr<DataHandler> create(DataHandlerType type,$/;"	p	class:Lightning::DataHandlerFactory	access:public	signature:(DataHandlerType type, boost::shared_ptr<UserRequest>)
create	./userrequest.hxx	/^            virtual UserRequestPtrType create() = 0;$/;"	p	class:Lightning::UserRequestFactory	access:public	signature:()
create	./userrequest.hxx	/^            virtual UserRequestPtrType create() = 0;$/;"	p	class:Lightning::UserRequestWithHeaderFactory	access:public	signature:()
create	./userresponse.hxx	/^            virtual UserResponsePtrType create() = 0;$/;"	p	class:Lightning::UserResponseFactory	access:public	signature:()
getBodySize	./userrequest.hxx	/^            virtual size_t getBodySize() const = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:() const
getHeaderSize	./userrequest.hxx	/^            virtual size_t getHeaderSize() const = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:() const
getInfo	./session.hxx	/^            const SessionInfo& getInfo() const { return *mSessionInfo; }$/;"	f	class:Lightning::Session	access:public	signature:() const
getRequest	./request.hxx	/^            boost::shared_ptr<UserRequest> getRequest() const$/;"	f	class:Lightning::ReceivedRequestTask	access:public	signature:() const
getSession	./request.hxx	/^            boost::shared_ptr<Session> getSession() const$/;"	f	class:Lightning::StartRequestTask	access:public	signature:() const
getType	./baserequest.hxx	/^            ProcessRequestType getType() const { return mType; }$/;"	f	class:Lightning::ProcessQueueItem	access:public	signature:() const
handleRequestEvent	./LightningServerProcessor.cxx	/^void LightningServerProcessor::handleRequestEvent(RequestProcessor& requestProcessor,$/;"	f	class:LightningServerProcessor	signature:(RequestProcessor& requestProcessor, const boost::shared_ptr<ProcessQueueItem>& requestTask)
handleRequestEvent	./LightningServerProcessor.hxx	/^            void handleRequestEvent(RequestProcessor& requestProcessor,$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(RequestProcessor& requestProcessor, const boost::shared_ptr<ProcessQueueItem>& requestTask)
handleResponseEvent	./LightningServerProcessor.cxx	/^void LightningServerProcessor::handleResponseEvent(const boost::shared_ptr<ProcessQueueItem>& requestTask)$/;"	f	class:LightningServerProcessor	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
handleResponseEvent	./LightningServerProcessor.hxx	/^            void handleResponseEvent(const boost::shared_ptr<ProcessQueueItem>& requestTask);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
init	./responsequeue.cxx	/^bool ResponseQueue::init()$/;"	f	class:ResponseQueue	signature:()
init	./responsequeue.hxx	/^            bool init();$/;"	p	class:Lightning::ResponseQueue	access:public	signature:()
init	./session.cxx	/^bool Session::init(event_base* eb,$/;"	f	class:Session	signature:(event_base* eb, UserRequestPtrType userRequest)
init	./session.hxx	/^            bool init(event_base* eb,$/;"	p	class:Lightning::Session	access:public	signature:(event_base* eb, UserRequestPtrType userRequest)
initEvBuffer	./datastreamhandler.cxx	/^void DataStreamHandler::initEvBuffer()$/;"	f	class:DataStreamHandler	signature:()
initEvBuffer	./datastreamhandler.hxx	/^            void initEvBuffer();$/;"	p	class:Lightning::DataStreamHandler	access:private	signature:()
initFdPair	./responsequeue.cxx	/^bool ResponseQueue::initFdPair()$/;"	f	class:ResponseQueue	signature:()
initFdPair	./responsequeue.hxx	/^            bool initFdPair();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
initLog	./LightningServer.cxx	/^void LightningServer::initLog(const char* path)$/;"	f	class:LightningServer	signature:(const char* path)
initLog	./LightningServer.hxx	/^            void initLog(const char* path);$/;"	p	class:Lightning::LightningServer	access:private	signature:(const char* path)
initThreadPool	./requestprocessor.cxx	/^void RequestProcessor::initThreadPool()$/;"	f	class:RequestProcessor	signature:()
initThreadPool	./requestprocessor.hxx	/^            void initThreadPool();$/;"	p	class:Lightning::RequestProcessor	access:private	signature:()
isEmpty	./processqueue.hxx	/^            bool isEmpty() { return mProcessItems.empty(); }$/;"	f	class:Lightning::ProcessQueue	access:public	signature:()
isRunning	./LightningServerProcessor.hxx	/^            bool isRunning() const { return mRunning; }$/;"	f	class:Lightning::LightningServerProcessor	access:public	signature:() const
mBodySize	./datastreamhandler.hxx	/^            size_t mBodySize;$/;"	m	class:Lightning::DataStreamHandler	access:private
mBufferEvent	./session.hxx	/^            boost::shared_ptr<bufferevent> mBufferEvent;$/;"	m	class:Lightning::Session	access:private
mCache	./datastreamhandler.hxx	/^            boost::shared_ptr<evbuffer> mCache;$/;"	m	class:Lightning::DataStreamHandler	access:private
mClientFd	./sessioninfo.hxx	/^        evutil_socket_t mClientFd;$/;"	m	struct:Lightning::SessionInfo	access:public
mClientIp	./sessioninfo.hxx	/^        std::string mClientIp;$/;"	m	struct:Lightning::SessionInfo	access:public
mCondition	./requestprocessor.hxx	/^            boost::condition mCondition;$/;"	m	class:Lightning::RequestProcessor	access:private
mDataStreamHandler	./session.hxx	/^            boost::shared_ptr<DataHandler> mDataStreamHandler;$/;"	m	class:Lightning::Session	access:private
mEventBase	./LightningServer.hxx	/^            boost::shared_ptr<event_base> mEventBase;$/;"	m	class:Lightning::LightningServer	access:private
mEventBase	./LightningServerProcessor.hxx	/^            EventBaseWeakPtrType mEventBase;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mEventBase	./responseprocessor.hxx	/^            EventBaseWeakPtrType mEventBase;$/;"	m	class:Lightning::ResponseProcessor	access:private
mEventBase	./responsequeue.hxx	/^            EventBaseWeakPtrType mEventBase;$/;"	m	class:Lightning::ResponseQueue	access:private
mFdPair	./responsequeue.hxx	/^            int mFdPair[2];$/;"	m	class:Lightning::ResponseQueue	access:private
mHeaderSize	./datastreamhandler.hxx	/^            size_t mHeaderSize;$/;"	m	class:Lightning::DataStreamHandler	access:private
mLSProcessor	./LightningServer.hxx	/^            boost::scoped_ptr<LightningServerProcessor> mLSProcessor;$/;"	m	class:Lightning::LightningServer	access:private
mMutex	./requestprocessor.hxx	/^            boost::mutex mMutex;$/;"	m	class:Lightning::RequestProcessor	access:private
mProcessItems	./processqueue.hxx	/^            ProcessItemQueueType mProcessItems;$/;"	m	class:Lightning::ProcessQueue	access:protected
mProcessQueue	./requestprocessor.hxx	/^            boost::shared_ptr<ProcessQueue> mProcessQueue;$/;"	m	class:Lightning::RequestProcessor	access:private
mProcessQueue	./responseprocessor.hxx	/^            boost::shared_ptr<ResponseQueue> mProcessQueue;$/;"	m	class:Lightning::ResponseProcessor	access:private
mRequest	./request.hxx	/^            boost::shared_ptr<UserRequest> mRequest;$/;"	m	class:Lightning::ReceivedRequestTask	access:private
mRequestFactory	./LightningServer.hxx	/^            UserRequestFactoryPtrType mRequestFactory;$/;"	m	class:Lightning::LightningServer	access:private
mRequestFactory	./LightningServerProcessor.hxx	/^            boost::weak_ptr<UserRequestFactory> mRequestFactory;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mRequestProcessor	./LightningServerProcessor.hxx	/^            boost::scoped_ptr<RequestProcessor> mRequestProcessor;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mResponseFactory	./LightningServer.hxx	/^            UserResponseFactoryPtrType mResponseFactory;$/;"	m	class:Lightning::LightningServer	access:private
mResponseFactory	./LightningServerProcessor.hxx	/^            boost::weak_ptr<UserResponseFactory> mResponseFactory;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mResponseProcessor	./LightningServerProcessor.hxx	/^            boost::shared_ptr<ResponseProcessor> mResponseProcessor;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mRunning	./LightningServerProcessor.hxx	/^            bool mRunning;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mSession	./request.hxx	/^            boost::weak_ptr<Session> mSession;$/;"	m	class:Lightning::ReceivedRequestTask	access:private
mSession	./request.hxx	/^            boost::weak_ptr<Session> mSession;$/;"	m	class:Lightning::StartRequestTask	access:private
mSessionContainer	./sessionmanager.hxx	/^            SessionContainerType mSessionContainer;$/;"	m	class:Lightning::SessionManager	access:private
mSessionHandler	./LightningServer.hxx	/^            SessionHandlerPtrType mSessionHandler;$/;"	m	class:Lightning::LightningServer	access:private
mSessionHandler	./LightningServerProcessor.hxx	/^            SessionHandlerPtrType mSessionHandler;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mSessionInfo	./session.hxx	/^            boost::shared_ptr<SessionInfo> mSessionInfo;$/;"	m	class:Lightning::Session	access:private
mSessionManager	./LightningServerProcessor.hxx	/^            boost::shared_ptr<SessionManager> mSessionManager;$/;"	m	class:Lightning::LightningServerProcessor	access:private
mShutdown	./requestprocessor.hxx	/^            bool mShutdown;$/;"	m	class:Lightning::RequestProcessor	access:private
mStep	./datastreamhandler.hxx	/^            ParseStep mStep;$/;"	m	class:Lightning::DataStreamHandler	access:private
mStop	./responseprocessor.hxx	/^            bool mStop;$/;"	m	class:Lightning::ResponseProcessor	access:private
mTaskExcutor	./requestprocessor.hxx	/^            boost::shared_ptr<boost::threadpool::pool> mTaskExcutor;$/;"	m	class:Lightning::RequestProcessor	access:private
mThread	./requestprocessor.hxx	/^            boost::scoped_ptr<boost::thread> mThread;$/;"	m	class:Lightning::RequestProcessor	access:private
mType	./baserequest.hxx	/^            ProcessRequestType mType;$/;"	m	class:Lightning::ProcessQueueItem	access:protected
mUserRequest	./datastreamhandler.hxx	/^            boost::shared_ptr<UserRequestWithHeader> mUserRequest;$/;"	m	class:Lightning::DataStreamHandler	access:private
mUserRequest	./session.hxx	/^            UserRequestPtrType mUserRequest;$/;"	m	class:Lightning::Session	access:private
mWorkThreadSize	./requestprocessor.hxx	/^            size_t mWorkThreadSize;$/;"	m	class:Lightning::RequestProcessor	access:private
notifyResponsePush	./responsequeue.cxx	/^bool ResponseQueue::notifyResponsePush()$/;"	f	class:ResponseQueue	signature:()
notifyResponsePush	./responsequeue.hxx	/^            bool notifyResponsePush();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
onAccepted	./SockEventCallbackUtil.cxx	/^void SockEventCallbackUtil::onAccepted(evutil_socket_t fd,$/;"	f	class:SockEventCallbackUtil	signature:(evutil_socket_t fd, short events, void* userData)
onAccepted	./SockEventCallbackUtil.hxx	/^            static void onAccepted(evutil_socket_t, short, void *);$/;"	p	class:Lightning::SockEventCallbackUtil	access:public	signature:(evutil_socket_t, short, void *)
onBufferEventRead	./session.cxx	/^void Session::onBufferEventRead(bufferevent* bev, void* ctx)$/;"	f	class:Session	signature:(bufferevent* bev, void* ctx)
onBufferEventRead	./session.hxx	/^            static void onBufferEventRead(bufferevent* bev, void* ctx);$/;"	p	class:Lightning::Session	access:private	signature:(bufferevent* bev, void* ctx)
onBufferEventWrite	./session.cxx	/^void Session::onBufferEventWrite(bufferevent* bev, void* ctx)$/;"	f	class:Session	signature:(bufferevent* bev, void* ctx)
onBufferEventWrite	./session.hxx	/^            static void onBufferEventWrite(bufferevent* bev, void* ctx);$/;"	p	class:Lightning::Session	access:private	signature:(bufferevent* bev, void* ctx)
onBuffereventEvent	./session.cxx	/^void Session::onBuffereventEvent(bufferevent* bev, short what, void* ctx)$/;"	f	class:Session	signature:(bufferevent* bev, short what, void* ctx)
onBuffereventEvent	./session.hxx	/^            static void onBuffereventEvent(bufferevent* bev, short what, void* ctx);$/;"	p	class:Lightning::Session	access:private	signature:(bufferevent* bev, short what, void* ctx)
onRecvRequestFinished	./LightningServerProcessor.cxx	/^void LightningServerProcessor::onRecvRequestFinished(boost::shared_ptr<Session> session,$/;"	f	class:LightningServerProcessor	signature:(boost::shared_ptr<Session> session, boost::shared_ptr<UserRequest> request)
onRecvRequestFinished	./LightningServerProcessor.hxx	/^            void onRecvRequestFinished(boost::shared_ptr<Session>, boost::shared_ptr<UserRequest> request);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(boost::shared_ptr<Session>, boost::shared_ptr<UserRequest> request)
onRecvRequestFinished	./session.cxx	/^void Session::onRecvRequestFinished(DataHandler*, UserRequestPtrType request)$/;"	f	class:Session	signature:(DataHandler*, UserRequestPtrType request)
onRecvRequestFinished	./session.hxx	/^            void onRecvRequestFinished(DataHandler*, UserRequestPtrType);$/;"	p	class:Lightning::Session	access:private	signature:(DataHandler*, UserRequestPtrType)
onRequest	./sessionHandler.hxx	/^            virtual void onRequest(const boost::shared_ptr<UserRequest>& request) = 0;$/;"	p	class:Lightning::SessionHandler	access:public	signature:(const boost::shared_ptr<UserRequest>& request)
onResponsePushNotify	./responseprocessor.cxx	/^void ResponseProcessor::onResponsePushNotify(ResponseQueue*)$/;"	f	class:ResponseProcessor	signature:(ResponseQueue*)
onResponsePushNotify	./responseprocessor.hxx	/^            void onResponsePushNotify(ResponseQueue*);$/;"	p	class:Lightning::ResponseProcessor	access:private	signature:(ResponseQueue*)
onResponsePushNotify	./responsequeue.cxx	/^void ResponseQueue::onResponsePushNotify(evutil_socket_t fd,$/;"	f	class:ResponseQueue	signature:(evutil_socket_t fd, short events, void* userData)
onResponsePushNotify	./responsequeue.hxx	/^            static void onResponsePushNotify(evutil_socket_t fd,$/;"	p	class:Lightning::ResponseQueue	access:private	signature:(evutil_socket_t fd, short events, void* userData)
onSignalHandler	./SockEventCallbackUtil.cxx	/^void SockEventCallbackUtil::onSignalHandler(evutil_socket_t, short what, void* arg)$/;"	f	class:SockEventCallbackUtil	signature:(evutil_socket_t, short what, void* arg)
onSignalHandler	./SockEventCallbackUtil.hxx	/^            static void onSignalHandler(evutil_socket_t, short, void *);$/;"	p	class:Lightning::SockEventCallbackUtil	access:public	signature:(evutil_socket_t, short, void *)
onStart	./sessionHandler.hxx	/^            virtual void onStart(const SessionInfo& sessionInfo) = 0;$/;"	p	class:Lightning::SessionHandler	access:public	signature:(const SessionInfo& sessionInfo)
operator ()	./LightningServer.cxx	/^    void operator()(event_base* eb)$/;"	f	struct:FreeEventBase	access:public	signature:(event_base* eb)
operator ()	./datastreamhandler.cxx	/^    void operator()(evbuffer* buffer)$/;"	f	struct:FreeEvBuffer	access:public	signature:(evbuffer* buffer)
operator ()	./session.cxx	/^    void operator()(bufferevent* be)$/;"	f	struct:FreeBufferEvent	access:public	signature:(bufferevent* be)
operator <<	./session.cxx	/^std::ostream& Lightning::operator << (std::ostream& os, const Session& session)$/;"	f	class:Lightning	signature:(std::ostream& os, const Session& session)
operator <<	./session.hxx	/^    std::ostream& operator << (std::ostream& os, const Session& session);$/;"	p	namespace:Lightning	signature:(std::ostream& os, const Session& session)
pop	./processqueue.cxx	/^ProcessQueueItemPtrType ProcessQueue::pop()$/;"	f	class:ProcessQueue	signature:()
pop	./processqueue.hxx	/^            ProcessQueueItemPtrType pop();$/;"	p	class:Lightning::ProcessQueue	access:public	signature:()
process	./LightningServer.cxx	/^void LightningServer::process()$/;"	f	class:LightningServer	signature:()
process	./LightningServer.hxx	/^            void process();$/;"	p	class:Lightning::LightningServer	access:private	signature:()
process	./responseprocessor.cxx	/^void ResponseProcessor::process()$/;"	f	class:ResponseProcessor	signature:()
process	./responseprocessor.hxx	/^            void process();$/;"	p	class:Lightning::ResponseProcessor	access:private	signature:()
processAccepted	./LightningServerProcessor.cxx	/^void LightningServerProcessor::processAccepted(evutil_socket_t fd)$/;"	f	class:LightningServerProcessor	signature:(evutil_socket_t fd)
processAccepted	./LightningServerProcessor.hxx	/^            void processAccepted(evutil_socket_t fd);$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:(evutil_socket_t fd)
processRequestTask	./LightningServerProcessor.cxx	/^void LightningServerProcessor::processRequestTask(const boost::shared_ptr<ProcessQueueItem>& requestTask)$/;"	f	class:LightningServerProcessor	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
processRequestTask	./LightningServerProcessor.hxx	/^            void processRequestTask(const boost::shared_ptr<ProcessQueueItem>& requestTask);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
processStartTask	./LightningServerProcessor.cxx	/^void LightningServerProcessor::processStartTask(const boost::shared_ptr<ProcessQueueItem>& requestTask)$/;"	f	class:LightningServerProcessor	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
processStartTask	./LightningServerProcessor.hxx	/^            void processStartTask(const boost::shared_ptr<ProcessQueueItem>& requestTask);$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:(const boost::shared_ptr<ProcessQueueItem>& requestTask)
processTask	./requestprocessor.cxx	/^void RequestProcessor::processTask(ProcessQueueItemPtrType requestTask)$/;"	f	class:RequestProcessor	signature:(ProcessQueueItemPtrType requestTask)
processTask	./requestprocessor.hxx	/^            void processTask(ProcessQueueItemPtrType requestTask);$/;"	p	class:Lightning::RequestProcessor	access:private	signature:(ProcessQueueItemPtrType requestTask)
push	./processqueue.cxx	/^bool ProcessQueue::push(ProcessQueueItem* item)$/;"	f	class:ProcessQueue	signature:(ProcessQueueItem* item)
push	./processqueue.hxx	/^            bool push(ProcessQueueItem* item);$/;"	p	class:Lightning::ProcessQueue	access:public	signature:(ProcessQueueItem* item)
push	./responsequeue.cxx	/^bool ResponseQueue::push(ProcessQueueItem* item)$/;"	f	class:ResponseQueue	signature:(ProcessQueueItem* item)
push	./responsequeue.hxx	/^            bool push(ProcessQueueItem* item);$/;"	p	class:Lightning::ResponseQueue	access:public	signature:(ProcessQueueItem* item)
pushData	./datahandler.hxx	/^            virtual void pushData(evbuffer* buffer) = 0;$/;"	p	class:Lightning::DataHandler	access:public	signature:(evbuffer* buffer)
pushData	./datastreamhandler.cxx	/^void DataStreamHandler::pushData(evbuffer* buffer)$/;"	f	class:DataStreamHandler	signature:(evbuffer* buffer)
pushData	./datastreamhandler.hxx	/^            virtual void pushData(evbuffer* buffer);$/;"	p	class:Lightning::DataStreamHandler	access:public	signature:(evbuffer* buffer)
recvBody	./datastreamhandler.cxx	/^bool DataStreamHandler::recvBody()$/;"	f	class:DataStreamHandler	signature:()
recvBody	./datastreamhandler.hxx	/^            bool recvBody();$/;"	p	class:Lightning::DataStreamHandler	access:private	signature:()
recvHeader	./datastreamhandler.cxx	/^bool DataStreamHandler::recvHeader()$/;"	f	class:DataStreamHandler	signature:()
recvHeader	./datastreamhandler.hxx	/^            bool recvHeader();$/;"	p	class:Lightning::DataStreamHandler	access:private	signature:()
recvResponsePushNotify	./responsequeue.cxx	/^bool ResponseQueue::recvResponsePushNotify()$/;"	f	class:ResponseQueue	signature:()
recvResponsePushNotify	./responsequeue.hxx	/^            bool recvResponsePushNotify();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
regSessionHandler	./LightningServer.cxx	/^bool LightningServer::regSessionHandler(SessionHandlerPtrType sessionHandler)$/;"	f	class:LightningServer	signature:(SessionHandlerPtrType sessionHandler)
regSessionHandler	./LightningServer.hxx	/^            bool regSessionHandler(SessionHandlerPtrType sessionHandler);$/;"	p	class:Lightning::LightningServer	access:public	signature:(SessionHandlerPtrType sessionHandler)
removedSession	./sessionmanager.cxx	/^void SessionManager::removedSession(SessionPtrType session)$/;"	f	class:SessionManager	signature:(SessionPtrType session)
removedSession	./sessionmanager.hxx	/^            void removedSession(SessionPtrType session);$/;"	p	class:Lightning::SessionManager	access:public	signature:(SessionPtrType session)
run	./requestprocessor.cxx	/^void RequestProcessor::run()$/;"	f	class:RequestProcessor	signature:()
run	./requestprocessor.hxx	/^            void run();$/;"	p	class:Lightning::RequestProcessor	access:private	signature:()
setBody	./userrequest.hxx	/^            virtual bool setBody(const char* body, size_t length) = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:(const char* body, size_t length)
setHeader	./userrequest.hxx	/^            virtual bool setHeader(const char* header, size_t length) = 0;$/;"	p	class:Lightning::UserRequestWithHeader	access:public	signature:(const char* header, size_t length)
setSockBlock	./IoUtil.cxx	/^bool IoUtil::setSockBlock(int fd, bool blocking)$/;"	f	class:IoUtil	signature:(int fd, bool blocking)
setSockBlock	./IoUtil.hxx	/^            static bool setSockBlock(int fd, bool blocking);$/;"	p	class:Lightning::IoUtil	access:public	signature:(int fd, bool blocking)
setSockOptByIntValue	./IoUtil.cxx	/^bool IoUtil::setSockOptByIntValue(int fd,$/;"	f	class:IoUtil	signature:(int fd, int level, int optName, bool use)
setSockOptByIntValue	./IoUtil.hxx	/^            static bool setSockOptByIntValue(int fd,$/;"	p	class:Lightning::IoUtil	access:public	signature:(int fd, int level, int optName, bool use)
setupEventBase	./LightningServer.cxx	/^bool LightningServer::setupEventBase()$/;"	f	class:LightningServer	signature:()
setupEventBase	./LightningServer.hxx	/^            bool setupEventBase();$/;"	p	class:Lightning::LightningServer	access:private	signature:()
setupSignalHandler	./LightningServer.cxx	/^void LightningServer::setupSignalHandler()$/;"	f	class:LightningServer	signature:()
setupSignalHandler	./LightningServer.hxx	/^            void setupSignalHandler();$/;"	p	class:Lightning::LightningServer	access:private	signature:()
start	./LightningServer.cxx	/^void LightningServer::start(const char* ip, int port)$/;"	f	class:LightningServer	signature:(const char* ip, int port)
start	./LightningServer.hxx	/^            void start(const char* ip, int port);$/;"	p	class:Lightning::LightningServer	access:public	signature:(const char* ip, int port)
start	./LightningServerProcessor.cxx	/^void LightningServerProcessor::start()$/;"	f	class:LightningServerProcessor	signature:()
start	./LightningServerProcessor.hxx	/^            void start();$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:()
start	./requestprocessor.cxx	/^void RequestProcessor::start()$/;"	f	class:RequestProcessor	signature:()
start	./requestprocessor.hxx	/^            void start();$/;"	p	class:Lightning::RequestProcessor	access:public	signature:()
start	./responseprocessor.cxx	/^void ResponseProcessor::start()$/;"	f	class:ResponseProcessor	signature:()
start	./responseprocessor.hxx	/^            void start();$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:()
startAction	./session.cxx	/^void Session::startAction(short what)$/;"	f	class:Session	signature:(short what)
startAction	./session.hxx	/^            void startAction(short what);$/;"	p	class:Lightning::Session	access:public	signature:(short what)
startListen	./LightningServer.cxx	/^bool LightningServer::startListen(const char* ip, int port)$/;"	f	class:LightningServer	signature:(const char* ip, int port)
startListen	./LightningServer.hxx	/^            bool startListen(const char* ip, int port);$/;"	p	class:Lightning::LightningServer	access:private	signature:(const char* ip, int port)
startRequestProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::startRequestProcessor()$/;"	f	class:LightningServerProcessor	signature:()
startRequestProcessor	./LightningServerProcessor.hxx	/^            void startRequestProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
startResponseProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::startResponseProcessor()$/;"	f	class:LightningServerProcessor	signature:()
startResponseProcessor	./LightningServerProcessor.hxx	/^            void startResponseProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
stop	./LightningServer.cxx	/^void LightningServer::stop()$/;"	f	class:LightningServer	signature:()
stop	./LightningServer.hxx	/^            void stop();$/;"	p	class:Lightning::LightningServer	access:public	signature:()
stop	./LightningServerProcessor.cxx	/^void LightningServerProcessor::stop()$/;"	f	class:LightningServerProcessor	signature:()
stop	./LightningServerProcessor.hxx	/^            void stop();$/;"	p	class:Lightning::LightningServerProcessor	access:public	signature:()
stop	./requestprocessor.cxx	/^void RequestProcessor::stop()$/;"	f	class:RequestProcessor	signature:()
stop	./requestprocessor.hxx	/^            void stop();$/;"	p	class:Lightning::RequestProcessor	access:public	signature:()
stop	./responseprocessor.cxx	/^void ResponseProcessor::stop()$/;"	f	class:ResponseProcessor	signature:()
stop	./responseprocessor.hxx	/^            void stop();$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:()
stopRequestProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::stopRequestProcessor()$/;"	f	class:LightningServerProcessor	signature:()
stopRequestProcessor	./LightningServerProcessor.hxx	/^            void stopRequestProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
stopResponseProcessor	./LightningServerProcessor.cxx	/^void LightningServerProcessor::stopResponseProcessor()$/;"	f	class:LightningServerProcessor	signature:()
stopResponseProcessor	./LightningServerProcessor.hxx	/^            void stopResponseProcessor();$/;"	p	class:Lightning::LightningServerProcessor	access:private	signature:()
tcpListen	./IoUtil.cxx	/^bool IoUtil::tcpListen(const char* ip,$/;"	f	class:IoUtil	signature:(const char* ip, int port, bool blocking, int& fd)
tcpListen	./IoUtil.hxx	/^            static bool tcpListen(const char* ip,$/;"	p	class:Lightning::IoUtil	access:public	signature:(const char* ip, int port, bool blocking, int& fd)
toString	./session.cxx	/^std::ostream& Session::toString(std::ostream& os) const$/;"	f	class:Session	signature:(std::ostream& os) const
toString	./session.hxx	/^            std::ostream& toString(std::ostream& os) const;$/;"	p	class:Lightning::Session	access:public	signature:(std::ostream& os) const
toString	./userrequest.hxx	/^            virtual std::string toString() = 0;$/;"	p	class:Lightning::UserRequest	access:public	signature:()
uninit	./responsequeue.cxx	/^void ResponseQueue::uninit()$/;"	f	class:ResponseQueue	signature:()
uninit	./responsequeue.hxx	/^            void uninit();$/;"	p	class:Lightning::ResponseQueue	access:public	signature:()
uninit	./session.hxx	/^            void uninit();$/;"	p	class:Lightning::Session	access:public	signature:()
uninitFdPair	./responsequeue.cxx	/^void ResponseQueue::uninitFdPair()$/;"	f	class:ResponseQueue	signature:()
uninitFdPair	./responsequeue.hxx	/^            void uninitFdPair();$/;"	p	class:Lightning::ResponseQueue	access:private	signature:()
write	./userresponse.hxx	/^            virtual void write(boost::shared_array<char>& data) = 0;$/;"	p	class:Lightning::UserResponse	access:public	signature:(boost::shared_array<char>& data)
~DataHandler	./datahandler.hxx	/^            virtual ~DataHandler() {}$/;"	f	class:Lightning::DataHandler	access:public	signature:()
~LightningServer	./LightningServer.cxx	/^LightningServer::~LightningServer()$/;"	f	class:LightningServer	signature:()
~LightningServer	./LightningServer.hxx	/^            ~LightningServer();$/;"	p	class:Lightning::LightningServer	access:public	signature:()
~Message	./message.hxx	/^            virtual ~Message() {}$/;"	f	class:Lightning::Message	access:public	signature:()
~ProcessQueue	./processqueue.cxx	/^ProcessQueue::~ProcessQueue()$/;"	f	class:ProcessQueue	signature:()
~ProcessQueue	./processqueue.hxx	/^            ~ProcessQueue();$/;"	p	class:Lightning::ProcessQueue	access:public	signature:()
~ProcessQueueItem	./baserequest.hxx	/^            virtual ~ProcessQueueItem() {}$/;"	f	class:Lightning::ProcessQueueItem	access:public	signature:()
~RequestProcessor	./requestprocessor.cxx	/^RequestProcessor::~RequestProcessor()$/;"	f	class:RequestProcessor	signature:()
~RequestProcessor	./requestprocessor.hxx	/^            ~RequestProcessor();$/;"	p	class:Lightning::RequestProcessor	access:public	signature:()
~ResponseProcessor	./responseprocessor.cxx	/^ResponseProcessor::~ResponseProcessor()$/;"	f	class:ResponseProcessor	signature:()
~ResponseProcessor	./responseprocessor.hxx	/^            ~ResponseProcessor();$/;"	p	class:Lightning::ResponseProcessor	access:public	signature:()
~ResponseQueue	./responsequeue.cxx	/^ResponseQueue::~ResponseQueue()$/;"	f	class:ResponseQueue	signature:()
~ResponseQueue	./responsequeue.hxx	/^            ~ResponseQueue();$/;"	p	class:Lightning::ResponseQueue	access:public	signature:()
~Session	./session.cxx	/^Session::~Session()$/;"	f	class:Session	signature:()
~Session	./session.hxx	/^            ~Session();$/;"	p	class:Lightning::Session	access:public	signature:()
~SessionHandler	./sessionHandler.hxx	/^            virtual ~SessionHandler() {}$/;"	f	class:Lightning::SessionHandler	access:public	signature:()
~SessionManager	./sessionmanager.cxx	/^SessionManager::~SessionManager()$/;"	f	class:SessionManager	signature:()
~SessionManager	./sessionmanager.hxx	/^            ~SessionManager();$/;"	p	class:Lightning::SessionManager	access:public	signature:()
~UserRequest	./userrequest.hxx	/^            virtual ~UserRequest() {}$/;"	f	class:Lightning::UserRequest	access:public	signature:()
~UserRequestFactory	./userrequest.hxx	/^            virtual ~UserRequestFactory() {}$/;"	f	class:Lightning::UserRequestFactory	access:public	signature:()
~UserRequestWithHeader	./userrequest.hxx	/^            virtual ~UserRequestWithHeader() {}$/;"	f	class:Lightning::UserRequestWithHeader	access:public	signature:()
~UserRequestWithHeaderFactory	./userrequest.hxx	/^            virtual ~UserRequestWithHeaderFactory() {}$/;"	f	class:Lightning::UserRequestWithHeaderFactory	access:public	signature:()
~UserResponse	./userresponse.hxx	/^            virtual ~UserResponse() {}$/;"	f	class:Lightning::UserResponse	access:public	signature:()
~UserResponseFactory	./userresponse.hxx	/^            virtual ~UserResponseFactory() {}$/;"	f	class:Lightning::UserResponseFactory	access:public	signature:()
