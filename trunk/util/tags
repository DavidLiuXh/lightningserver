!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-directory	./threadpool/Makefile	/^	make --directory=.\/libs\/threadpool\/doc --print-directory clean$/;"	m
-directory	./threadpool/Makefile	/^	make --directory=.\/libs\/threadpool\/doc --print-directory doc$/;"	m
ARCHITECTURE_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	181;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	184;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	187;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	172;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
ARCHITECTURE_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	185;"	d	file:
BOOST_ATOMIC_ARM_ASM_END	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	296;"	d
BOOST_ATOMIC_ARM_ASM_END	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	70;"	d
BOOST_ATOMIC_ARM_ASM_START	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	295;"	d
BOOST_ATOMIC_ARM_ASM_START	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	69;"	d
BOOST_ATOMIC_ARM_DMB	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	128;"	d
BOOST_ATOMIC_ARM_DMB	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	81;"	d
BOOST_ATOMIC_HAVE_CAS32	./lockfree/boost/atomic/detail/generic-cas.hpp	28;"	d
BOOST_ATOMIC_HAVE_CAS64	./lockfree/boost/atomic/detail/generic-cas.hpp	36;"	d
BOOST_ATOMIC_HPP	./lockfree/boost/atomic.hpp	2;"	d
BOOST_ATOMIC_KERNEL_CMPXCHG	./lockfree/boost/atomic/detail/linux-arm.hpp	131;"	d
BOOST_ATOMIC_KERNEL_CMPXCHG	./lockfree/boost/atomic/detail/linux-arm.hpp	71;"	d
BOOST_ATOMIC_KERNEL_DMB	./lockfree/boost/atomic/detail/linux-arm.hpp	35;"	d
BOOST_ATOMIC_KERNEL_DMB	./lockfree/boost/atomic/detail/linux-arm.hpp	64;"	d
BOOST_DETAIL_ATOMIC_BASE_HPP	./lockfree/boost/atomic/detail/base.hpp	2;"	d
BOOST_DETAIL_ATOMIC_BUILDER_HPP	./lockfree/boost/atomic/detail/builder.hpp	2;"	d
BOOST_DETAIL_ATOMIC_FALLBACK_HPP	./lockfree/boost/atomic/detail/fallback.hpp	2;"	d
BOOST_DETAIL_ATOMIC_GCC_ALPHA_HPP	./lockfree/boost/atomic/detail/gcc-alpha.hpp	2;"	d
BOOST_DETAIL_ATOMIC_GCC_ARMV6P_HPP	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	2;"	d
BOOST_DETAIL_ATOMIC_GCC_PPC_HPP	./lockfree/boost/atomic/detail/gcc-ppc.hpp	2;"	d
BOOST_DETAIL_ATOMIC_GCC_X86_HPP	./lockfree/boost/atomic/detail/gcc-x86.hpp	2;"	d
BOOST_DETAIL_ATOMIC_GENERIC_CAS_HPP	./lockfree/boost/atomic/detail/generic-cas.hpp	2;"	d
BOOST_DETAIL_ATOMIC_INTEGRAL_CASTS_HPP	./lockfree/boost/atomic/detail/integral-casts.hpp	2;"	d
BOOST_DETAIL_ATOMIC_INTERLOCKED_HPP	./lockfree/boost/atomic/detail/interlocked.hpp	2;"	d
BOOST_DETAIL_ATOMIC_LINUX_ARM_HPP	./lockfree/boost/atomic/detail/linux-arm.hpp	2;"	d
BOOST_DETAIL_ATOMIC_VALID_INTEGRAL_TYPES_HPP	./lockfree/boost/atomic/detail/valid_integral_types.hpp	2;"	d
BOOST_LOCKFREE_BRANCH_HINTS_HPP_INCLUDED	./lockfree/boost/lockfree/detail/branch_hints.hpp	11;"	d
BOOST_LOCKFREE_CACHELINE_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	24;"	d
BOOST_LOCKFREE_CACHELINE_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	37;"	d
BOOST_LOCKFREE_CACHELINE_BYTES	./lockfree/boost/lockfree/detail/prefix.hpp	20;"	d
BOOST_LOCKFREE_DCAS_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	27;"	d
BOOST_LOCKFREE_DCAS_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	30;"	d
BOOST_LOCKFREE_DCAS_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	40;"	d
BOOST_LOCKFREE_DCAS_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	43;"	d
BOOST_LOCKFREE_DCAS_ALIGNMENT	./lockfree/boost/lockfree/detail/prefix.hpp	46;"	d
BOOST_LOCKFREE_DETAIL_ATOMIC_HPP	./lockfree/boost/lockfree/detail/atomic.hpp	2;"	d
BOOST_LOCKFREE_FIFO_HPP_INCLUDED	./lockfree/boost/lockfree/fifo.hpp	16;"	d
BOOST_LOCKFREE_FREELIST_HPP_INCLUDED	./lockfree/boost/lockfree/detail/freelist.hpp	12;"	d
BOOST_LOCKFREE_PREFIX_HPP_INCLUDED	./lockfree/boost/lockfree/detail/prefix.hpp	10;"	d
BOOST_LOCKFREE_PTR_COMPRESSION	./lockfree/boost/lockfree/detail/prefix.hpp	29;"	d
BOOST_LOCKFREE_PTR_COMPRESSION	./lockfree/boost/lockfree/detail/prefix.hpp	42;"	d
BOOST_LOCKFREE_RINGBUFFER_HPP_INCLUDED	./lockfree/boost/lockfree/ringbuffer.hpp	15;"	d
BOOST_LOCKFREE_STACK_HPP_INCLUDED	./lockfree/boost/lockfree/stack.hpp	10;"	d
BOOST_LOCKFREE_TAGGED_PTR_DCAS_HPP_INCLUDED	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	12;"	d
BOOST_LOCKFREE_TAGGED_PTR_HPP_INCLUDED	./lockfree/boost/lockfree/detail/tagged_ptr.hpp	12;"	d
BOOST_LOCKFREE_TAGGED_PTR_PTRCOMPRESSION_HPP_INCLUDED	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	12;"	d
BOOST_MEMORY_ORDER_HPP_INCLUDED	./lockfree/boost/memory_order.hpp	2;"	d
BOOST_NO_0X_HDR_ATOMIC	./lockfree/boost/lockfree/detail/atomic.hpp	6;"	d
BOOST_NO_0X_HDR_ATOMIC	./lockfree/boost/lockfree/detail/atomic.hpp	9;"	d
BOOST_STATIC_ASSERT	./lockfree/boost/lockfree/fifo.hpp	/^    BOOST_STATIC_ASSERT(boost::has_trivial_assign<T>::value);$/;"	p	class:boost::lockfree::fifo	access:private	signature:(boost::has_trivial_assign<T>::value)
BOOST_STATIC_ASSERT	./lockfree/boost/lockfree/fifo.hpp	/^    BOOST_STATIC_ASSERT(boost::is_pod<T>::value);$/;"	p	class:boost::lockfree::detail::fifo	access:private	signature:(boost::is_pod<T>::value)
BOOST_STATIC_ASSERT	./lockfree/boost/lockfree/stack.hpp	/^    BOOST_STATIC_ASSERT(boost::has_trivial_assign<T>::value);$/;"	p	class:boost::lockfree::stack	access:private	signature:(boost::has_trivial_assign<T>::value)
BOOST_STATIC_ASSERT	./threadpool/boost/threadpool/detail/future.hpp	/^  BOOST_STATIC_ASSERT(function_traits<function_type()>::arity == 0);$/;"	p	class:boost::threadpool::detail::future_impl_task_func	access:public	signature:(function_traits<function_type()>::arity == 0)
BOOST_STATIC_ASSERT	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    BOOST_STATIC_ASSERT(function_traits<task_type()>::arity == 0);$/;"	p	class:boost::threadpool::detail::pool_core	access:public	signature:(function_traits<task_type()>::arity == 0)
BOOST_STATIC_ASSERT	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    BOOST_STATIC_ASSERT(is_void<typename result_of<task_type()>::type >::value);$/;"	p	class:boost::threadpool::detail::pool_core	access:public	signature:(is_void<typename result_of<task_type()>::type >::value)
CMAKE_BINARY_DIR	./Makefile	/^CMAKE_BINARY_DIR = \/home\/lw\/mycode\/lightningserver\/util$/;"	m
CMAKE_COMMAND	./Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	./Makefile	/^CMAKE_SOURCE_DIR = \/home\/lw\/mycode\/lightningserver$/;"	m
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	54;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	68;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	56;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	59;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	9;"	d	file:
CTest	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^  CTest()$/;"	f	class:CTest	access:public	signature:()
CTest	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^class CTest$/;"	c	file:
CTest::CTest	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^  CTest()$/;"	f	class:CTest	access:public	signature:()
CTest::m_pool	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^  pool m_pool;$/;"	m	class:CTest	file:	access:private
DEBUG	./logger.hxx	13;"	d
DEFAULT_LOG_FILE_NAME	./logger.cxx	/^const char* DEFAULT_LOG_FILE_NAME = "__lutil_logger__.log";$/;"	v
DOXYGEN	./threadpool/libs/threadpool/doc/Makefile	/^DOXYGEN=doxygen$/;"	m
ERROR	./logger.hxx	15;"	d
ID_VOID_MAIN	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
INFO	./logger.hxx	12;"	d
LL_ALL	./logger.hxx	/^                LL_ALL = 0,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LL_DEBUG	./logger.hxx	/^                LL_DEBUG = 10000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LL_ERROR	./logger.hxx	/^                LL_ERROR = 40000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LL_INFO	./logger.hxx	/^                LL_INFO = 20000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LL_WARNING	./logger.hxx	/^                LL_WARNING = 30000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LOGGER_NAME	./logger.cxx	/^const char* LOGGER_NAME = "__lutil_logger__";$/;"	v
LOG_LEVEL	./logger.hxx	/^            enum LOG_LEVEL$/;"	g	class:LUtil::Logger	access:public
LUTIL_STRUTIL_HXX	./strutil.hxx	2;"	d
LUtil	./logger.hxx	/^namespace LUtil $/;"	n
LUtil	./strutil.hxx	/^namespace LUtil$/;"	n
LUtil::Logger	./logger.hxx	/^    class Logger$/;"	c	namespace:LUtil	inherits:boost::noncopyable
LUtil::Logger::LL_ALL	./logger.hxx	/^                LL_ALL = 0,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LUtil::Logger::LL_DEBUG	./logger.hxx	/^                LL_DEBUG = 10000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LUtil::Logger::LL_ERROR	./logger.hxx	/^                LL_ERROR = 40000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LUtil::Logger::LL_INFO	./logger.hxx	/^                LL_INFO = 20000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LUtil::Logger::LL_WARNING	./logger.hxx	/^                LL_WARNING = 30000,$/;"	e	enum:LUtil::Logger::LOG_LEVEL
LUtil::Logger::LOG_LEVEL	./logger.hxx	/^            enum LOG_LEVEL$/;"	g	class:LUtil::Logger	access:public
LUtil::Logger::init	./logger.hxx	/^            static void init(LOG_LEVEL level,$/;"	p	class:LUtil::Logger	access:public	signature:(LOG_LEVEL level, const char* fileName)
LUtil::Logger::instance	./logger.hxx	/^            static log4cplus::Logger& instance()$/;"	f	class:LUtil::Logger	access:public	signature:()
LUtil::Logger::sLogger	./logger.hxx	/^            static log4cplus::Logger sLogger;$/;"	m	class:LUtil::Logger	access:private
LUtil::StrUtil	./strutil.hxx	/^    class StrUtil$/;"	c	namespace:LUtil
LUtil::StrUtil::getSafeStr	./strutil.hxx	/^            static const char* getSafeStr(const char*);$/;"	p	class:LUtil::StrUtil	access:public	signature:(const char*)
LUtil::StrUtil::notEmptyOrNull	./strutil.hxx	/^            static bool notEmptyOrNull(const char*);$/;"	p	class:LUtil::StrUtil	access:public	signature:(const char*)
LUtil::StrUtil::sEmpty	./strutil.hxx	/^            static std::string sEmpty;$/;"	m	class:LUtil::StrUtil	access:public
Logger	./logger.hxx	/^    class Logger$/;"	c	namespace:LUtil	inherits:boost::noncopyable
Logger::init	./logger.cxx	/^void Logger::init(LOG_LEVEL level,$/;"	f	class:Logger	signature:(LOG_LEVEL level, const char* fileName)
Logger::sLogger	./logger.cxx	/^log4cplus::Logger Logger::sLogger = log4cplus::Logger::getInstance(LOGGER_NAME);$/;"	m	class:Logger	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	92;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	95;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	98;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	83;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	86;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	89;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
PLATFORM_ID	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
RELEASE_MANAGER	./threadpool/Makefile	/^export RELEASE_MANAGER=philipphenkel$/;"	m
RELEASE_VERSION	./threadpool/Makefile	/^export RELEASE_VERSION=0_2_5$/;"	m
RM	./Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RRRTC_LOGGER_HXX	./logger.hxx	2;"	d
SHELL	./Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	./Makefile	/^SUFFIXES =$/;"	m
StrUtil	./strutil.hxx	/^    class StrUtil$/;"	c	namespace:LUtil
StrUtil::getSafeStr	./strutil.cxx	/^const char* StrUtil::getSafeStr(const char* data)$/;"	f	class:StrUtil	signature:(const char* data)
StrUtil::notEmptyOrNull	./strutil.cxx	/^bool StrUtil::notEmptyOrNull(const char* data) $/;"	f	class:StrUtil	signature:(const char* data)
THREADPOOL_DETAIL_FUTURE_IMPL_HPP_INCLUDED	./threadpool/boost/threadpool/detail/future.hpp	18;"	d
THREADPOOL_DETAIL_LOCKING_PTR_HPP_INCLUDED	./threadpool/boost/threadpool/detail/locking_ptr.hpp	22;"	d
THREADPOOL_DETAIL_SCOPE_GUARD_HPP_INCLUDED	./threadpool/boost/threadpool/detail/scope_guard.hpp	18;"	d
THREADPOOL_DETAIL_WORKER_THREAD_HPP_INCLUDED	./threadpool/boost/threadpool/detail/worker_thread.hpp	18;"	d
THREADPOOL_FUTURE_HPP_INCLUDED	./threadpool/boost/threadpool/future.hpp	17;"	d
THREADPOOL_HPP_INCLUDED	./threadpool/boost/threadpool.hpp	18;"	d
THREADPOOL_POOL_ADAPTORS_HPP_INCLUDED	./threadpool/boost/threadpool/pool_adaptors.hpp	19;"	d
THREADPOOL_POOL_CORE_HPP_INCLUDED	./threadpool/boost/threadpool/detail/pool_core.hpp	23;"	d
THREADPOOL_POOL_HPP_INCLUDED	./threadpool/boost/threadpool/pool.hpp	23;"	d
THREADPOOL_SCHEDULING_POLICIES_HPP_INCLUDED	./threadpool/boost/threadpool/scheduling_policies.hpp	23;"	d
THREADPOOL_SHUTDOWN_POLICIES_HPP_INCLUDED	./threadpool/boost/threadpool/shutdown_policies.hpp	20;"	d
THREADPOOL_SIZE_POLICIES_HPP_INCLUDED	./threadpool/boost/threadpool/size_policies.hpp	19;"	d
THREADPOOL_TASK_ADAPTERS_HPP_INCLUDED	./threadpool/boost/threadpool/task_adaptors.hpp	18;"	d
TRACE	./logger.hxx	11;"	d
VERBOSE	./Makefile	/^VERBOSE = 1$/;"	m
WARNING	./logger.hxx	14;"	d
__BOOST_AMD_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	15;"	d
__BOOST_AMD_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	539;"	d
active	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_t active() const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
active	./threadpool/boost/threadpool/pool.hpp	/^    size_t active() const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
allocate	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * allocate (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
allocate_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * allocate_unsafe (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
array_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    boost::array<T, max_size> array_;$/;"	m	class:boost::lockfree::ringbuffer	access:private
array_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    scoped_array<T> array_;$/;"	m	class:boost::lockfree::ringbuffer	access:private
atomic	./lockfree/boost/atomic.hpp	/^	atomic() {}$/;"	f	class:boost::atomic	access:public	signature:()
atomic	./lockfree/boost/atomic.hpp	/^	atomic(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(T * p) : super((intptr_t)p) {}$/;"	f	class:boost::atomic	access:public	signature:(T * p)
atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(T v) : super(v) {}$/;"	f	class:boost::atomic	access:public	signature:(T v)
atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(bool v) : super(v) {}$/;"	f	class:boost::atomic	access:public	signature:(bool v)
atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(void * p) : super(p) {}$/;"	f	class:boost::atomic	access:public	signature:(void * p)
atomic	./lockfree/boost/atomic.hpp	/^class atomic : public detail::atomic::internal_atomic<T> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
atomic	./lockfree/boost/atomic.hpp	/^class atomic<T *> : private detail::atomic::internal_atomic<intptr_t> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
atomic	./lockfree/boost/atomic.hpp	/^class atomic<bool> : private detail::atomic::internal_atomic<bool> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
atomic	./lockfree/boost/atomic.hpp	/^class atomic<void *> : private detail::atomic::internal_atomic<void *, sizeof(void *), int> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
atomic	./lockfree/boost/atomic/detail/base.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/builder.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/generic-cas.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/interlocked.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/linux-arm.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
atomic_address	./lockfree/boost/atomic.hpp	/^typedef atomic<void*> atomic_address;$/;"	t	namespace:boost
atomic_alpha_32	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	atomic_alpha_32() {}$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:()
atomic_alpha_32	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	explicit atomic_alpha_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(T v)
atomic_alpha_32	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_32 {$/;"	c	namespace:boost::detail::atomic
atomic_alpha_64	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	atomic_alpha_64() {}$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:()
atomic_alpha_64	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	explicit atomic_alpha_64(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(T v)
atomic_alpha_64	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_64 {$/;"	c	namespace:boost::detail::atomic
atomic_arm_4	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	atomic_arm_4() {}$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:()
atomic_arm_4	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	explicit atomic_arm_4(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(T v)
atomic_arm_4	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class atomic_arm_4 {$/;"	c	namespace:boost::detail::atomic
atomic_bool	./lockfree/boost/atomic.hpp	/^typedef atomic<bool> atomic_bool;$/;"	t	namespace:boost
atomic_char	./lockfree/boost/atomic.hpp	/^typedef atomic<char> atomic_char;$/;"	t	namespace:boost
atomic_flag	./lockfree/boost/atomic.hpp	/^	atomic_flag() {}$/;"	f	class:boost::atomic_flag	access:public	signature:()
atomic_flag	./lockfree/boost/atomic.hpp	/^	atomic_flag(bool initial_state) : super(initial_state?1:0) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(bool initial_state)
atomic_flag	./lockfree/boost/atomic.hpp	/^class atomic_flag : private atomic<int> {$/;"	c	namespace:boost	inherits:atomic
atomic_generic_cas32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	atomic_generic_cas32() {}$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:()
atomic_generic_cas32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	explicit atomic_generic_cas32(T v) : i((int32_t)v) {}$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(T v)
atomic_generic_cas32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class atomic_generic_cas32 {$/;"	c	namespace:boost::detail::atomic
atomic_int	./lockfree/boost/atomic.hpp	/^typedef atomic<int> atomic_int;$/;"	t	namespace:boost
atomic_int16_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int16_t> atomic_int16_t;$/;"	t	namespace:boost
atomic_int32_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int32_t> atomic_int32_t;$/;"	t	namespace:boost
atomic_int64_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int64_t> atomic_int64_t;$/;"	t	namespace:boost
atomic_int8_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int8_t> atomic_int8_t;$/;"	t	namespace:boost
atomic_interlocked_32	./lockfree/boost/atomic/detail/interlocked.hpp	/^	atomic_interlocked_32() {}$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:()
atomic_interlocked_32	./lockfree/boost/atomic/detail/interlocked.hpp	/^	explicit atomic_interlocked_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T v)
atomic_interlocked_32	./lockfree/boost/atomic/detail/interlocked.hpp	/^class atomic_interlocked_32 {$/;"	c	namespace:boost::detail::atomic
atomic_linux_arm_4	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	atomic_linux_arm_4() {}$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:()
atomic_linux_arm_4	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	explicit atomic_linux_arm_4(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(T v)
atomic_linux_arm_4	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class atomic_linux_arm_4 {$/;"	c	namespace:boost::detail::atomic
atomic_llong	./lockfree/boost/atomic.hpp	/^typedef atomic<long long> atomic_llong;$/;"	t	namespace:boost
atomic_long	./lockfree/boost/atomic.hpp	/^typedef atomic<long> atomic_long;$/;"	t	namespace:boost
atomic_ppc_32	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	atomic_ppc_32() {}$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:()
atomic_ppc_32	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	explicit atomic_ppc_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(T v)
atomic_ppc_32	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class atomic_ppc_32 {$/;"	c	namespace:boost::detail::atomic
atomic_ppc_64	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	atomic_ppc_64() {}$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:()
atomic_ppc_64	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	explicit atomic_ppc_64(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(T v)
atomic_ppc_64	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class atomic_ppc_64 {$/;"	c	namespace:boost::detail::atomic
atomic_schar	./lockfree/boost/atomic.hpp	/^typedef atomic<signed char> atomic_schar;$/;"	t	namespace:boost
atomic_short	./lockfree/boost/atomic.hpp	/^typedef atomic<short> atomic_short;$/;"	t	namespace:boost
atomic_thread_fence	./lockfree/boost/atomic.hpp	/^static inline void atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
atomic_uchar	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned char> atomic_uchar;$/;"	t	namespace:boost
atomic_uint	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned int> atomic_uint;$/;"	t	namespace:boost
atomic_uint16_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint16_t> atomic_uint16_t;$/;"	t	namespace:boost
atomic_uint32_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint32_t> atomic_uint32_t;$/;"	t	namespace:boost
atomic_uint64_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint64_t> atomic_uint64_t;$/;"	t	namespace:boost
atomic_uint8_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint8_t> atomic_uint8_t;$/;"	t	namespace:boost
atomic_ullong	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned long long> atomic_ullong;$/;"	t	namespace:boost
atomic_ulong	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned long> atomic_ulong;$/;"	t	namespace:boost
atomic_ushort	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned short> atomic_ushort;$/;"	t	namespace:boost
atomic_x86_128	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    atomic_x86_128() {}$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:()
atomic_x86_128	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    explicit atomic_x86_128(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T v)
atomic_x86_128	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_128 {$/;"	c	namespace:boost::detail::atomic
atomic_x86_16	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_16() {}$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:()
atomic_x86_16	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_16(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T v)
atomic_x86_16	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_16 {$/;"	c	namespace:boost::detail::atomic
atomic_x86_32	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_32() {}$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:()
atomic_x86_32	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T v)
atomic_x86_32	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_32 {$/;"	c	namespace:boost::detail::atomic
atomic_x86_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_64() {}$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:()
atomic_x86_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_64(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T v)
atomic_x86_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_64 {$/;"	c	namespace:boost::detail::atomic
atomic_x86_8	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_8() {}$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:()
atomic_x86_8	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_8(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T v)
atomic_x86_8	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_8 {$/;"	c	namespace:boost::detail::atomic
boost	./lockfree/boost/atomic.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/base.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/builder.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/fallback.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	namespace boost { namespace detail { namespace atomic {$/;"	n
boost	./lockfree/boost/atomic/detail/generic-cas.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n
boost	./lockfree/boost/atomic/detail/integral-casts.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n
boost	./lockfree/boost/atomic/detail/interlocked.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/linux-arm.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/lockfree/detail/atomic.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^namespace boost$/;"	n
boost	./lockfree/boost/lockfree/detail/freelist.hpp	/^namespace boost$/;"	n
boost	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/lockfree/fifo.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/lockfree/ringbuffer.hpp	/^namespace boost$/;"	n
boost	./lockfree/boost/lockfree/stack.hpp	/^namespace boost {$/;"	n
boost	./lockfree/boost/memory_order.hpp	/^namespace boost$/;"	n
boost	./threadpool/boost/threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	./threadpool/boost/threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	./threadpool/boost/threadpool/future.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	./threadpool/boost/threadpool/pool.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	./threadpool/boost/threadpool/pool_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	./threadpool/boost/threadpool/scheduling_policies.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	./threadpool/boost/threadpool/shutdown_policies.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	./threadpool/boost/threadpool/size_policies.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	./threadpool/boost/threadpool/task_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n
boost::atomic	./lockfree/boost/atomic.hpp	/^class atomic : public detail::atomic::internal_atomic<T> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
boost::atomic	./lockfree/boost/atomic.hpp	/^class atomic<T *> : private detail::atomic::internal_atomic<intptr_t> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
boost::atomic	./lockfree/boost/atomic.hpp	/^class atomic<bool> : private detail::atomic::internal_atomic<bool> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
boost::atomic	./lockfree/boost/atomic.hpp	/^class atomic<void *> : private detail::atomic::internal_atomic<void *, sizeof(void *), int> {$/;"	c	namespace:boost	inherits:detail::atomic::internal_atomic
boost::atomic::atomic	./lockfree/boost/atomic.hpp	/^	atomic() {}$/;"	f	class:boost::atomic	access:public	signature:()
boost::atomic::atomic	./lockfree/boost/atomic.hpp	/^	atomic(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
boost::atomic::atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(T * p) : super((intptr_t)p) {}$/;"	f	class:boost::atomic	access:public	signature:(T * p)
boost::atomic::atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(T v) : super(v) {}$/;"	f	class:boost::atomic	access:public	signature:(T v)
boost::atomic::atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(bool v) : super(v) {}$/;"	f	class:boost::atomic	access:public	signature:(bool v)
boost::atomic::atomic	./lockfree/boost/atomic.hpp	/^	explicit atomic(void * p) : super(p) {}$/;"	f	class:boost::atomic	access:public	signature:(void * p)
boost::atomic::compare_exchange_strong	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T * desired, memory_order order=memory_order_seq_cst) volatile
boost::atomic::compare_exchange_strong	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T *desired, memory_order success_order, memory_order failure_order) volatile
boost::atomic::compare_exchange_weak	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T *desired, memory_order order=memory_order_seq_cst) volatile
boost::atomic::compare_exchange_weak	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T *desired, memory_order success_order, memory_order failure_order) volatile
boost::atomic::exchange	./lockfree/boost/atomic.hpp	/^	T *exchange(T * replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(T * replacement, memory_order order=memory_order_seq_cst) volatile
boost::atomic::fetch_add	./lockfree/boost/atomic.hpp	/^	T * fetch_add(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile
boost::atomic::fetch_sub	./lockfree/boost/atomic.hpp	/^	T * fetch_sub(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile
boost::atomic::load	./lockfree/boost/atomic.hpp	/^	T *load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomic	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::atomic::operator ++	./lockfree/boost/atomic.hpp	/^	T *operator++(int) volatile {return fetch_add(1);}$/;"	f	class:boost::atomic	access:public	signature:(int) volatile
boost::atomic::operator ++	./lockfree/boost/atomic.hpp	/^	T *operator++(void) volatile {return fetch_add(1)+1;}$/;"	f	class:boost::atomic	access:public	signature:(void) volatile
boost::atomic::operator --	./lockfree/boost/atomic.hpp	/^	T *operator--(int) volatile {return fetch_sub(1);}$/;"	f	class:boost::atomic	access:public	signature:(int) volatile
boost::atomic::operator --	./lockfree/boost/atomic.hpp	/^	T *operator--(void) volatile {return fetch_sub(1)-1;}$/;"	f	class:boost::atomic	access:public	signature:(void) volatile
boost::atomic::operator =	./lockfree/boost/atomic.hpp	/^	T * operator=(T * v) volatile {store(v); return v;}$/;"	f	class:boost::atomic	access:public	signature:(T * v) volatile
boost::atomic::operator =	./lockfree/boost/atomic.hpp	/^	T * operator=(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
boost::atomic::operator =	./lockfree/boost/atomic.hpp	/^	bool operator=(bool v) volatile {store(v); return v;}	$/;"	f	class:boost::atomic	access:public	signature:(bool v) volatile
boost::atomic::operator =	./lockfree/boost/atomic.hpp	/^	void * operator=(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
boost::atomic::operator =	./lockfree/boost/atomic.hpp	/^	void * operator=(void * v) volatile {store(v); return v;}$/;"	f	class:boost::atomic	access:public	signature:(void * v) volatile
boost::atomic::operator =	./lockfree/boost/atomic.hpp	/^	void operator=(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
boost::atomic::operator T *	./lockfree/boost/atomic.hpp	/^	operator T *(void) const volatile {return load();}$/;"	f	class:boost::atomic	access:public	signature:(void) const volatile
boost::atomic::operator bool	./lockfree/boost/atomic.hpp	/^	operator bool(void) const volatile {return load();}$/;"	f	class:boost::atomic	access:public	signature:(void) const volatile
boost::atomic::operator void *	./lockfree/boost/atomic.hpp	/^	operator void *(void) const volatile {return load();}$/;"	f	class:boost::atomic	access:public	signature:(void) const volatile
boost::atomic::store	./lockfree/boost/atomic.hpp	/^	void store(T *v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(T *v, memory_order order=memory_order_seq_cst) volatile
boost::atomic::super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<T> super;$/;"	t	class:boost::atomic	access:public
boost::atomic::super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<bool> super;$/;"	t	class:boost::atomic	access:public
boost::atomic::super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<intptr_t> super;$/;"	t	class:boost::atomic	access:public
boost::atomic::super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<void *, sizeof(void *), int> super;$/;"	t	class:boost::atomic	access:public
boost::atomic_address	./lockfree/boost/atomic.hpp	/^typedef atomic<void*> atomic_address;$/;"	t	namespace:boost
boost::atomic_bool	./lockfree/boost/atomic.hpp	/^typedef atomic<bool> atomic_bool;$/;"	t	namespace:boost
boost::atomic_char	./lockfree/boost/atomic.hpp	/^typedef atomic<char> atomic_char;$/;"	t	namespace:boost
boost::atomic_flag	./lockfree/boost/atomic.hpp	/^class atomic_flag : private atomic<int> {$/;"	c	namespace:boost	inherits:atomic
boost::atomic_flag::atomic_flag	./lockfree/boost/atomic.hpp	/^	atomic_flag() {}$/;"	f	class:boost::atomic_flag	access:public	signature:()
boost::atomic_flag::atomic_flag	./lockfree/boost/atomic.hpp	/^	atomic_flag(bool initial_state) : super(initial_state?1:0) {}$/;"	f	class:boost::atomic_flag	access:public	signature:(bool initial_state)
boost::atomic_flag::clear	./lockfree/boost/atomic.hpp	/^	void clear(memory_order order=memory_order_seq_cst)$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order=memory_order_seq_cst)
boost::atomic_flag::super	./lockfree/boost/atomic.hpp	/^	typedef atomic<int> super;$/;"	t	class:boost::atomic_flag	access:public
boost::atomic_flag::test_and_set	./lockfree/boost/atomic.hpp	/^	bool test_and_set(memory_order order=memory_order_seq_cst)$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order=memory_order_seq_cst)
boost::atomic_int	./lockfree/boost/atomic.hpp	/^typedef atomic<int> atomic_int;$/;"	t	namespace:boost
boost::atomic_int16_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int16_t> atomic_int16_t;$/;"	t	namespace:boost
boost::atomic_int32_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int32_t> atomic_int32_t;$/;"	t	namespace:boost
boost::atomic_int64_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int64_t> atomic_int64_t;$/;"	t	namespace:boost
boost::atomic_int8_t	./lockfree/boost/atomic.hpp	/^typedef atomic<int8_t> atomic_int8_t;$/;"	t	namespace:boost
boost::atomic_llong	./lockfree/boost/atomic.hpp	/^typedef atomic<long long> atomic_llong;$/;"	t	namespace:boost
boost::atomic_long	./lockfree/boost/atomic.hpp	/^typedef atomic<long> atomic_long;$/;"	t	namespace:boost
boost::atomic_schar	./lockfree/boost/atomic.hpp	/^typedef atomic<signed char> atomic_schar;$/;"	t	namespace:boost
boost::atomic_short	./lockfree/boost/atomic.hpp	/^typedef atomic<short> atomic_short;$/;"	t	namespace:boost
boost::atomic_thread_fence	./lockfree/boost/atomic.hpp	/^static inline void atomic_thread_fence(memory_order order)$/;"	f	namespace:boost	signature:(memory_order order)
boost::atomic_uchar	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned char> atomic_uchar;$/;"	t	namespace:boost
boost::atomic_uint	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned int> atomic_uint;$/;"	t	namespace:boost
boost::atomic_uint16_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint16_t> atomic_uint16_t;$/;"	t	namespace:boost
boost::atomic_uint32_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint32_t> atomic_uint32_t;$/;"	t	namespace:boost
boost::atomic_uint64_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint64_t> atomic_uint64_t;$/;"	t	namespace:boost
boost::atomic_uint8_t	./lockfree/boost/atomic.hpp	/^typedef atomic<uint8_t> atomic_uint8_t;$/;"	t	namespace:boost
boost::atomic_ullong	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned long long> atomic_ullong;$/;"	t	namespace:boost
boost::atomic_ulong	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned long> atomic_ulong;$/;"	t	namespace:boost
boost::atomic_ushort	./lockfree/boost/atomic.hpp	/^typedef atomic<unsigned short> atomic_ushort;$/;"	t	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/base.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/builder.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/fallback.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/generic-cas.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/integral-casts.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/interlocked.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/linux-arm.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^namespace detail {$/;"	n	namespace:boost
boost::detail::atomic	./lockfree/boost/atomic/detail/base.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/builder.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/generic-cas.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/interlocked.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/linux-arm.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^namespace atomic {$/;"	n	namespace:boost::detail
boost::detail::atomic::atomic_alpha_32	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_32 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_alpha_32::atomic_alpha_32	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	atomic_alpha_32() {}$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:()
boost::detail::atomic::atomic_alpha_32::atomic_alpha_32	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	explicit atomic_alpha_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(T v)
boost::detail::atomic::atomic_alpha_32::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_alpha_32::fetch_add_var	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:protected	signature:(T c, memory_order order) volatile
boost::detail::atomic::atomic_alpha_32::fetch_dec	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_alpha_32::fetch_inc	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_alpha_32::i	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_alpha_32	access:private
boost::detail::atomic::atomic_alpha_32::integral_type	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_alpha_32	access:public
boost::detail::atomic::atomic_alpha_32::is_lock_free	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_alpha_32::load	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_alpha_32::store	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_alpha_64	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class atomic_alpha_64 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_alpha_64::atomic_alpha_64	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	atomic_alpha_64() {}$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:()
boost::detail::atomic::atomic_alpha_64::atomic_alpha_64	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	explicit atomic_alpha_64(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(T v)
boost::detail::atomic::atomic_alpha_64::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_alpha_64::fetch_add_var	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:protected	signature:(T c, memory_order order) volatile
boost::detail::atomic::atomic_alpha_64::fetch_dec	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_alpha_64::fetch_inc	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_alpha_64::i	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_alpha_64	access:private
boost::detail::atomic::atomic_alpha_64::integral_type	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_alpha_64	access:public
boost::detail::atomic::atomic_alpha_64::is_lock_free	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_alpha_64::load	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_alpha_64::store	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_arm_4	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class atomic_arm_4 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_arm_4::atomic_arm_4	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	atomic_arm_4() {}$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:()
boost::detail::atomic::atomic_arm_4::atomic_arm_4	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	explicit atomic_arm_4(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(T v)
boost::detail::atomic::atomic_arm_4::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^        bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_arm_4::fetch_add_var	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:protected	signature:(T c, memory_order order) volatile
boost::detail::atomic::atomic_arm_4::fetch_dec	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_arm_4::fetch_inc	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_arm_4::i	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_arm_4	access:private
boost::detail::atomic::atomic_arm_4::integral_type	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_arm_4	access:public
boost::detail::atomic::atomic_arm_4::is_lock_free	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_arm_4::load	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_arm_4::store	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_generic_cas32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class atomic_generic_cas32 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_generic_cas32::atomic_generic_cas32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	atomic_generic_cas32() {}$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:()
boost::detail::atomic::atomic_generic_cas32::atomic_generic_cas32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	explicit atomic_generic_cas32(T v) : i((int32_t)v) {}$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(T v)
boost::detail::atomic::atomic_generic_cas32::compare_exchange_strong	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_generic_cas32::compare_exchange_weak	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_generic_cas32::exchange	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_generic_cas32::i	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	mutable int32_t i;$/;"	m	class:boost::detail::atomic::atomic_generic_cas32	access:private
boost::detail::atomic::atomic_generic_cas32::integral_type	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_generic_cas32	access:public
boost::detail::atomic::atomic_generic_cas32::is_lock_free	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_generic_cas32::load	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_generic_cas32::store	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_generic_cas32::this_type	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef atomic_generic_cas32 this_type;$/;"	t	class:boost::detail::atomic::atomic_generic_cas32	access:private
boost::detail::atomic::atomic_interlocked_32	./lockfree/boost/atomic/detail/interlocked.hpp	/^class atomic_interlocked_32 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_interlocked_32::atomic_interlocked_32	./lockfree/boost/atomic/detail/interlocked.hpp	/^	atomic_interlocked_32() {}$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:()
boost::detail::atomic::atomic_interlocked_32::atomic_interlocked_32	./lockfree/boost/atomic/detail/interlocked.hpp	/^	explicit atomic_interlocked_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T v)
boost::detail::atomic::atomic_interlocked_32::compare_exchange_strong	./lockfree/boost/atomic/detail/interlocked.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_interlocked_32::compare_exchange_weak	./lockfree/boost/atomic/detail/interlocked.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_interlocked_32::exchange	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_interlocked_32::fetch_add	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_interlocked_32::i	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_interlocked_32	access:private
boost::detail::atomic::atomic_interlocked_32::integral_type	./lockfree/boost/atomic/detail/interlocked.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_interlocked_32	access:public
boost::detail::atomic::atomic_interlocked_32::is_lock_free	./lockfree/boost/atomic/detail/interlocked.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_interlocked_32::load	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_interlocked_32::store	./lockfree/boost/atomic/detail/interlocked.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_linux_arm_4	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class atomic_linux_arm_4 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_linux_arm_4::atomic_linux_arm_4	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	atomic_linux_arm_4() {}$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:()
boost::detail::atomic::atomic_linux_arm_4::atomic_linux_arm_4	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	explicit atomic_linux_arm_4(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(T v)
boost::detail::atomic::atomic_linux_arm_4::compare_exchange_strong	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_linux_arm_4::compare_exchange_weak	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_linux_arm_4::exchange	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	T exchange(T replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(T replacement, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_linux_arm_4::i	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_linux_arm_4	access:private
boost::detail::atomic::atomic_linux_arm_4::integral_type	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_linux_arm_4	access:public
boost::detail::atomic::atomic_linux_arm_4::is_lock_free	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_linux_arm_4::kernel_cmpxchg_t	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef int (kernel_cmpxchg_t)(T oldval, T newval, volatile T *ptr);$/;"	t	class:boost::detail::atomic::atomic_linux_arm_4	access:private
boost::detail::atomic::atomic_linux_arm_4::load	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_linux_arm_4::store	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_ppc_32	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class atomic_ppc_32 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_ppc_32::atomic_ppc_32	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	atomic_ppc_32() {}$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:()
boost::detail::atomic::atomic_ppc_32::atomic_ppc_32	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	explicit atomic_ppc_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(T v)
boost::detail::atomic::atomic_ppc_32::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_ppc_32::fetch_add_var	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:protected	signature:(T c, memory_order order) volatile
boost::detail::atomic::atomic_ppc_32::fetch_dec	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_ppc_32::fetch_inc	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_ppc_32::i	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_ppc_32	access:private
boost::detail::atomic::atomic_ppc_32::integral_type	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_ppc_32	access:public
boost::detail::atomic::atomic_ppc_32::is_lock_free	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_ppc_32::load	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_ppc_32::store	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_ppc_64	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class atomic_ppc_64 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_ppc_64::atomic_ppc_64	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	atomic_ppc_64() {}$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:()
boost::detail::atomic::atomic_ppc_64::atomic_ppc_64	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	explicit atomic_ppc_64(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(T v)
boost::detail::atomic::atomic_ppc_64::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_ppc_64::fetch_add_var	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:protected	signature:(T c, memory_order order) volatile
boost::detail::atomic::atomic_ppc_64::fetch_dec	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_ppc_64::fetch_inc	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:protected	signature:(memory_order order) volatile
boost::detail::atomic::atomic_ppc_64::i	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_ppc_64	access:private
boost::detail::atomic::atomic_ppc_64::integral_type	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_ppc_64	access:public
boost::detail::atomic::atomic_ppc_64::is_lock_free	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_ppc_64::load	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_ppc_64::store	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_128	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_128 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_x86_128::atomic_x86_128	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    atomic_x86_128() {}$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:()
boost::detail::atomic::atomic_x86_128::atomic_x86_128	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    explicit atomic_x86_128(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T v)
boost::detail::atomic::atomic_x86_128::compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_128::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_128::exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_128::fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_128::i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T i;$/;"	m	class:boost::detail::atomic::atomic_x86_128	access:private
boost::detail::atomic::atomic_x86_128::integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_128	access:protected
boost::detail::atomic::atomic_x86_128::is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_x86_128::load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_x86_128::store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_16	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_16 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_x86_16::atomic_x86_16	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_16() {}$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:()
boost::detail::atomic::atomic_x86_16::atomic_x86_16	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_16(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T v)
boost::detail::atomic::atomic_x86_16::compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_16::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_16::exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_16::fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_16::i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_16	access:private
boost::detail::atomic::atomic_x86_16::integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_16	access:protected
boost::detail::atomic::atomic_x86_16::is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_x86_16::load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_x86_16::store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_32	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_32 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_x86_32::atomic_x86_32	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_32() {}$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:()
boost::detail::atomic::atomic_x86_32::atomic_x86_32	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_32(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T v)
boost::detail::atomic::atomic_x86_32::compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_32::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_32::exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_32::fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_32::i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_32	access:private
boost::detail::atomic::atomic_x86_32::integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_32	access:protected
boost::detail::atomic::atomic_x86_32::is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_x86_32::load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_x86_32::store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_64 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_x86_64::atomic_x86_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_64() {}$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:()
boost::detail::atomic::atomic_x86_64::atomic_x86_64	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_64(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T v)
boost::detail::atomic::atomic_x86_64::compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_64::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_64::exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_64::fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_64::i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_64	access:private
boost::detail::atomic::atomic_x86_64::integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_64	access:protected
boost::detail::atomic::atomic_x86_64::is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_x86_64::load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_x86_64::store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_64::this_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef atomic_x86_64 this_type;$/;"	t	class:boost::detail::atomic::atomic_x86_64	access:private
boost::detail::atomic::atomic_x86_8	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class atomic_x86_8 {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::atomic_x86_8::atomic_x86_8	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	atomic_x86_8() {}$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:()
boost::detail::atomic::atomic_x86_8::atomic_x86_8	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit atomic_x86_8(T v) : i(v) {}$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T v)
boost::detail::atomic::atomic_x86_8::compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_8::compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::atomic_x86_8::exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_8::fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::atomic_x86_8::i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_8	access:private
boost::detail::atomic::atomic_x86_8::integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_8	access:protected
boost::detail::atomic::atomic_x86_8::is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(void) const volatile
boost::detail::atomic::atomic_x86_8::load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::atomic_x86_8::store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_arithmeticops	./lockfree/boost/atomic/detail/builder.hpp	/^class build_arithmeticops : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
boost::detail::atomic::build_arithmeticops::build_arithmeticops	./lockfree/boost/atomic/detail/builder.hpp	/^	build_arithmeticops() {}$/;"	f	class:boost::detail::atomic::build_arithmeticops	access:public	signature:()
boost::detail::atomic::build_arithmeticops::build_arithmeticops	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_arithmeticops(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_arithmeticops	access:public	signature:(integral_type i)
boost::detail::atomic::build_arithmeticops::fetch_sub	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_sub($/;"	f	class:boost::detail::atomic::build_arithmeticops	access:public	signature:( integral_type c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_arithmeticops::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_arithmeticops	access:public
boost::detail::atomic::build_atomic_from_add	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_add : public build_logicops< build_arithmeticops<Base> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
boost::detail::atomic::build_atomic_from_add::build_atomic_from_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_add(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_add	access:public	signature:(typename super::integral_type i)
boost::detail::atomic::build_atomic_from_add::build_atomic_from_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_add(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_add	access:public	signature:(void)
boost::detail::atomic::build_atomic_from_add::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_add	access:public
boost::detail::atomic::build_atomic_from_add::super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops<Base> > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_add	access:public
boost::detail::atomic::build_atomic_from_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_exchange : public build_logicops< build_arithmeticops< build_fetch_add<Base> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
boost::detail::atomic::build_atomic_from_exchange::build_atomic_from_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_exchange(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_exchange	access:public	signature:(typename super::integral_type i)
boost::detail::atomic::build_atomic_from_exchange::build_atomic_from_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_exchange(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_exchange	access:public	signature:(void)
boost::detail::atomic::build_atomic_from_exchange::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_exchange	access:public
boost::detail::atomic::build_atomic_from_exchange::super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops< build_fetch_add<Base> > > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_exchange	access:public
boost::detail::atomic::build_atomic_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_larger_type : public build_atomic_from_minimal< build_base_from_larger_type<Base, Type> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_minimal
boost::detail::atomic::build_atomic_from_larger_type::build_atomic_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_larger_type() {}$/;"	f	class:boost::detail::atomic::build_atomic_from_larger_type	access:public	signature:()
boost::detail::atomic::build_atomic_from_larger_type::build_atomic_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_larger_type(integral_type v) : super(v) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_larger_type	access:public	signature:(integral_type v)
boost::detail::atomic::build_atomic_from_larger_type::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef Type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_larger_type	access:public
boost::detail::atomic::build_atomic_from_larger_type::super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_atomic_from_minimal< build_base_from_larger_type<Base, Type> > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_larger_type	access:public
boost::detail::atomic::build_atomic_from_minimal	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_minimal : public build_logicops< build_arithmeticops< build_fetch_add< build_exchange<Base> > > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
boost::detail::atomic::build_atomic_from_minimal::build_atomic_from_minimal	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_minimal(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_minimal	access:public	signature:(typename super::integral_type i)
boost::detail::atomic::build_atomic_from_minimal::build_atomic_from_minimal	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_minimal(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_minimal	access:public	signature:(void)
boost::detail::atomic::build_atomic_from_minimal::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_minimal	access:public
boost::detail::atomic::build_atomic_from_minimal::super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops< build_fetch_add< build_exchange<Base> > > > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_minimal	access:public
boost::detail::atomic::build_atomic_from_typical	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_typical : public build_logicops< build_arithmeticops< build_const_fetch_add<Base> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
boost::detail::atomic::build_atomic_from_typical::build_atomic_from_typical	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_typical(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_typical	access:public	signature:(typename super::integral_type i)
boost::detail::atomic::build_atomic_from_typical::build_atomic_from_typical	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_typical(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_typical	access:public	signature:(void)
boost::detail::atomic::build_atomic_from_typical::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_typical	access:public
boost::detail::atomic::build_atomic_from_typical::super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops< build_const_fetch_add<Base> > > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_typical	access:public
boost::detail::atomic::build_base_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^class build_base_from_larger_type {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::build_base_from_larger_type::build_base_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_base_from_larger_type() {}$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:()
boost::detail::atomic::build_base_from_larger_type::build_base_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_base_from_larger_type(integral_type t) {store(t, memory_order_relaxed);}$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(integral_type t)
boost::detail::atomic::build_base_from_larger_type::compare_exchange_weak	./lockfree/boost/atomic/detail/builder.hpp	/^	bool compare_exchange_weak(integral_type &expected,$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::build_base_from_larger_type::extract	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type extract(larger_integral_type v) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(larger_integral_type v) const volatile
boost::detail::atomic::build_base_from_larger_type::get_base	./lockfree/boost/atomic/detail/builder.hpp	/^	Base &get_base(void) volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) volatile
boost::detail::atomic::build_base_from_larger_type::get_base	./lockfree/boost/atomic/detail/builder.hpp	/^	const Base &get_base(void) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) const volatile
boost::detail::atomic::build_base_from_larger_type::get_offset	./lockfree/boost/atomic/detail/builder.hpp	/^	unsigned int get_offset(void) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) const volatile
boost::detail::atomic::build_base_from_larger_type::get_shift	./lockfree/boost/atomic/detail/builder.hpp	/^	unsigned int get_shift(void) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) const volatile
boost::detail::atomic::build_base_from_larger_type::i	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type i;$/;"	m	class:boost::detail::atomic::build_base_from_larger_type	access:private
boost::detail::atomic::build_base_from_larger_type::insert	./lockfree/boost/atomic/detail/builder.hpp	/^	larger_integral_type insert(larger_integral_type target, integral_type source) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(larger_integral_type target, integral_type source) const volatile
boost::detail::atomic::build_base_from_larger_type::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef Type integral_type;$/;"	t	class:boost::detail::atomic::build_base_from_larger_type	access:public
boost::detail::atomic::build_base_from_larger_type::is_lock_free	./lockfree/boost/atomic/detail/builder.hpp	/^	bool is_lock_free(void)$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(void)
boost::detail::atomic::build_base_from_larger_type::larger_integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type larger_integral_type;$/;"	t	class:boost::detail::atomic::build_base_from_larger_type	access:private
boost::detail::atomic::build_base_from_larger_type::load	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
boost::detail::atomic::build_base_from_larger_type::store	./lockfree/boost/atomic/detail/builder.hpp	/^	void store(integral_type v,$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(integral_type v, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_const_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^class build_const_fetch_add : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
boost::detail::atomic::build_const_fetch_add::build_const_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_const_fetch_add() {}$/;"	f	class:boost::detail::atomic::build_const_fetch_add	access:public	signature:()
boost::detail::atomic::build_const_fetch_add::build_const_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_const_fetch_add(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_const_fetch_add	access:public	signature:(integral_type i)
boost::detail::atomic::build_const_fetch_add::fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_add($/;"	f	class:boost::detail::atomic::build_const_fetch_add	access:public	signature:( integral_type c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_const_fetch_add::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_const_fetch_add	access:public
boost::detail::atomic::build_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^class build_exchange : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
boost::detail::atomic::build_exchange::build_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	build_exchange() {}$/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:()
boost::detail::atomic::build_exchange::build_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_exchange(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:(integral_type i)
boost::detail::atomic::build_exchange::compare_exchange_strong	./lockfree/boost/atomic/detail/builder.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:( integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::build_exchange::exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type exchange(integral_type replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:(integral_type replacement, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_exchange::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_exchange	access:public
boost::detail::atomic::build_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^class build_fetch_add : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
boost::detail::atomic::build_fetch_add::build_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_fetch_add() {}$/;"	f	class:boost::detail::atomic::build_fetch_add	access:public	signature:()
boost::detail::atomic::build_fetch_add::build_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_fetch_add(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_fetch_add	access:public	signature:(integral_type i)
boost::detail::atomic::build_fetch_add::fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_add($/;"	f	class:boost::detail::atomic::build_fetch_add	access:public	signature:( integral_type c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_fetch_add::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_fetch_add	access:public
boost::detail::atomic::build_logicops	./lockfree/boost/atomic/detail/builder.hpp	/^class build_logicops : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
boost::detail::atomic::build_logicops::build_logicops	./lockfree/boost/atomic/detail/builder.hpp	/^	build_logicops() {}$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:()
boost::detail::atomic::build_logicops::build_logicops	./lockfree/boost/atomic/detail/builder.hpp	/^	build_logicops(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type i)
boost::detail::atomic::build_logicops::fetch_and	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_and(integral_type c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_logicops::fetch_or	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_or(integral_type c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_logicops::fetch_xor	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_xor(integral_type c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type c, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::build_logicops::integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_logicops	access:public
boost::detail::atomic::calculate_failure_order	./lockfree/boost/atomic/detail/base.hpp	/^static inline memory_order calculate_failure_order(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fallback_atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^class fallback_atomic {$/;"	c	namespace:boost::detail::atomic
boost::detail::atomic::fallback_atomic::compare_exchange_strong	./lockfree/boost/atomic/detail/fallback.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:( T &expected, T desired, memory_order , memory_order ) volatile
boost::detail::atomic::fallback_atomic::compare_exchange_weak	./lockfree/boost/atomic/detail/fallback.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::fallback_atomic::exchange	./lockfree/boost/atomic/detail/fallback.hpp	/^	T exchange(T replacement, memory_order \/*order*\/=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(T replacement, memory_order =memory_order_seq_cst) volatile
boost::detail::atomic::fallback_atomic::fallback_atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^	explicit fallback_atomic(const T &t) {memcpy(&i, &t, sizeof(T));}$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(const T &t)
boost::detail::atomic::fallback_atomic::fallback_atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^	fallback_atomic(void) {}$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(void)
boost::detail::atomic::fallback_atomic::i	./lockfree/boost/atomic/detail/fallback.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::fallback_atomic	access:protected
boost::detail::atomic::fallback_atomic::integral_type	./lockfree/boost/atomic/detail/fallback.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::fallback_atomic	access:protected
boost::detail::atomic::fallback_atomic::is_lock_free	./lockfree/boost/atomic/detail/fallback.hpp	/^	bool is_lock_free(void) const volatile {return false;}$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(void) const volatile
boost::detail::atomic::fallback_atomic::load	./lockfree/boost/atomic/detail/fallback.hpp	/^	T load(memory_order \/*order*\/=memory_order_seq_cst) volatile const$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(memory_order =memory_order_seq_cst) volatile const
boost::detail::atomic::fallback_atomic::store	./lockfree/boost/atomic/detail/fallback.hpp	/^	void store(const T &t, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(const T &t, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::fence_after	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_after	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_after	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_after	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_after	./lockfree/boost/atomic/detail/linux-arm.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_after_load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void fence_after_load(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_after_load	./lockfree/boost/atomic/detail/interlocked.hpp	/^static inline void fence_after_load(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_before	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_before	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_before	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_before	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fence_before	./lockfree/boost/atomic/detail/linux-arm.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::fenced_compare_exchange_strong_32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	fenced_compare_exchange_strong_32(volatile int32_t *ptr, int32_t expected, int32_t desired)$/;"	f	namespace:boost::detail::atomic	signature:(volatile int32_t *ptr, int32_t expected, int32_t desired)
boost::detail::atomic::fenced_compare_exchange_strong_64	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	fenced_compare_exchange_strong_64(int64_t *ptr, int64_t expected, int64_t desired)$/;"	f	namespace:boost::detail::atomic	signature:(int64_t *ptr, int64_t expected, int64_t desired)
boost::detail::atomic::full_fence	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void full_fence(void)$/;"	f	namespace:boost::detail::atomic	signature:(void)
boost::detail::atomic::full_fence	./lockfree/boost/atomic/detail/interlocked.hpp	/^static inline void full_fence(void)$/;"	f	namespace:boost::detail::atomic	signature:(void)
boost::detail::atomic::internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^class internal_atomic<T, Size, int> : private detail::atomic::platform_atomic_integral<T> {$/;"	c	namespace:boost::detail::atomic	inherits:detail::atomic::platform_atomic_integral
boost::detail::atomic::internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^class internal_atomic<T, Size, void> : private detail::atomic::platform_atomic<T> {$/;"	c	namespace:boost::detail::atomic	inherits:detail::atomic::platform_atomic
boost::detail::atomic::internal_atomic::compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::internal_atomic::compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::internal_atomic::compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::internal_atomic::compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::internal_atomic::compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::internal_atomic::compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::internal_atomic::compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::internal_atomic::compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::internal_atomic::integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::internal_atomic	access:public
boost::detail::atomic::internal_atomic::internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	explicit internal_atomic(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(T v)
boost::detail::atomic::internal_atomic::internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	internal_atomic() {}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:()
boost::detail::atomic::internal_atomic::internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	internal_atomic(const internal_atomic &);$/;"	p	class:boost::detail::atomic::internal_atomic	access:private	signature:(const internal_atomic &)
boost::detail::atomic::internal_atomic::operator &=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator&=(integral_type c) volatile {return fetch_and(c)&c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
boost::detail::atomic::internal_atomic::operator ++	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator++(int) volatile {return fetch_add(1);}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(int) volatile
boost::detail::atomic::internal_atomic::operator ++	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator++(void) volatile {return fetch_add(1)+1;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) volatile
boost::detail::atomic::internal_atomic::operator +=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator+=(integral_type c) volatile {return fetch_add(c)+c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
boost::detail::atomic::internal_atomic::operator --	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator--(int) volatile {return fetch_sub(1);}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(int) volatile
boost::detail::atomic::internal_atomic::operator --	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator--(void) volatile {return fetch_sub(1)-1;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) volatile
boost::detail::atomic::internal_atomic::operator -=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator-=(integral_type c) volatile {return fetch_sub(c)-c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
boost::detail::atomic::internal_atomic::operator =	./lockfree/boost/atomic/detail/base.hpp	/^	T operator=(T v) volatile {store(v); return v;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(T v) volatile
boost::detail::atomic::internal_atomic::operator =	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator=(integral_type v) volatile {store(v); return v;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type v) volatile
boost::detail::atomic::internal_atomic::operator =	./lockfree/boost/atomic/detail/base.hpp	/^	void operator=(const internal_atomic &);$/;"	p	class:boost::detail::atomic::internal_atomic	access:private	signature:(const internal_atomic &)
boost::detail::atomic::internal_atomic::operator T	./lockfree/boost/atomic/detail/base.hpp	/^	operator T(void) const volatile {return load();}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) const volatile
boost::detail::atomic::internal_atomic::operator ^=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator^=(integral_type c) volatile {return fetch_xor(c)^c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
boost::detail::atomic::internal_atomic::operator integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	operator integral_type(void) const volatile {return load();}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) const volatile
boost::detail::atomic::internal_atomic::operator |=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator|=(integral_type c) volatile {return fetch_or(c)|c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
boost::detail::atomic::internal_atomic::super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef detail::atomic::platform_atomic<T> super;$/;"	t	class:boost::detail::atomic::internal_atomic	access:public
boost::detail::atomic::internal_atomic::super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef detail::atomic::platform_atomic_integral<T> super;$/;"	t	class:boost::detail::atomic::internal_atomic	access:public
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<char> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed char> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed int> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed long long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed short> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned char> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned int> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned short> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<typename T> struct is_integral_type {typedef void test;};$/;"	s	namespace:boost::detail::atomic
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<char> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed char> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed int> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed long long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed short> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned char> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned int> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned short> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::is_integral_type::test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<typename T> struct is_integral_type {typedef void test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
boost::detail::atomic::kernel_dmb_t	./lockfree/boost/atomic/detail/linux-arm.hpp	/^typedef void (kernel_dmb_t)(void);$/;"	t	namespace:boost::detail::atomic
boost::detail::atomic::platform_atomic	./lockfree/boost/atomic/detail/base.hpp	/^class platform_atomic : public fallback_atomic<T> {$/;"	c	namespace:boost::detail::atomic	inherits:fallback_atomic
boost::detail::atomic::platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 1> : private platform_atomic_integral<uint8_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
boost::detail::atomic::platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 2> : private platform_atomic_integral<uint16_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
boost::detail::atomic::platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 4> : private platform_atomic_integral<uint32_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
boost::detail::atomic::platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 8> : private platform_atomic_integral<uint64_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
boost::detail::atomic::platform_atomic::compare_exchange_strong	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::platform_atomic::compare_exchange_weak	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
boost::detail::atomic::platform_atomic::exchange	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	T exchange(T replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T replacement, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::platform_atomic::from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint16_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint16_t t)
boost::detail::atomic::platform_atomic::from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint32_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint32_t t)
boost::detail::atomic::platform_atomic::from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint64_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint64_t t)
boost::detail::atomic::platform_atomic::from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint8_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint8_t t)
boost::detail::atomic::platform_atomic::integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::platform_atomic	access:protected
boost::detail::atomic::platform_atomic::load	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	T load(memory_order order=memory_order_seq_cst) volatile const$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(memory_order order=memory_order_seq_cst) volatile const
boost::detail::atomic::platform_atomic::operator =	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	T operator=(T v) volatile {store(v); return v;}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T v) volatile
boost::detail::atomic::platform_atomic::operator T	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	operator T(void) const volatile {return load();}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(void) const volatile
boost::detail::atomic::platform_atomic::platform_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	explicit platform_atomic(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T v)
boost::detail::atomic::platform_atomic::platform_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	platform_atomic() {}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:()
boost::detail::atomic::platform_atomic::platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	explicit platform_atomic(T t) : super(to_integral(t))$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T t)
boost::detail::atomic::platform_atomic::platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	platform_atomic() {}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:()
boost::detail::atomic::platform_atomic::store	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	void store(T t, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T t, memory_order order=memory_order_seq_cst) volatile
boost::detail::atomic::platform_atomic::super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef fallback_atomic<T> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
boost::detail::atomic::platform_atomic::super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint16_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
boost::detail::atomic::platform_atomic::super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint32_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
boost::detail::atomic::platform_atomic::super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint64_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
boost::detail::atomic::platform_atomic::super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint8_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
boost::detail::atomic::platform_atomic::to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint16_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
boost::detail::atomic::platform_atomic::to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint32_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
boost::detail::atomic::platform_atomic::to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint64_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
boost::detail::atomic::platform_atomic::to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint8_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
boost::detail::atomic::platform_atomic_address	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^typedef build_exchange<atomic_arm_4<void *> > platform_atomic_address;$/;"	t	namespace:boost::detail::atomic
boost::detail::atomic::platform_atomic_address	./lockfree/boost/atomic/detail/linux-arm.hpp	/^typedef atomic_linux_arm_4<void *> platform_atomic_address;$/;"	t	namespace:boost::detail::atomic
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/base.hpp	/^class platform_atomic_integral : public build_atomic_from_exchange<fallback_atomic<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_exchange
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_arm_4<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_arm_4<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_arm_4<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_ppc_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_ppc_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_ppc_32<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_typical<build_exchange<atomic_ppc_64<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 16> : public build_atomic_from_add<atomic_x86_128<T> >{$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 1> : public build_atomic_from_add<atomic_x86_8<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 2> : public build_atomic_from_add<atomic_x86_16<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_add<atomic_x86_32<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_add<atomic_x86_64<T> >{$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_exchange<atomic_generic_cas32<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_exchange
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_interlocked_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_interlocked_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_add<atomic_interlocked_32<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class platform_atomic_integral<T, 1> : public build_atomic_from_larger_type<atomic_linux_arm_4<uint32_t>, T > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class platform_atomic_integral<T, 2> : public build_atomic_from_larger_type<atomic_linux_arm_4<uint32_t>, T > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
boost::detail::atomic::platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_exchange<atomic_linux_arm_4<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_exchange
boost::detail::atomic::platform_atomic_integral::integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:protected
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/base.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/base.hpp	/^	platform_atomic_integral() {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:()
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
boost::detail::atomic::platform_atomic_integral::platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef build_atomic_from_exchange<fallback_atomic<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	typedef build_atomic_from_larger_type<atomic_arm_4<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_arm_4<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef build_atomic_from_larger_type<atomic_ppc_32<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_ppc_32<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_ppc_64<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_16<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_32<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_64<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_8<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    typedef build_atomic_from_add<atomic_x86_128<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef build_atomic_from_exchange<atomic_generic_cas32<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/interlocked.hpp	/^	typedef build_atomic_from_add<atomic_interlocked_32<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/interlocked.hpp	/^	typedef build_atomic_from_larger_type<atomic_interlocked_32<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef build_atomic_from_exchange<atomic_linux_arm_4<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_integral::super	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef build_atomic_from_larger_type<atomic_linux_arm_4<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
boost::detail::atomic::platform_atomic_thread_fence	./lockfree/boost/atomic/detail/base.hpp	/^static inline void platform_atomic_thread_fence(T order);$/;"	p	namespace:boost::detail::atomic	signature:(T order)
boost::detail::atomic::platform_atomic_thread_fence	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::platform_atomic_thread_fence	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::platform_atomic_thread_fence	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::detail::atomic::platform_atomic_thread_fence	./lockfree/boost/atomic/detail/integral-casts.hpp	/^static inline void platform_atomic_thread_fence(T order)$/;"	f	namespace:boost::detail::atomic	signature:(T order)
boost::detail::atomic::platform_atomic_thread_fence	./lockfree/boost/atomic/detail/interlocked.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
boost::lockfree	./lockfree/boost/lockfree/detail/atomic.hpp	/^namespace lockfree {$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^namespace lockfree$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/detail/freelist.hpp	/^namespace lockfree$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^namespace lockfree {$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^namespace lockfree {$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/fifo.hpp	/^namespace lockfree {$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/ringbuffer.hpp	/^namespace lockfree$/;"	n	namespace:boost
boost::lockfree	./lockfree/boost/lockfree/stack.hpp	/^namespace lockfree {$/;"	n	namespace:boost
boost::lockfree::caching_freelist_t	./lockfree/boost/lockfree/detail/freelist.hpp	/^struct caching_freelist_t {};$/;"	s	namespace:boost::lockfree
boost::lockfree::detail	./lockfree/boost/lockfree/detail/atomic.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
boost::lockfree::detail	./lockfree/boost/lockfree/detail/freelist.hpp	/^namespace detail$/;"	n	namespace:boost::lockfree
boost::lockfree::detail	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
boost::lockfree::detail	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
boost::lockfree::detail	./lockfree/boost/lockfree/fifo.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
boost::lockfree::detail	./lockfree/boost/lockfree/ringbuffer.hpp	/^namespace detail$/;"	n	namespace:boost::lockfree
boost::lockfree::detail::fifo	./lockfree/boost/lockfree/fifo.hpp	/^class fifo:$/;"	c	namespace:boost::lockfree::detail	inherits:boost::noncopyable
boost::lockfree::detail::fifo::BOOST_STATIC_ASSERT	./lockfree/boost/lockfree/fifo.hpp	/^    BOOST_STATIC_ASSERT(boost::is_pod<T>::value);$/;"	p	class:boost::lockfree::detail::fifo	access:private	signature:(boost::is_pod<T>::value)
boost::lockfree::detail::fifo::dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (T & ret)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T & ret)
boost::lockfree::detail::fifo::dequeue_unsafe	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue_unsafe (T & ret)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T & ret)
boost::lockfree::detail::fifo::empty	./lockfree/boost/lockfree/fifo.hpp	/^    bool empty(void)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void)
boost::lockfree::detail::fifo::enqueue	./lockfree/boost/lockfree/fifo.hpp	/^    bool enqueue(T const & t)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T const & t)
boost::lockfree::detail::fifo::enqueue_unsafe	./lockfree/boost/lockfree/fifo.hpp	/^    bool enqueue_unsafe(T const & t)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T const & t)
boost::lockfree::detail::fifo::fifo	./lockfree/boost/lockfree/fifo.hpp	/^    explicit fifo(std::size_t n)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(std::size_t n)
boost::lockfree::detail::fifo::fifo	./lockfree/boost/lockfree/fifo.hpp	/^    fifo(void)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void)
boost::lockfree::detail::fifo::head_	./lockfree/boost/lockfree/fifo.hpp	/^    atomic<tagged_node_ptr> head_;$/;"	m	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::initialize	./lockfree/boost/lockfree/fifo.hpp	/^    void initialize(void)$/;"	f	class:boost::lockfree::detail::fifo	access:private	signature:(void)
boost::lockfree::detail::fifo::is_lock_free	./lockfree/boost/lockfree/fifo.hpp	/^    bool is_lock_free (void) const$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void) const
boost::lockfree::detail::fifo::node	./lockfree/boost/lockfree/fifo.hpp	/^    struct BOOST_LOCKFREE_CACHELINE_ALIGNMENT node$/;"	s	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::node::data	./lockfree/boost/lockfree/fifo.hpp	/^        T data;$/;"	m	struct:boost::lockfree::detail::fifo::node	access:public
boost::lockfree::detail::fifo::node::next	./lockfree/boost/lockfree/fifo.hpp	/^        atomic<tagged_node_ptr> next;$/;"	m	struct:boost::lockfree::detail::fifo::node	access:public
boost::lockfree::detail::fifo::node::node	./lockfree/boost/lockfree/fifo.hpp	/^        node (void):$/;"	f	struct:boost::lockfree::detail::fifo::node	access:public	signature:(void)
boost::lockfree::detail::fifo::node::node	./lockfree/boost/lockfree/fifo.hpp	/^        node(T const & v):$/;"	f	struct:boost::lockfree::detail::fifo::node	access:public	signature:(T const & v)
boost::lockfree::detail::fifo::node::tagged_node_ptr	./lockfree/boost/lockfree/fifo.hpp	/^        typedef tagged_ptr<node> tagged_node_ptr;$/;"	t	struct:boost::lockfree::detail::fifo::node	access:public
boost::lockfree::detail::fifo::node_allocator	./lockfree/boost/lockfree/fifo.hpp	/^    typedef typename Alloc::template rebind<node>::other node_allocator;$/;"	t	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::padding1	./lockfree/boost/lockfree/fifo.hpp	/^    char padding1[padding_size];$/;"	m	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::padding2	./lockfree/boost/lockfree/fifo.hpp	/^    char padding2[padding_size];$/;"	m	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::padding_size	./lockfree/boost/lockfree/fifo.hpp	/^    static const int padding_size = BOOST_LOCKFREE_CACHELINE_BYTES - sizeof(tagged_node_ptr);$/;"	m	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::pool	./lockfree/boost/lockfree/fifo.hpp	/^    pool_t pool;$/;"	m	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::pool_t	./lockfree/boost/lockfree/fifo.hpp	/^                                     >::type pool_t;$/;"	t	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::reserve	./lockfree/boost/lockfree/fifo.hpp	/^    void reserve(std::size_t n)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(std::size_t n)
boost::lockfree::detail::fifo::reserve_unsafe	./lockfree/boost/lockfree/fifo.hpp	/^    void reserve_unsafe(std::size_t n)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(std::size_t n)
boost::lockfree::detail::fifo::tagged_node_ptr	./lockfree/boost/lockfree/fifo.hpp	/^    typedef tagged_ptr<node> tagged_node_ptr;$/;"	t	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::tail_	./lockfree/boost/lockfree/fifo.hpp	/^    atomic<tagged_node_ptr> tail_;$/;"	m	class:boost::lockfree::detail::fifo	access:private
boost::lockfree::detail::fifo::~fifo	./lockfree/boost/lockfree/fifo.hpp	/^    ~fifo(void)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void)
boost::lockfree::detail::freelist_node	./lockfree/boost/lockfree/detail/freelist.hpp	/^struct freelist_node$/;"	s	namespace:boost::lockfree::detail
boost::lockfree::detail::freelist_node::next	./lockfree/boost/lockfree/detail/freelist.hpp	/^    tagged_ptr<freelist_node> next;$/;"	m	struct:boost::lockfree::detail::freelist_node	access:public
boost::lockfree::detail::freelist_stack	./lockfree/boost/lockfree/detail/freelist.hpp	/^class freelist_stack:$/;"	c	namespace:boost::lockfree::detail	inherits:Alloc
boost::lockfree::detail::freelist_stack::allocate	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * allocate (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
boost::lockfree::detail::freelist_stack::allocate_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * allocate_unsafe (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
boost::lockfree::detail::freelist_stack::construct	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct (ArgumentType const & arg)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(ArgumentType const & arg)
boost::lockfree::detail::freelist_stack::construct	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
boost::lockfree::detail::freelist_stack::construct_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct_unsafe (ArgumentType const & arg)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(ArgumentType const & arg)
boost::lockfree::detail::freelist_stack::construct_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct_unsafe (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
boost::lockfree::detail::freelist_stack::deallocate	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void deallocate (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
boost::lockfree::detail::freelist_stack::deallocate_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void deallocate_unsafe (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
boost::lockfree::detail::freelist_stack::destruct	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void destruct (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
boost::lockfree::detail::freelist_stack::destruct_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void destruct_unsafe (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
boost::lockfree::detail::freelist_stack::freelist_stack	./lockfree/boost/lockfree/detail/freelist.hpp	/^    freelist_stack (std::size_t n = 0):$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(std::size_t n = 0)
boost::lockfree::detail::freelist_stack::is_lock_free	./lockfree/boost/lockfree/detail/freelist.hpp	/^    bool is_lock_free(void) const$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void) const
boost::lockfree::detail::freelist_stack::pool_	./lockfree/boost/lockfree/detail/freelist.hpp	/^    atomic<tagged_node_ptr> pool_;$/;"	m	class:boost::lockfree::detail::freelist_stack	access:private
boost::lockfree::detail::freelist_stack::reserve	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void reserve (std::size_t count)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(std::size_t count)
boost::lockfree::detail::freelist_stack::reserve_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void reserve_unsafe (std::size_t count)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(std::size_t count)
boost::lockfree::detail::freelist_stack::tagged_node_ptr	./lockfree/boost/lockfree/detail/freelist.hpp	/^    typedef tagged_ptr<freelist_node> tagged_node_ptr;$/;"	t	class:boost::lockfree::detail::freelist_stack	access:private
boost::lockfree::detail::freelist_stack::~freelist_stack	./lockfree/boost/lockfree/detail/freelist.hpp	/^    ~freelist_stack(void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
boost::lockfree::detail::ringbuffer_base	./lockfree/boost/lockfree/ringbuffer.hpp	/^class ringbuffer_base:$/;"	c	namespace:boost::lockfree::detail	inherits:boost::noncopyable
boost::lockfree::detail::ringbuffer_base::dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool dequeue (T & ret, T * buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(T & ret, T * buffer, size_t max_size)
boost::lockfree::detail::ringbuffer_base::dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue (OutputIterator it, const T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(OutputIterator it, const T * internal_buffer, size_t max_size)
boost::lockfree::detail::ringbuffer_base::dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue (T * output_buffer, size_t output_count, const T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(T * output_buffer, size_t output_count, const T * internal_buffer, size_t max_size)
boost::lockfree::detail::ringbuffer_base::empty	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool empty(size_t write_index, size_t read_index)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:private	signature:(size_t write_index, size_t read_index)
boost::lockfree::detail::ringbuffer_base::empty	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool empty(void)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:public	signature:(void)
boost::lockfree::detail::ringbuffer_base::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    ConstIterator enqueue(ConstIterator begin, ConstIterator end, T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(ConstIterator begin, ConstIterator end, T * internal_buffer, size_t max_size)
boost::lockfree::detail::ringbuffer_base::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool enqueue(T const & t, T * buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(T const & t, T * buffer, size_t max_size)
boost::lockfree::detail::ringbuffer_base::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t enqueue(const T * input_buffer, size_t input_count, T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(const T * input_buffer, size_t input_count, T * internal_buffer, size_t max_size)
boost::lockfree::detail::ringbuffer_base::is_lock_free	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool is_lock_free(void) const$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:public	signature:(void) const
boost::lockfree::detail::ringbuffer_base::next_index	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static size_t next_index(size_t arg, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(size_t arg, size_t max_size)
boost::lockfree::detail::ringbuffer_base::padding1	./lockfree/boost/lockfree/ringbuffer.hpp	/^    char padding1[padding_size]; \/* force read_index and write_index to different cache lines *\/$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
boost::lockfree::detail::ringbuffer_base::padding_size	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static const int padding_size = BOOST_LOCKFREE_CACHELINE_BYTES - sizeof(size_t);$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
boost::lockfree::detail::ringbuffer_base::read_available	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static size_t read_available(size_t write_index, size_t read_index, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(size_t write_index, size_t read_index, size_t max_size)
boost::lockfree::detail::ringbuffer_base::read_index_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    atomic<size_t> read_index_;$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
boost::lockfree::detail::ringbuffer_base::reset	./lockfree/boost/lockfree/ringbuffer.hpp	/^    void reset(void)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:public	signature:(void)
boost::lockfree::detail::ringbuffer_base::ringbuffer_base	./lockfree/boost/lockfree/ringbuffer.hpp	/^    ringbuffer_base(void):$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(void)
boost::lockfree::detail::ringbuffer_base::size_t	./lockfree/boost/lockfree/ringbuffer.hpp	/^    typedef std::size_t size_t;$/;"	t	class:boost::lockfree::detail::ringbuffer_base	access:private
boost::lockfree::detail::ringbuffer_base::write_available	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static size_t write_available(size_t write_index, size_t read_index, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(size_t write_index, size_t read_index, size_t max_size)
boost::lockfree::detail::ringbuffer_base::write_index_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    atomic<size_t> write_index_;$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
boost::lockfree::detail::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^class BOOST_LOCKFREE_DCAS_ALIGNMENT tagged_ptr$/;"	c	namespace:boost::lockfree::detail
boost::lockfree::detail::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^class tagged_ptr$/;"	c	namespace:boost::lockfree::detail
boost::lockfree::detail::tagged_ptr::cast_unit	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    union cast_unit$/;"	u	class:boost::lockfree::detail::tagged_ptr	access:private
boost::lockfree::detail::tagged_ptr::cast_unit::tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^        tag_t tag[4];$/;"	m	union:boost::lockfree::detail::tagged_ptr::cast_unit	access:public
boost::lockfree::detail::tagged_ptr::cast_unit::value	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^        compressed_ptr_t value;$/;"	m	union:boost::lockfree::detail::tagged_ptr::cast_unit	access:public
boost::lockfree::detail::tagged_ptr::compressed_ptr_t	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    typedef boost::uint64_t compressed_ptr_t;$/;"	t	class:boost::lockfree::detail::tagged_ptr	access:private
boost::lockfree::detail::tagged_ptr::extract_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static T* extract_ptr(volatile compressed_ptr_t const & i)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:private	signature:(volatile compressed_ptr_t const & i)
boost::lockfree::detail::tagged_ptr::extract_tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static tag_t extract_tag(volatile compressed_ptr_t const & i)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:private	signature:(volatile compressed_ptr_t const & i)
boost::lockfree::detail::tagged_ptr::get_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T * get_ptr(void) const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void) const volatile
boost::lockfree::detail::tagged_ptr::get_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    T * get_ptr() const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const volatile
boost::lockfree::detail::tagged_ptr::get_tag	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tag_t get_tag() const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const volatile
boost::lockfree::detail::tagged_ptr::get_tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    tag_t get_tag() const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const volatile
boost::lockfree::detail::tagged_ptr::operator !=	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    bool operator!= (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
boost::lockfree::detail::tagged_ptr::operator !=	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    bool operator!= (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
boost::lockfree::detail::tagged_ptr::operator *	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T & operator*() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
boost::lockfree::detail::tagged_ptr::operator *	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    T & operator*() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
boost::lockfree::detail::tagged_ptr::operator ->	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T * operator->() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
boost::lockfree::detail::tagged_ptr::operator ->	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    T * operator->() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
boost::lockfree::detail::tagged_ptr::operator =	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void operator= (tagged_ptr const & p)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
boost::lockfree::detail::tagged_ptr::operator =	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void operator= (tagged_ptr const & p)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
boost::lockfree::detail::tagged_ptr::operator ==	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    bool operator== (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
boost::lockfree::detail::tagged_ptr::operator ==	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    bool operator== (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
boost::lockfree::detail::tagged_ptr::operator bool	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    operator bool(void) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void) const
boost::lockfree::detail::tagged_ptr::operator bool	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    operator bool(void) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void) const
boost::lockfree::detail::tagged_ptr::pack_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static compressed_ptr_t pack_ptr(T * ptr, int tag)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:private	signature:(T * ptr, int tag)
boost::lockfree::detail::tagged_ptr::ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T * ptr;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:protected
boost::lockfree::detail::tagged_ptr::ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    compressed_ptr_t ptr;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:protected
boost::lockfree::detail::tagged_ptr::ptr_mask	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static const compressed_ptr_t ptr_mask = 0xffffffffffff; \/\/(1L<<48L)-1;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:private
boost::lockfree::detail::tagged_ptr::set	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void set(T * p, tag_t t)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t)
boost::lockfree::detail::tagged_ptr::set	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void set(T * p, tag_t t)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t)
boost::lockfree::detail::tagged_ptr::set_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void set_ptr(T * p) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p) volatile
boost::lockfree::detail::tagged_ptr::set_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void set_ptr(T * p) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p) volatile
boost::lockfree::detail::tagged_ptr::set_tag	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void set_tag(tag_t t) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tag_t t) volatile
boost::lockfree::detail::tagged_ptr::set_tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void set_tag(tag_t t) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tag_t t) volatile
boost::lockfree::detail::tagged_ptr::tag	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tag_t tag;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:protected
boost::lockfree::detail::tagged_ptr::tag_index	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static const int tag_index = 3;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:private
boost::lockfree::detail::tagged_ptr::tag_t	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    typedef std::size_t tag_t;$/;"	t	class:boost::lockfree::detail::tagged_ptr	access:public
boost::lockfree::detail::tagged_ptr::tag_t	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    typedef boost::uint16_t tag_t;$/;"	t	class:boost::lockfree::detail::tagged_ptr	access:private
boost::lockfree::detail::tagged_ptr::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    explicit tagged_ptr(T * p, tag_t t = 0):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t = 0)
boost::lockfree::detail::tagged_ptr::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tagged_ptr(tagged_ptr const & p):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
boost::lockfree::detail::tagged_ptr::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tagged_ptr(void)\/\/: ptr(0), tag(0)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void)
boost::lockfree::detail::tagged_ptr::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    explicit tagged_ptr(T * p, tag_t t = 0):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t = 0)
boost::lockfree::detail::tagged_ptr::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    tagged_ptr(tagged_ptr const & p):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
boost::lockfree::detail::tagged_ptr::tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    tagged_ptr(void)\/\/: ptr(0), tag(0)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void)
boost::lockfree::fifo	./lockfree/boost/lockfree/fifo.hpp	/^class fifo:$/;"	c	namespace:boost::lockfree	inherits:detail::fifo
boost::lockfree::fifo	./lockfree/boost/lockfree/fifo.hpp	/^class fifo<T*, freelist_t, Alloc>:$/;"	c	namespace:boost::lockfree	inherits:detail::fifo
boost::lockfree::fifo::BOOST_STATIC_ASSERT	./lockfree/boost/lockfree/fifo.hpp	/^    BOOST_STATIC_ASSERT(boost::has_trivial_assign<T>::value);$/;"	p	class:boost::lockfree::fifo	access:private	signature:(boost::has_trivial_assign<T>::value)
boost::lockfree::fifo::dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (T * & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(T * & ret)
boost::lockfree::fifo::dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (boost::scoped_ptr<T> & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(boost::scoped_ptr<T> & ret)
boost::lockfree::fifo::dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (boost::shared_ptr<T> & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(boost::shared_ptr<T> & ret)
boost::lockfree::fifo::dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (std::auto_ptr<T> & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(std::auto_ptr<T> & ret)
boost::lockfree::fifo::dequeue_smart_ptr	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue_smart_ptr(smart_ptr & ptr)$/;"	f	class:boost::lockfree::fifo	access:private	signature:(smart_ptr & ptr)
boost::lockfree::fifo::fifo	./lockfree/boost/lockfree/fifo.hpp	/^    explicit fifo(std::size_t n):$/;"	f	class:boost::lockfree::fifo	access:public	signature:(std::size_t n)
boost::lockfree::fifo::fifo	./lockfree/boost/lockfree/fifo.hpp	/^    fifo(void)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(void)
boost::lockfree::fifo::fifo_t	./lockfree/boost/lockfree/fifo.hpp	/^    typedef detail::fifo<T*, freelist_t, Alloc> fifo_t;$/;"	t	class:boost::lockfree::fifo	access:private
boost::lockfree::likely	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^    inline bool likely(bool expr)$/;"	f	namespace:boost::lockfree	signature:(bool expr)
boost::lockfree::ringbuffer	./lockfree/boost/lockfree/ringbuffer.hpp	/^class ringbuffer:$/;"	c	namespace:boost::lockfree	inherits:detail::ringbuffer_base
boost::lockfree::ringbuffer	./lockfree/boost/lockfree/ringbuffer.hpp	/^class ringbuffer<T, 0>:$/;"	c	namespace:boost::lockfree	inherits:detail::ringbuffer_base
boost::lockfree::ringbuffer::array_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    boost::array<T, max_size> array_;$/;"	m	class:boost::lockfree::ringbuffer	access:private
boost::lockfree::ringbuffer::array_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    scoped_array<T> array_;$/;"	m	class:boost::lockfree::ringbuffer	access:private
boost::lockfree::ringbuffer::dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool dequeue(T & ret)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T & ret)
boost::lockfree::ringbuffer::dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue(OutputIterator it)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(OutputIterator it)
boost::lockfree::ringbuffer::dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue(T * ret, size_t size)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T * ret, size_t size)
boost::lockfree::ringbuffer::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    ConstIterator enqueue(ConstIterator begin, ConstIterator end)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(ConstIterator begin, ConstIterator end)
boost::lockfree::ringbuffer::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool enqueue(T const & t)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T const & t)
boost::lockfree::ringbuffer::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t enqueue(T const (&t)[size])$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T const (&t)[size])
boost::lockfree::ringbuffer::enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t enqueue(T const * t, size_t size)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T const * t, size_t size)
boost::lockfree::ringbuffer::max_size_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t max_size_;$/;"	m	class:boost::lockfree::ringbuffer	access:private
boost::lockfree::ringbuffer::ringbuffer	./lockfree/boost/lockfree/ringbuffer.hpp	/^    explicit ringbuffer(size_t max_size):$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(size_t max_size)
boost::lockfree::ringbuffer::size_t	./lockfree/boost/lockfree/ringbuffer.hpp	/^    typedef std::size_t size_t;$/;"	t	class:boost::lockfree::ringbuffer	access:private
boost::lockfree::stack	./lockfree/boost/lockfree/stack.hpp	/^class stack:$/;"	c	namespace:boost::lockfree	inherits:boost::noncopyable
boost::lockfree::stack::BOOST_STATIC_ASSERT	./lockfree/boost/lockfree/stack.hpp	/^    BOOST_STATIC_ASSERT(boost::has_trivial_assign<T>::value);$/;"	p	class:boost::lockfree::stack	access:private	signature:(boost::has_trivial_assign<T>::value)
boost::lockfree::stack::empty	./lockfree/boost/lockfree/stack.hpp	/^    bool empty(void) const$/;"	f	class:boost::lockfree::stack	access:public	signature:(void) const
boost::lockfree::stack::is_lock_free	./lockfree/boost/lockfree/stack.hpp	/^    bool is_lock_free (void) const$/;"	f	class:boost::lockfree::stack	access:public	signature:(void) const
boost::lockfree::stack::node	./lockfree/boost/lockfree/stack.hpp	/^    struct node$/;"	s	class:boost::lockfree::stack	access:private
boost::lockfree::stack::node::next	./lockfree/boost/lockfree/stack.hpp	/^        tagged_node_ptr next;$/;"	m	struct:boost::lockfree::stack::node	access:public
boost::lockfree::stack::node::node	./lockfree/boost/lockfree/stack.hpp	/^        node(T const & v):$/;"	f	struct:boost::lockfree::stack::node	access:public	signature:(T const & v)
boost::lockfree::stack::node::tagged_node_ptr	./lockfree/boost/lockfree/stack.hpp	/^        typedef detail::tagged_ptr<node> tagged_node_ptr;$/;"	t	struct:boost::lockfree::stack::node	access:public
boost::lockfree::stack::node::v	./lockfree/boost/lockfree/stack.hpp	/^        T v;$/;"	m	struct:boost::lockfree::stack::node	access:public
boost::lockfree::stack::node_allocator	./lockfree/boost/lockfree/stack.hpp	/^    typedef typename Alloc::template rebind<node>::other node_allocator;$/;"	t	class:boost::lockfree::stack	access:private
boost::lockfree::stack::padding	./lockfree/boost/lockfree/stack.hpp	/^    char padding[padding_size];$/;"	m	class:boost::lockfree::stack	access:private
boost::lockfree::stack::padding_size	./lockfree/boost/lockfree/stack.hpp	/^    static const int padding_size = BOOST_LOCKFREE_CACHELINE_BYTES - sizeof(tagged_node_ptr);$/;"	m	class:boost::lockfree::stack	access:private
boost::lockfree::stack::pool	./lockfree/boost/lockfree/stack.hpp	/^    pool_t pool;$/;"	m	class:boost::lockfree::stack	access:private
boost::lockfree::stack::pool_t	./lockfree/boost/lockfree/stack.hpp	/^                                     >::type pool_t;$/;"	t	class:boost::lockfree::stack	access:private
boost::lockfree::stack::pop	./lockfree/boost/lockfree/stack.hpp	/^    bool pop(T & ret)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T & ret)
boost::lockfree::stack::pop_unsafe	./lockfree/boost/lockfree/stack.hpp	/^    bool pop_unsafe(T & ret)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T & ret)
boost::lockfree::stack::push	./lockfree/boost/lockfree/stack.hpp	/^    bool push(T const & v)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T const & v)
boost::lockfree::stack::push_unsafe	./lockfree/boost/lockfree/stack.hpp	/^    bool push_unsafe(T const & v)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T const & v)
boost::lockfree::stack::reserve	./lockfree/boost/lockfree/stack.hpp	/^    void reserve(std::size_t n)$/;"	f	class:boost::lockfree::stack	access:public	signature:(std::size_t n)
boost::lockfree::stack::reserve_unsafe	./lockfree/boost/lockfree/stack.hpp	/^    void reserve_unsafe(std::size_t n)$/;"	f	class:boost::lockfree::stack	access:public	signature:(std::size_t n)
boost::lockfree::stack::stack	./lockfree/boost/lockfree/stack.hpp	/^    explicit stack(std::size_t n):$/;"	f	class:boost::lockfree::stack	access:public	signature:(std::size_t n)
boost::lockfree::stack::stack	./lockfree/boost/lockfree/stack.hpp	/^    stack(void):$/;"	f	class:boost::lockfree::stack	access:public	signature:(void)
boost::lockfree::stack::tagged_node_ptr	./lockfree/boost/lockfree/stack.hpp	/^    typedef detail::tagged_ptr<node> tagged_node_ptr;$/;"	t	class:boost::lockfree::stack	access:private
boost::lockfree::stack::tos	./lockfree/boost/lockfree/stack.hpp	/^    detail::atomic<tagged_node_ptr> tos;$/;"	m	class:boost::lockfree::stack	access:private
boost::lockfree::stack::~stack	./lockfree/boost/lockfree/stack.hpp	/^    ~stack(void)$/;"	f	class:boost::lockfree::stack	access:public	signature:(void)
boost::lockfree::static_freelist_t	./lockfree/boost/lockfree/detail/freelist.hpp	/^struct static_freelist_t {};$/;"	s	namespace:boost::lockfree
boost::lockfree::unlikely	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^    inline bool unlikely(bool expr)$/;"	f	namespace:boost::lockfree	signature:(bool expr)
boost::memory_order	./lockfree/boost/memory_order.hpp	/^enum memory_order$/;"	g	namespace:boost
boost::memory_order_acq_rel	./lockfree/boost/memory_order.hpp	/^    memory_order_acq_rel = 3, \/\/ acquire | release$/;"	e	enum:boost::memory_order
boost::memory_order_acquire	./lockfree/boost/memory_order.hpp	/^    memory_order_acquire = 1,$/;"	e	enum:boost::memory_order
boost::memory_order_consume	./lockfree/boost/memory_order.hpp	/^    memory_order_consume = 8$/;"	e	enum:boost::memory_order
boost::memory_order_relaxed	./lockfree/boost/memory_order.hpp	/^    memory_order_relaxed = 0,$/;"	e	enum:boost::memory_order
boost::memory_order_release	./lockfree/boost/memory_order.hpp	/^    memory_order_release = 2,$/;"	e	enum:boost::memory_order
boost::memory_order_seq_cst	./lockfree/boost/memory_order.hpp	/^    memory_order_seq_cst = 7, \/\/ acq_rel | 4$/;"	e	enum:boost::memory_order
boost::threadpool	./threadpool/boost/threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/future.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/pool.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/pool_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/scheduling_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/shutdown_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/size_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool	./threadpool/boost/threadpool/task_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
boost::threadpool::detail	./threadpool/boost/threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
boost::threadpool::detail	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
boost::threadpool::detail	./threadpool/boost/threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
boost::threadpool::detail	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
boost::threadpool::detail	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
boost::threadpool::detail::future_impl	./threadpool/boost/threadpool/detail/future.hpp	/^class future_impl$/;"	c	namespace:boost::threadpool::detail
boost::threadpool::detail::future_impl::cancel	./threadpool/boost/threadpool/detail/future.hpp	/^   bool cancel() volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() volatile
boost::threadpool::detail::future_impl::future_impl	./threadpool/boost/threadpool/detail/future.hpp	/^  future_impl()$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:()
boost::threadpool::detail::future_impl::future_result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Result future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::detail::future_impl	access:public
boost::threadpool::detail::future_impl::future_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef future_impl<future_result_type> future_type;$/;"	t	class:boost::threadpool::detail::future_impl	access:public
boost::threadpool::detail::future_impl::is_cancelled	./threadpool/boost/threadpool/detail/future.hpp	/^   bool is_cancelled() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
boost::threadpool::detail::future_impl::m_condition_ready	./threadpool/boost/threadpool/detail/future.hpp	/^    mutable condition m_condition_ready;	$/;"	m	class:boost::threadpool::detail::future_impl	access:private
boost::threadpool::detail::future_impl::m_executing	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile bool m_executing;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
boost::threadpool::detail::future_impl::m_is_cancelled	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile bool m_is_cancelled;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
boost::threadpool::detail::future_impl::m_monitor	./threadpool/boost/threadpool/detail/future.hpp	/^    mutable mutex m_monitor;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
boost::threadpool::detail::future_impl::m_ready	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile bool m_ready;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
boost::threadpool::detail::future_impl::m_result	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile future_result_type m_result;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
boost::threadpool::detail::future_impl::operator ()	./threadpool/boost/threadpool/detail/future.hpp	/^  result_type operator()() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
boost::threadpool::detail::future_impl::ready	./threadpool/boost/threadpool/detail/future.hpp	/^  bool ready() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
boost::threadpool::detail::future_impl::result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Result const & result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::detail::future_impl	access:public
boost::threadpool::detail::future_impl::set_execution_status	./threadpool/boost/threadpool/detail/future.hpp	/^   void set_execution_status(bool executing) volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:(bool executing) volatile
boost::threadpool::detail::future_impl::set_value	./threadpool/boost/threadpool/detail/future.hpp	/^  void set_value(future_result_type const & r) volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:(future_result_type const & r) volatile
boost::threadpool::detail::future_impl::timed_wait	./threadpool/boost/threadpool/detail/future.hpp	/^  bool timed_wait(boost::xtime const & timestamp) const$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:(boost::xtime const & timestamp) const
boost::threadpool::detail::future_impl::wait	./threadpool/boost/threadpool/detail/future.hpp	/^  void wait() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
boost::threadpool::detail::future_impl_task_func	./threadpool/boost/threadpool/detail/future.hpp	/^class future_impl_task_func$/;"	c	namespace:boost::threadpool::detail
boost::threadpool::detail::future_impl_task_func::BOOST_STATIC_ASSERT	./threadpool/boost/threadpool/detail/future.hpp	/^  BOOST_STATIC_ASSERT(function_traits<function_type()>::arity == 0);$/;"	p	class:boost::threadpool::detail::future_impl_task_func	access:public	signature:(function_traits<function_type()>::arity == 0)
boost::threadpool::detail::future_impl_task_func::function_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Function function_type;                   \/\/!< Indicates the function's type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
boost::threadpool::detail::future_impl_task_func::future_impl_task_func	./threadpool/boost/threadpool/detail/future.hpp	/^  future_impl_task_func(function_type const & function, shared_ptr<future_type> const & future)$/;"	f	class:boost::threadpool::detail::future_impl_task_func	access:public	signature:(function_type const & function, shared_ptr<future_type> const & future)
boost::threadpool::detail::future_impl_task_func::future_result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef typename result_of<function_type()>::type future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
boost::threadpool::detail::future_impl_task_func::future_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Future<future_result_type> future_type;   \/\/!< Indicates the future's type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
boost::threadpool::detail::future_impl_task_func::m_function	./threadpool/boost/threadpool/detail/future.hpp	/^  function_type             m_function;$/;"	m	class:boost::threadpool::detail::future_impl_task_func	access:private
boost::threadpool::detail::future_impl_task_func::m_future	./threadpool/boost/threadpool/detail/future.hpp	/^  shared_ptr<future_type>   m_future;$/;"	m	class:boost::threadpool::detail::future_impl_task_func	access:private
boost::threadpool::detail::future_impl_task_func::operator ()	./threadpool/boost/threadpool/detail/future.hpp	/^  void operator()()$/;"	f	class:boost::threadpool::detail::future_impl_task_func	access:public	signature:()
boost::threadpool::detail::future_impl_task_func::result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef void result_type;                         \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
boost::threadpool::detail::locking_ptr	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^  class locking_ptr $/;"	c	namespace:boost::threadpool::detail	inherits:noncopyable
boost::threadpool::detail::locking_ptr::locking_ptr	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    locking_ptr(volatile T& obj, const volatile Mutex& mtx)$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:(volatile T& obj, const volatile Mutex& mtx)
boost::threadpool::detail::locking_ptr::m_mutex	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    Mutex & m_mutex;              \/\/!< Mutex is used for scoped locking.$/;"	m	class:boost::threadpool::detail::locking_ptr	access:private
boost::threadpool::detail::locking_ptr::m_obj	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    T* m_obj;                     \/\/!< The instance pointer. $/;"	m	class:boost::threadpool::detail::locking_ptr	access:private
boost::threadpool::detail::locking_ptr::operator *	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    T& operator*() const$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:() const
boost::threadpool::detail::locking_ptr::operator ->	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    T* operator->() const$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:() const
boost::threadpool::detail::locking_ptr::~locking_ptr	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    ~locking_ptr()$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:()
boost::threadpool::detail::pool_core	./threadpool/boost/threadpool/detail/pool_core.hpp	/^  class pool_core$/;"	c	namespace:boost::threadpool::detail	inherits:enable_shared_from_this,noncopyable
boost::threadpool::detail::pool_core::BOOST_STATIC_ASSERT	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    BOOST_STATIC_ASSERT(function_traits<task_type()>::arity == 0);$/;"	p	class:boost::threadpool::detail::pool_core	access:public	signature:(function_traits<task_type()>::arity == 0)
boost::threadpool::detail::pool_core::BOOST_STATIC_ASSERT	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    BOOST_STATIC_ASSERT(is_void<typename result_of<task_type()>::type >::value);$/;"	p	class:boost::threadpool::detail::pool_core	access:public	signature:(is_void<typename result_of<task_type()>::type >::value)
boost::threadpool::detail::pool_core::active	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_t active() const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
boost::threadpool::detail::pool_core::clear	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void clear() volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() volatile
boost::threadpool::detail::pool_core::empty	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool empty() const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
boost::threadpool::detail::pool_core::execute_task	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool execute_task() volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:() volatile
boost::threadpool::detail::pool_core::m_active_worker_count	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    volatile size_t m_active_worker_count;$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_monitor	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    mutable recursive_mutex  m_monitor;$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_scheduler	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    scheduler_type  m_scheduler;$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_size_policy	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    scoped_ptr<size_policy_type> m_size_policy; \/\/ is never null$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_target_worker_count	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    volatile size_t m_target_worker_count;	$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_task_or_terminate_workers_event	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    mutable condition m_task_or_terminate_workers_event;  \/\/ Task is available OR total worker count should be reduced.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_terminate_all_workers	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool  m_terminate_all_workers;								\/\/ Indicates if termination of all workers was triggered.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_terminated_workers	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    std::vector<shared_ptr<worker_type> > m_terminated_workers; \/\/ List of workers which are terminated but not fully destructed.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_worker_count	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    volatile size_t m_worker_count;	$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::m_worker_idle_or_terminated_event	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    mutable condition m_worker_idle_or_terminated_event;	\/\/ A worker is idle or was terminated.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
boost::threadpool::detail::pool_core::pending	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_t pending() const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
boost::threadpool::detail::pool_core::pool_core	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    pool_core()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
boost::threadpool::detail::pool_core::pool_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^                      ShutdownPolicy > pool_type;           \/\/!< Indicates the thread pool's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::resize	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool resize(size_t const worker_count) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(size_t const worker_count) volatile
boost::threadpool::detail::pool_core::schedule	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool schedule(task_type const & task) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:(task_type const & task) volatile
boost::threadpool::detail::pool_core::scheduler_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef SchedulingPolicy<task_type> scheduler_type;     \/\/!< Indicates the scheduler's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::shutdown	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void shutdown()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
boost::threadpool::detail::pool_core::shutdown_policy_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef ShutdownPolicy<pool_type> shutdown_policy_type;\/\/!< Indicates the shutdown policy's type.  $/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::size	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_t size()	const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
boost::threadpool::detail::pool_core::size_controller	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_controller_type size_controller()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
boost::threadpool::detail::pool_core::size_controller_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef SizePolicyController<pool_type> size_controller_type;$/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::size_policy_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef SizePolicy<pool_type> size_policy_type;         \/\/!< Indicates the sizer's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::task_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef Task task_type;                                 \/\/!< Indicates the task's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::terminate_all_workers	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void terminate_all_workers(bool const wait) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(bool const wait) volatile
boost::threadpool::detail::pool_core::wait	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool wait(xtime const & timestamp, size_t const task_threshold = 0) const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:(xtime const & timestamp, size_t const task_threshold = 0) const volatile
boost::threadpool::detail::pool_core::wait	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void wait(size_t const task_threshold = 0) const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:(size_t const task_threshold = 0) const volatile
boost::threadpool::detail::pool_core::worker_destructed	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void worker_destructed(shared_ptr<worker_type> worker) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(shared_ptr<worker_type> worker) volatile
boost::threadpool::detail::pool_core::worker_died_unexpectedly	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void worker_died_unexpectedly(shared_ptr<worker_type> worker) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(shared_ptr<worker_type> worker) volatile
boost::threadpool::detail::pool_core::worker_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef worker_thread<pool_type> worker_type;$/;"	t	class:boost::threadpool::detail::pool_core	access:public
boost::threadpool::detail::pool_core::~pool_core	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    ~pool_core()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
boost::threadpool::detail::scope_guard	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^class scope_guard$/;"	c	namespace:boost::threadpool::detail	inherits:boost::noncopyable
boost::threadpool::detail::scope_guard::disable	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	void disable()$/;"	f	class:boost::threadpool::detail::scope_guard	access:public	signature:()
boost::threadpool::detail::scope_guard::m_function	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	function0<void> const m_function;$/;"	m	class:boost::threadpool::detail::scope_guard	access:private
boost::threadpool::detail::scope_guard::m_is_active	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	bool                  m_is_active;$/;"	m	class:boost::threadpool::detail::scope_guard	access:private
boost::threadpool::detail::scope_guard::scope_guard	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	scope_guard(function0<void> const & call_on_exit)$/;"	f	class:boost::threadpool::detail::scope_guard	access:public	signature:(function0<void> const & call_on_exit)
boost::threadpool::detail::scope_guard::~scope_guard	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	~scope_guard()$/;"	f	class:boost::threadpool::detail::scope_guard	access:public	signature:()
boost::threadpool::detail::worker_thread	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^  class worker_thread$/;"	c	namespace:boost::threadpool::detail	inherits:enable_shared_from_this,noncopyable
boost::threadpool::detail::worker_thread::create_and_attach	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	  static void create_and_attach(shared_ptr<pool_type> const & pool)$/;"	f	class:boost::threadpool::detail::worker_thread	access:public	signature:(shared_ptr<pool_type> const & pool)
boost::threadpool::detail::worker_thread::died_unexpectedly	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	void died_unexpectedly()$/;"	f	class:boost::threadpool::detail::worker_thread	access:private	signature:()
boost::threadpool::detail::worker_thread::join	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	  void join()$/;"	f	class:boost::threadpool::detail::worker_thread	access:public	signature:()
boost::threadpool::detail::worker_thread::m_pool	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    shared_ptr<pool_type>      m_pool;     \/\/!< Pointer to the pool which created the worker.$/;"	m	class:boost::threadpool::detail::worker_thread	access:private
boost::threadpool::detail::worker_thread::m_thread	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    shared_ptr<boost::thread>  m_thread;   \/\/!< Pointer to the thread which executes the run loop.$/;"	m	class:boost::threadpool::detail::worker_thread	access:private
boost::threadpool::detail::worker_thread::pool_type	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    typedef Pool pool_type;         	   \/\/!< Indicates the pool's type.$/;"	t	class:boost::threadpool::detail::worker_thread	access:public
boost::threadpool::detail::worker_thread::run	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	  void run()$/;"	f	class:boost::threadpool::detail::worker_thread	access:public	signature:()
boost::threadpool::detail::worker_thread::worker_thread	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    worker_thread(shared_ptr<pool_type> const & pool)$/;"	f	class:boost::threadpool::detail::worker_thread	access:private	signature:(shared_ptr<pool_type> const & pool)
boost::threadpool::empty_controller	./threadpool/boost/threadpool/size_policies.hpp	/^  struct empty_controller$/;"	s	namespace:boost::threadpool
boost::threadpool::empty_controller::empty_controller	./threadpool/boost/threadpool/size_policies.hpp	/^    empty_controller(typename Pool::size_policy_type&, shared_ptr<Pool>) {}$/;"	f	struct:boost::threadpool::empty_controller	access:public	signature:(typename Pool::size_policy_type&, shared_ptr<Pool>)
boost::threadpool::fifo_pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef thread_pool<task_func, fifo_scheduler, static_size, resize_controller, wait_for_all_tasks> fifo_pool;$/;"	t	namespace:boost::threadpool
boost::threadpool::fifo_scheduler	./threadpool/boost/threadpool/scheduling_policies.hpp	/^  class fifo_scheduler$/;"	c	namespace:boost::threadpool
boost::threadpool::fifo_scheduler::clear	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:()
boost::threadpool::fifo_scheduler::empty	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:() const
boost::threadpool::fifo_scheduler::m_container	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    std::deque<task_type> m_container;  \/\/!< Internal task container.	$/;"	m	class:boost::threadpool::fifo_scheduler	access:protected
boost::threadpool::fifo_scheduler::pop	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:()
boost::threadpool::fifo_scheduler::push	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:(task_type const & task)
boost::threadpool::fifo_scheduler::size	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:() const
boost::threadpool::fifo_scheduler::task_type	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    typedef Task task_type; \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::fifo_scheduler	access:public
boost::threadpool::fifo_scheduler::top	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:() const
boost::threadpool::future	./threadpool/boost/threadpool/future.hpp	/^class future$/;"	c	namespace:boost::threadpool
boost::threadpool::future::cancel	./threadpool/boost/threadpool/future.hpp	/^   bool cancel()$/;"	f	class:boost::threadpool::future	access:public	signature:()
boost::threadpool::future::future	./threadpool/boost/threadpool/future.hpp	/^  future()$/;"	f	class:boost::threadpool::future	access:public	signature:()
boost::threadpool::future::future	./threadpool/boost/threadpool/future.hpp	/^  future(shared_ptr<detail::future_impl<Result> > const & impl)$/;"	f	class:boost::threadpool::future	access:public	signature:(shared_ptr<detail::future_impl<Result> > const & impl)
boost::threadpool::future::future_result_type	./threadpool/boost/threadpool/future.hpp	/^    typedef Result future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::future	access:public
boost::threadpool::future::get	./threadpool/boost/threadpool/future.hpp	/^   result_type get() \/\/ throw( thread::cancelation_exception, ... )$/;"	f	class:boost::threadpool::future	access:public	signature:()
boost::threadpool::future::is_cancelled	./threadpool/boost/threadpool/future.hpp	/^   bool is_cancelled() const$/;"	f	class:boost::threadpool::future	access:public	signature:() const
boost::threadpool::future::m_impl	./threadpool/boost/threadpool/future.hpp	/^  shared_ptr<detail::future_impl<Result> > m_impl;$/;"	m	class:boost::threadpool::future	access:private
boost::threadpool::future::operator ()	./threadpool/boost/threadpool/future.hpp	/^   result_type operator()() \/\/ throw( thread::cancelation_exception, ... )$/;"	f	class:boost::threadpool::future	access:public	signature:()
boost::threadpool::future::ready	./threadpool/boost/threadpool/future.hpp	/^  bool ready() const$/;"	f	class:boost::threadpool::future	access:public	signature:() const
boost::threadpool::future::result_type	./threadpool/boost/threadpool/future.hpp	/^    typedef Result const & result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::future	access:public
boost::threadpool::future::timed_wait	./threadpool/boost/threadpool/future.hpp	/^  bool timed_wait(boost::xtime const & timestamp) const$/;"	f	class:boost::threadpool::future	access:public	signature:(boost::xtime const & timestamp) const
boost::threadpool::future::wait	./threadpool/boost/threadpool/future.hpp	/^  void wait() const$/;"	f	class:boost::threadpool::future	access:public	signature:() const
boost::threadpool::immediately	./threadpool/boost/threadpool/shutdown_policies.hpp	/^  class immediately$/;"	c	namespace:boost::threadpool
boost::threadpool::immediately::shutdown	./threadpool/boost/threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::immediately	access:public	signature:(Pool& pool)
boost::threadpool::lifo_pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef thread_pool<task_func, lifo_scheduler, static_size, resize_controller, wait_for_all_tasks> lifo_pool;$/;"	t	namespace:boost::threadpool
boost::threadpool::lifo_scheduler	./threadpool/boost/threadpool/scheduling_policies.hpp	/^  class lifo_scheduler$/;"	c	namespace:boost::threadpool
boost::threadpool::lifo_scheduler::clear	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:()
boost::threadpool::lifo_scheduler::empty	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:() const
boost::threadpool::lifo_scheduler::m_container	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    std::deque<task_type> m_container;  \/\/!< Internal task container.	$/;"	m	class:boost::threadpool::lifo_scheduler	access:protected
boost::threadpool::lifo_scheduler::pop	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:()
boost::threadpool::lifo_scheduler::push	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:(task_type const & task)
boost::threadpool::lifo_scheduler::size	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:() const
boost::threadpool::lifo_scheduler::task_type	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    typedef Task task_type;  \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::lifo_scheduler	access:public
boost::threadpool::lifo_scheduler::top	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:() const
boost::threadpool::looped_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^  class looped_task_func$/;"	c	namespace:boost::threadpool
boost::threadpool::looped_task_func::looped_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^    looped_task_func(function0<bool> const & function, unsigned int const interval = 0)$/;"	f	class:boost::threadpool::looped_task_func	access:public	signature:(function0<bool> const & function, unsigned int const interval = 0)
boost::threadpool::looped_task_func::m_break_ns	./threadpool/boost/threadpool/task_adaptors.hpp	/^    unsigned int m_break_ns;             \/\/!< Duration of breaks in nano seconds.$/;"	m	class:boost::threadpool::looped_task_func	access:private
boost::threadpool::looped_task_func::m_break_s	./threadpool/boost/threadpool/task_adaptors.hpp	/^    unsigned int m_break_s;              \/\/!< Duration of breaks in seconds.$/;"	m	class:boost::threadpool::looped_task_func	access:private
boost::threadpool::looped_task_func::m_function	./threadpool/boost/threadpool/task_adaptors.hpp	/^    function0<bool> m_function;   \/\/!< The task's function.$/;"	m	class:boost::threadpool::looped_task_func	access:private
boost::threadpool::looped_task_func::operator ()	./threadpool/boost/threadpool/task_adaptors.hpp	/^    void operator() (void) const$/;"	f	class:boost::threadpool::looped_task_func	access:public	signature:(void) const
boost::threadpool::looped_task_func::result_type	./threadpool/boost/threadpool/task_adaptors.hpp	/^    typedef void result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::looped_task_func	access:public
boost::threadpool::pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef fifo_pool pool;$/;"	t	namespace:boost::threadpool
boost::threadpool::prio_pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef thread_pool<prio_task_func, prio_scheduler, static_size, resize_controller, wait_for_all_tasks> prio_pool;$/;"	t	namespace:boost::threadpool
boost::threadpool::prio_scheduler	./threadpool/boost/threadpool/scheduling_policies.hpp	/^  class prio_scheduler$/;"	c	namespace:boost::threadpool
boost::threadpool::prio_scheduler::clear	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:()
boost::threadpool::prio_scheduler::empty	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:() const
boost::threadpool::prio_scheduler::m_container	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    std::priority_queue<task_type> m_container;  \/\/!< Internal task container.$/;"	m	class:boost::threadpool::prio_scheduler	access:protected
boost::threadpool::prio_scheduler::pop	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:()
boost::threadpool::prio_scheduler::push	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:(task_type const & task)
boost::threadpool::prio_scheduler::size	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:() const
boost::threadpool::prio_scheduler::task_type	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    typedef Task task_type; \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::prio_scheduler	access:public
boost::threadpool::prio_scheduler::top	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:() const
boost::threadpool::prio_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^  class prio_task_func$/;"	c	namespace:boost::threadpool
boost::threadpool::prio_task_func::m_function	./threadpool/boost/threadpool/task_adaptors.hpp	/^    task_func m_function;     \/\/!< The task's function.$/;"	m	class:boost::threadpool::prio_task_func	access:private
boost::threadpool::prio_task_func::m_priority	./threadpool/boost/threadpool/task_adaptors.hpp	/^    unsigned int m_priority;  \/\/!< The priority of the task's function.$/;"	m	class:boost::threadpool::prio_task_func	access:private
boost::threadpool::prio_task_func::operator ()	./threadpool/boost/threadpool/task_adaptors.hpp	/^    void operator() (void) const$/;"	f	class:boost::threadpool::prio_task_func	access:public	signature:(void) const
boost::threadpool::prio_task_func::operator <	./threadpool/boost/threadpool/task_adaptors.hpp	/^    bool operator< (const prio_task_func& rhs) const$/;"	f	class:boost::threadpool::prio_task_func	access:public	signature:(const prio_task_func& rhs) const
boost::threadpool::prio_task_func::prio_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^    prio_task_func(unsigned int const priority, task_func const & function)$/;"	f	class:boost::threadpool::prio_task_func	access:public	signature:(unsigned int const priority, task_func const & function)
boost::threadpool::prio_task_func::result_type	./threadpool/boost/threadpool/task_adaptors.hpp	/^    typedef void result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::prio_task_func	access:public
boost::threadpool::resize_controller	./threadpool/boost/threadpool/size_policies.hpp	/^  class resize_controller$/;"	c	namespace:boost::threadpool
boost::threadpool::resize_controller::m_policy	./threadpool/boost/threadpool/size_policies.hpp	/^    reference_wrapper<size_policy_type> m_policy;$/;"	m	class:boost::threadpool::resize_controller	access:private
boost::threadpool::resize_controller::m_pool	./threadpool/boost/threadpool/size_policies.hpp	/^    shared_ptr<Pool> m_pool;                           \/\/!< to make sure that the pool is alive (the policy pointer is valid) as long as the controller exists$/;"	m	class:boost::threadpool::resize_controller	access:private
boost::threadpool::resize_controller::resize	./threadpool/boost/threadpool/size_policies.hpp	/^    bool resize(size_t worker_count)$/;"	f	class:boost::threadpool::resize_controller	access:public	signature:(size_t worker_count)
boost::threadpool::resize_controller::resize_controller	./threadpool/boost/threadpool/size_policies.hpp	/^    resize_controller(size_policy_type& policy, shared_ptr<Pool> pool)$/;"	f	class:boost::threadpool::resize_controller	access:public	signature:(size_policy_type& policy, shared_ptr<Pool> pool)
boost::threadpool::resize_controller::size_policy_type	./threadpool/boost/threadpool/size_policies.hpp	/^    typedef typename Pool::size_policy_type size_policy_type;$/;"	t	class:boost::threadpool::resize_controller	access:private
boost::threadpool::schedule	./threadpool/boost/threadpool/future.hpp	/^schedule(Pool& pool, const Function& task)$/;"	f	namespace:boost::threadpool	signature:(Pool& pool, const Function& task)
boost::threadpool::schedule	./threadpool/boost/threadpool/pool_adaptors.hpp	/^    bool schedule(Pool& pool, shared_ptr<Runnable> const & obj)$/;"	f	namespace:boost::threadpool	signature:(Pool& pool, shared_ptr<Runnable> const & obj)
boost::threadpool::schedule	./threadpool/boost/threadpool/pool_adaptors.hpp	/^    schedule(Pool& pool, typename Pool::task_type const & task)$/;"	f	namespace:boost::threadpool	signature:(Pool& pool, typename Pool::task_type const & task)
boost::threadpool::schedule	./threadpool/boost/threadpool/pool_adaptors.hpp	/^    schedule(shared_ptr<Pool> const pool, typename Pool::task_type const & task)$/;"	f	namespace:boost::threadpool	signature:(shared_ptr<Pool> const pool, typename Pool::task_type const & task)
boost::threadpool::static_size	./threadpool/boost/threadpool/size_policies.hpp	/^  class static_size$/;"	c	namespace:boost::threadpool
boost::threadpool::static_size::init	./threadpool/boost/threadpool/size_policies.hpp	/^    static void init(Pool& pool, size_t const worker_count)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(Pool& pool, size_t const worker_count)
boost::threadpool::static_size::m_pool	./threadpool/boost/threadpool/size_policies.hpp	/^    reference_wrapper<Pool volatile> m_pool;$/;"	m	class:boost::threadpool::static_size	access:private
boost::threadpool::static_size::resize	./threadpool/boost/threadpool/size_policies.hpp	/^    bool resize(size_t const worker_count)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(size_t const worker_count)
boost::threadpool::static_size::static_size	./threadpool/boost/threadpool/size_policies.hpp	/^    static_size(Pool volatile & pool)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(Pool volatile & pool)
boost::threadpool::static_size::task_finished	./threadpool/boost/threadpool/size_policies.hpp	/^    void task_finished() {}$/;"	f	class:boost::threadpool::static_size	access:public	signature:()
boost::threadpool::static_size::task_scheduled	./threadpool/boost/threadpool/size_policies.hpp	/^    void task_scheduled() {}$/;"	f	class:boost::threadpool::static_size	access:public	signature:()
boost::threadpool::static_size::worker_died_unexpectedly	./threadpool/boost/threadpool/size_policies.hpp	/^    void worker_died_unexpectedly(size_t const new_worker_count)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(size_t const new_worker_count)
boost::threadpool::task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^  typedef function0<void> task_func;$/;"	t	namespace:boost::threadpool
boost::threadpool::thread_pool	./threadpool/boost/threadpool/pool.hpp	/^  class thread_pool $/;"	c	namespace:boost::threadpool
boost::threadpool::thread_pool::active	./threadpool/boost/threadpool/pool.hpp	/^    size_t active() const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
boost::threadpool::thread_pool::clear	./threadpool/boost/threadpool/pool.hpp	/^    void clear()$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:()
boost::threadpool::thread_pool::empty	./threadpool/boost/threadpool/pool.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
boost::threadpool::thread_pool::m_core	./threadpool/boost/threadpool/pool.hpp	/^    shared_ptr<pool_core_type>          m_core; \/\/ pimpl idiom$/;"	m	class:boost::threadpool::thread_pool	access:private
boost::threadpool::thread_pool::m_shutdown_controller	./threadpool/boost/threadpool/pool.hpp	/^    shared_ptr<void>                    m_shutdown_controller; \/\/ If the last pool holding a pointer to the core is deleted the controller shuts the pool down.$/;"	m	class:boost::threadpool::thread_pool	access:private
boost::threadpool::thread_pool::pending	./threadpool/boost/threadpool/pool.hpp	/^    size_t pending() const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
boost::threadpool::thread_pool::pool_core_type	./threadpool/boost/threadpool/pool.hpp	/^                              ShutdownPolicy> pool_core_type;$/;"	t	class:boost::threadpool::thread_pool	access:private
boost::threadpool::thread_pool::schedule	./threadpool/boost/threadpool/pool.hpp	/^     bool schedule(task_type const & task)$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(task_type const & task)
boost::threadpool::thread_pool::scheduler_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef SchedulingPolicy<task_type> scheduler_type;       \/\/!< Indicates the scheduler's type.$/;"	t	class:boost::threadpool::thread_pool	access:public
boost::threadpool::thread_pool::size	./threadpool/boost/threadpool/pool.hpp	/^    size_t size()	const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
boost::threadpool::thread_pool::size_controller	./threadpool/boost/threadpool/pool.hpp	/^    size_controller_type size_controller()$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:()
boost::threadpool::thread_pool::size_controller_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef SizePolicyController<pool_core_type> size_controller_type;$/;"	t	class:boost::threadpool::thread_pool	access:public
boost::threadpool::thread_pool::size_policy_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef SizePolicy<pool_core_type> size_policy_type; $/;"	t	class:boost::threadpool::thread_pool	access:public
boost::threadpool::thread_pool::task_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef Task task_type;                                   \/\/!< Indicates the task's type.$/;"	t	class:boost::threadpool::thread_pool	access:public
boost::threadpool::thread_pool::thread_pool	./threadpool/boost/threadpool/pool.hpp	/^    thread_pool(size_t initial_threads = 0)$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(size_t initial_threads = 0)
boost::threadpool::thread_pool::wait	./threadpool/boost/threadpool/pool.hpp	/^    bool wait(xtime const & timestamp, size_t task_threshold = 0) const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(xtime const & timestamp, size_t task_threshold = 0) const
boost::threadpool::thread_pool::wait	./threadpool/boost/threadpool/pool.hpp	/^    void wait(size_t task_threshold = 0) const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(size_t task_threshold = 0) const
boost::threadpool::wait_for_active_tasks	./threadpool/boost/threadpool/shutdown_policies.hpp	/^  class wait_for_active_tasks$/;"	c	namespace:boost::threadpool
boost::threadpool::wait_for_active_tasks::shutdown	./threadpool/boost/threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::wait_for_active_tasks	access:public	signature:(Pool& pool)
boost::threadpool::wait_for_all_tasks	./threadpool/boost/threadpool/shutdown_policies.hpp	/^  class wait_for_all_tasks$/;"	c	namespace:boost::threadpool
boost::threadpool::wait_for_all_tasks::shutdown	./threadpool/boost/threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::wait_for_all_tasks	access:public	signature:(Pool& pool)
build_arithmeticops	./lockfree/boost/atomic/detail/builder.hpp	/^	build_arithmeticops() {}$/;"	f	class:boost::detail::atomic::build_arithmeticops	access:public	signature:()
build_arithmeticops	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_arithmeticops(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_arithmeticops	access:public	signature:(integral_type i)
build_arithmeticops	./lockfree/boost/atomic/detail/builder.hpp	/^class build_arithmeticops : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
build_atomic_from_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_add(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_add	access:public	signature:(typename super::integral_type i)
build_atomic_from_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_add(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_add	access:public	signature:(void)
build_atomic_from_add	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_add : public build_logicops< build_arithmeticops<Base> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
build_atomic_from_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_exchange(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_exchange	access:public	signature:(typename super::integral_type i)
build_atomic_from_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_exchange(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_exchange	access:public	signature:(void)
build_atomic_from_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_exchange : public build_logicops< build_arithmeticops< build_fetch_add<Base> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
build_atomic_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_larger_type() {}$/;"	f	class:boost::detail::atomic::build_atomic_from_larger_type	access:public	signature:()
build_atomic_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_larger_type(integral_type v) : super(v) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_larger_type	access:public	signature:(integral_type v)
build_atomic_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_larger_type : public build_atomic_from_minimal< build_base_from_larger_type<Base, Type> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_minimal
build_atomic_from_minimal	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_minimal(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_minimal	access:public	signature:(typename super::integral_type i)
build_atomic_from_minimal	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_minimal(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_minimal	access:public	signature:(void)
build_atomic_from_minimal	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_minimal : public build_logicops< build_arithmeticops< build_fetch_add< build_exchange<Base> > > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
build_atomic_from_typical	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_typical(typename super::integral_type i) : super(i) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_typical	access:public	signature:(typename super::integral_type i)
build_atomic_from_typical	./lockfree/boost/atomic/detail/builder.hpp	/^	build_atomic_from_typical(void) {}$/;"	f	class:boost::detail::atomic::build_atomic_from_typical	access:public	signature:(void)
build_atomic_from_typical	./lockfree/boost/atomic/detail/builder.hpp	/^class build_atomic_from_typical : public build_logicops< build_arithmeticops< build_const_fetch_add<Base> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_logicops
build_base_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_base_from_larger_type() {}$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:()
build_base_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^	build_base_from_larger_type(integral_type t) {store(t, memory_order_relaxed);}$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(integral_type t)
build_base_from_larger_type	./lockfree/boost/atomic/detail/builder.hpp	/^class build_base_from_larger_type {$/;"	c	namespace:boost::detail::atomic
build_const_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_const_fetch_add() {}$/;"	f	class:boost::detail::atomic::build_const_fetch_add	access:public	signature:()
build_const_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_const_fetch_add(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_const_fetch_add	access:public	signature:(integral_type i)
build_const_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^class build_const_fetch_add : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
build_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	build_exchange() {}$/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:()
build_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_exchange(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:(integral_type i)
build_exchange	./lockfree/boost/atomic/detail/builder.hpp	/^class build_exchange : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
build_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	build_fetch_add() {}$/;"	f	class:boost::detail::atomic::build_fetch_add	access:public	signature:()
build_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	explicit build_fetch_add(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_fetch_add	access:public	signature:(integral_type i)
build_fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^class build_fetch_add : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
build_logicops	./lockfree/boost/atomic/detail/builder.hpp	/^	build_logicops() {}$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:()
build_logicops	./lockfree/boost/atomic/detail/builder.hpp	/^	build_logicops(integral_type i) : Base(i) {}$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type i)
build_logicops	./lockfree/boost/atomic/detail/builder.hpp	/^class build_logicops : public Base {$/;"	c	namespace:boost::detail::atomic	inherits:Base
caching_freelist_t	./lockfree/boost/lockfree/detail/freelist.hpp	/^struct caching_freelist_t {};$/;"	s	namespace:boost::lockfree
calculate_failure_order	./lockfree/boost/atomic/detail/base.hpp	/^static inline memory_order calculate_failure_order(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
cancel	./threadpool/boost/threadpool/detail/future.hpp	/^   bool cancel() volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() volatile
cancel	./threadpool/boost/threadpool/future.hpp	/^   bool cancel()$/;"	f	class:boost::threadpool::future	access:public	signature:()
cast_unit	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    union cast_unit$/;"	u	class:boost::lockfree::detail::tagged_ptr	access:private
clear	./lockfree/boost/atomic.hpp	/^	void clear(memory_order order=memory_order_seq_cst)$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order=memory_order_seq_cst)
clear	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void clear() volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() volatile
clear	./threadpool/boost/threadpool/pool.hpp	/^    void clear()$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:()
clear	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:()
clear	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:()
clear	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:()
compare_exchange_strong	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T * desired, memory_order order=memory_order_seq_cst) volatile
compare_exchange_strong	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T *desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order order=memory_order_seq_cst) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order order=memory_order_seq_cst) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/builder.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:( integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/fallback.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:( T &expected, T desired, memory_order , memory_order ) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/interlocked.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_strong	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	bool compare_exchange_strong($/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T *desired, memory_order order=memory_order_seq_cst) volatile
compare_exchange_weak	./lockfree/boost/atomic.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::atomic	access:public	signature:( T * &expected, T *desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order order=memory_order_seq_cst) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order order=memory_order_seq_cst) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/base.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:( integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/builder.hpp	/^	bool compare_exchange_weak(integral_type &expected,$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(integral_type &expected, integral_type desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/fallback.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^        bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/interlocked.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compare_exchange_weak	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	bool compare_exchange_weak($/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:( T &expected, T desired, memory_order success_order, memory_order failure_order) volatile
compressed_ptr_t	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    typedef boost::uint64_t compressed_ptr_t;$/;"	t	class:boost::lockfree::detail::tagged_ptr	access:private
construct	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct (ArgumentType const & arg)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(ArgumentType const & arg)
construct	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
construct_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct_unsafe (ArgumentType const & arg)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(ArgumentType const & arg)
construct_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    T * construct_unsafe (void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
create_and_attach	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	  static void create_and_attach(shared_ptr<pool_type> const & pool)$/;"	f	class:boost::threadpool::detail::worker_thread	access:public	signature:(shared_ptr<pool_type> const & pool)
data	./lockfree/boost/lockfree/fifo.hpp	/^        T data;$/;"	m	struct:boost::lockfree::detail::fifo::node	access:public
deallocate	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void deallocate (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
deallocate_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void deallocate_unsafe (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (T & ret)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T & ret)
dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (T * & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(T * & ret)
dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (boost::scoped_ptr<T> & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(boost::scoped_ptr<T> & ret)
dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (boost::shared_ptr<T> & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(boost::shared_ptr<T> & ret)
dequeue	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue (std::auto_ptr<T> & ret)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(std::auto_ptr<T> & ret)
dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool dequeue (T & ret, T * buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(T & ret, T * buffer, size_t max_size)
dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool dequeue(T & ret)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T & ret)
dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue (OutputIterator it, const T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(OutputIterator it, const T * internal_buffer, size_t max_size)
dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue (T * output_buffer, size_t output_count, const T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(T * output_buffer, size_t output_count, const T * internal_buffer, size_t max_size)
dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue(OutputIterator it)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(OutputIterator it)
dequeue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t dequeue(T * ret, size_t size)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T * ret, size_t size)
dequeue_smart_ptr	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue_smart_ptr(smart_ptr & ptr)$/;"	f	class:boost::lockfree::fifo	access:private	signature:(smart_ptr & ptr)
dequeue_unsafe	./lockfree/boost/lockfree/fifo.hpp	/^    bool dequeue_unsafe (T & ret)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T & ret)
destruct	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void destruct (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
destruct_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void destruct_unsafe (T * n)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(T * n)
detail	./lockfree/boost/atomic/detail/base.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/builder.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/fallback.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/generic-cas.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/integral-casts.hpp	/^namespace boost { namespace detail { namespace atomic {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/interlocked.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/linux-arm.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^namespace detail {$/;"	n	namespace:boost
detail	./lockfree/boost/lockfree/detail/atomic.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
detail	./lockfree/boost/lockfree/detail/freelist.hpp	/^namespace detail$/;"	n	namespace:boost::lockfree
detail	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
detail	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
detail	./lockfree/boost/lockfree/fifo.hpp	/^namespace detail {$/;"	n	namespace:boost::lockfree
detail	./lockfree/boost/lockfree/ringbuffer.hpp	/^namespace detail$/;"	n	namespace:boost::lockfree
detail	./threadpool/boost/threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	./threadpool/boost/threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
died_unexpectedly	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	void died_unexpectedly()$/;"	f	class:boost::threadpool::detail::worker_thread	access:private	signature:()
disable	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	void disable()$/;"	f	class:boost::threadpool::detail::scope_guard	access:public	signature:()
empty	./lockfree/boost/lockfree/fifo.hpp	/^    bool empty(void)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void)
empty	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool empty(size_t write_index, size_t read_index)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:private	signature:(size_t write_index, size_t read_index)
empty	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool empty(void)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:public	signature:(void)
empty	./lockfree/boost/lockfree/stack.hpp	/^    bool empty(void) const$/;"	f	class:boost::lockfree::stack	access:public	signature:(void) const
empty	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool empty() const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
empty	./threadpool/boost/threadpool/pool.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
empty	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:() const
empty	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:() const
empty	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:() const
empty_controller	./threadpool/boost/threadpool/size_policies.hpp	/^    empty_controller(typename Pool::size_policy_type&, shared_ptr<Pool>) {}$/;"	f	struct:boost::threadpool::empty_controller	access:public	signature:(typename Pool::size_policy_type&, shared_ptr<Pool>)
empty_controller	./threadpool/boost/threadpool/size_policies.hpp	/^  struct empty_controller$/;"	s	namespace:boost::threadpool
enqueue	./lockfree/boost/lockfree/fifo.hpp	/^    bool enqueue(T const & t)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T const & t)
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    ConstIterator enqueue(ConstIterator begin, ConstIterator end)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(ConstIterator begin, ConstIterator end)
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    ConstIterator enqueue(ConstIterator begin, ConstIterator end, T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(ConstIterator begin, ConstIterator end, T * internal_buffer, size_t max_size)
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool enqueue(T const & t)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T const & t)
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool enqueue(T const & t, T * buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(T const & t, T * buffer, size_t max_size)
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t enqueue(T const (&t)[size])$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T const (&t)[size])
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t enqueue(T const * t, size_t size)$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(T const * t, size_t size)
enqueue	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t enqueue(const T * input_buffer, size_t input_count, T * internal_buffer, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(const T * input_buffer, size_t input_count, T * internal_buffer, size_t max_size)
enqueue_unsafe	./lockfree/boost/lockfree/fifo.hpp	/^    bool enqueue_unsafe(T const & t)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(T const & t)
exchange	./lockfree/boost/atomic.hpp	/^	T *exchange(T * replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(T * replacement, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type exchange(integral_type replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_exchange	access:public	signature:(integral_type replacement, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/fallback.hpp	/^	T exchange(T replacement, memory_order \/*order*\/=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(T replacement, memory_order =memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	T exchange(T replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T replacement, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T exchange(T r, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T r, memory_order order=memory_order_seq_cst) volatile
exchange	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	T exchange(T replacement, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(T replacement, memory_order order=memory_order_seq_cst) volatile
execute_task	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool execute_task() volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:() volatile
extract	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type extract(larger_integral_type v) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(larger_integral_type v) const volatile
extract_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static T* extract_ptr(volatile compressed_ptr_t const & i)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:private	signature:(volatile compressed_ptr_t const & i)
extract_tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static tag_t extract_tag(volatile compressed_ptr_t const & i)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:private	signature:(volatile compressed_ptr_t const & i)
fallback_atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^	explicit fallback_atomic(const T &t) {memcpy(&i, &t, sizeof(T));}$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(const T &t)
fallback_atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^	fallback_atomic(void) {}$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(void)
fallback_atomic	./lockfree/boost/atomic/detail/fallback.hpp	/^class fallback_atomic {$/;"	c	namespace:boost::detail::atomic
fence_after	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_after	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_after	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_after	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_after	./lockfree/boost/atomic/detail/linux-arm.hpp	/^static inline void fence_after(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_after_load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void fence_after_load(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_after_load	./lockfree/boost/atomic/detail/interlocked.hpp	/^static inline void fence_after_load(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_before	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_before	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_before	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_before	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fence_before	./lockfree/boost/atomic/detail/linux-arm.hpp	/^static inline void fence_before(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
fenced_compare_exchange_strong_32	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	fenced_compare_exchange_strong_32(volatile int32_t *ptr, int32_t expected, int32_t desired)$/;"	f	namespace:boost::detail::atomic	signature:(volatile int32_t *ptr, int32_t expected, int32_t desired)
fenced_compare_exchange_strong_64	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	fenced_compare_exchange_strong_64(int64_t *ptr, int64_t expected, int64_t desired)$/;"	f	namespace:boost::detail::atomic	signature:(int64_t *ptr, int64_t expected, int64_t desired)
fetch_add	./lockfree/boost/atomic.hpp	/^	T * fetch_add(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_add($/;"	f	class:boost::detail::atomic::build_const_fetch_add	access:public	signature:( integral_type c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_add($/;"	f	class:boost::detail::atomic::build_fetch_add	access:public	signature:( integral_type c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
fetch_add	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T fetch_add(T c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T c, memory_order order=memory_order_seq_cst) volatile
fetch_add_var	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:protected	signature:(T c, memory_order order) volatile
fetch_add_var	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:protected	signature:(T c, memory_order order) volatile
fetch_add_var	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:protected	signature:(T c, memory_order order) volatile
fetch_add_var	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:protected	signature:(T c, memory_order order) volatile
fetch_add_var	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_add_var(T c, memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:protected	signature:(T c, memory_order order) volatile
fetch_and	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_and(integral_type c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type c, memory_order order=memory_order_seq_cst) volatile
fetch_dec	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
fetch_dec	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
fetch_dec	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:protected	signature:(memory_order order) volatile
fetch_dec	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:protected	signature:(memory_order order) volatile
fetch_dec	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_dec(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:protected	signature:(memory_order order) volatile
fetch_inc	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:protected	signature:(memory_order order) volatile
fetch_inc	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:protected	signature:(memory_order order) volatile
fetch_inc	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:protected	signature:(memory_order order) volatile
fetch_inc	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:protected	signature:(memory_order order) volatile
fetch_inc	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	inline T fetch_inc(memory_order order) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:protected	signature:(memory_order order) volatile
fetch_or	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_or(integral_type c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type c, memory_order order=memory_order_seq_cst) volatile
fetch_sub	./lockfree/boost/atomic.hpp	/^	T * fetch_sub(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(ptrdiff_t diff, memory_order order=memory_order_seq_cst) volatile
fetch_sub	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_sub($/;"	f	class:boost::detail::atomic::build_arithmeticops	access:public	signature:( integral_type c, memory_order order=memory_order_seq_cst) volatile
fetch_xor	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type fetch_xor(integral_type c, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::build_logicops	access:public	signature:(integral_type c, memory_order order=memory_order_seq_cst) volatile
fifo	./lockfree/boost/lockfree/fifo.hpp	/^    explicit fifo(std::size_t n)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(std::size_t n)
fifo	./lockfree/boost/lockfree/fifo.hpp	/^    explicit fifo(std::size_t n):$/;"	f	class:boost::lockfree::fifo	access:public	signature:(std::size_t n)
fifo	./lockfree/boost/lockfree/fifo.hpp	/^    fifo(void)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void)
fifo	./lockfree/boost/lockfree/fifo.hpp	/^    fifo(void)$/;"	f	class:boost::lockfree::fifo	access:public	signature:(void)
fifo	./lockfree/boost/lockfree/fifo.hpp	/^class fifo:$/;"	c	namespace:boost::lockfree	inherits:detail::fifo
fifo	./lockfree/boost/lockfree/fifo.hpp	/^class fifo:$/;"	c	namespace:boost::lockfree::detail	inherits:boost::noncopyable
fifo	./lockfree/boost/lockfree/fifo.hpp	/^class fifo<T*, freelist_t, Alloc>:$/;"	c	namespace:boost::lockfree	inherits:detail::fifo
fifo_pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef thread_pool<task_func, fifo_scheduler, static_size, resize_controller, wait_for_all_tasks> fifo_pool;$/;"	t	namespace:boost::threadpool
fifo_pool_test	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void fifo_pool_test()$/;"	f	signature:()
fifo_scheduler	./threadpool/boost/threadpool/scheduling_policies.hpp	/^  class fifo_scheduler$/;"	c	namespace:boost::threadpool
fifo_t	./lockfree/boost/lockfree/fifo.hpp	/^    typedef detail::fifo<T*, freelist_t, Alloc> fifo_t;$/;"	t	class:boost::lockfree::fifo	access:private
first_task	./threadpool/libs/threadpool/quickstart/quickstart.cpp	/^void first_task()$/;"	f	signature:()
freelist_node	./lockfree/boost/lockfree/detail/freelist.hpp	/^struct freelist_node$/;"	s	namespace:boost::lockfree::detail
freelist_stack	./lockfree/boost/lockfree/detail/freelist.hpp	/^    freelist_stack (std::size_t n = 0):$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(std::size_t n = 0)
freelist_stack	./lockfree/boost/lockfree/detail/freelist.hpp	/^class freelist_stack:$/;"	c	namespace:boost::lockfree::detail	inherits:Alloc
from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint16_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint16_t t)
from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint32_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint32_t t)
from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint64_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint64_t t)
from_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline T from_integral(uint8_t t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(uint8_t t)
full_fence	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^static inline void full_fence(void)$/;"	f	namespace:boost::detail::atomic	signature:(void)
full_fence	./lockfree/boost/atomic/detail/interlocked.hpp	/^static inline void full_fence(void)$/;"	f	namespace:boost::detail::atomic	signature:(void)
function_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Function function_type;                   \/\/!< Indicates the function's type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
future	./threadpool/boost/threadpool/future.hpp	/^  future()$/;"	f	class:boost::threadpool::future	access:public	signature:()
future	./threadpool/boost/threadpool/future.hpp	/^  future(shared_ptr<detail::future_impl<Result> > const & impl)$/;"	f	class:boost::threadpool::future	access:public	signature:(shared_ptr<detail::future_impl<Result> > const & impl)
future	./threadpool/boost/threadpool/future.hpp	/^class future$/;"	c	namespace:boost::threadpool
future_impl	./threadpool/boost/threadpool/detail/future.hpp	/^  future_impl()$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:()
future_impl	./threadpool/boost/threadpool/detail/future.hpp	/^class future_impl$/;"	c	namespace:boost::threadpool::detail
future_impl_task_func	./threadpool/boost/threadpool/detail/future.hpp	/^  future_impl_task_func(function_type const & function, shared_ptr<future_type> const & future)$/;"	f	class:boost::threadpool::detail::future_impl_task_func	access:public	signature:(function_type const & function, shared_ptr<future_type> const & future)
future_impl_task_func	./threadpool/boost/threadpool/detail/future.hpp	/^class future_impl_task_func$/;"	c	namespace:boost::threadpool::detail
future_result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Result future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::detail::future_impl	access:public
future_result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef typename result_of<function_type()>::type future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
future_result_type	./threadpool/boost/threadpool/future.hpp	/^    typedef Result future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::future	access:public
future_test	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void future_test()$/;"	f	signature:()
future_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Future<future_result_type> future_type;   \/\/!< Indicates the future's type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
future_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef future_impl<future_result_type> future_type;$/;"	t	class:boost::threadpool::detail::future_impl	access:public
get	./threadpool/boost/threadpool/future.hpp	/^   result_type get() \/\/ throw( thread::cancelation_exception, ... )$/;"	f	class:boost::threadpool::future	access:public	signature:()
getSafeStr	./strutil.cxx	/^const char* StrUtil::getSafeStr(const char* data)$/;"	f	class:StrUtil	signature:(const char* data)
getSafeStr	./strutil.hxx	/^            static const char* getSafeStr(const char*);$/;"	p	class:LUtil::StrUtil	access:public	signature:(const char*)
get_base	./lockfree/boost/atomic/detail/builder.hpp	/^	Base &get_base(void) volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) volatile
get_base	./lockfree/boost/atomic/detail/builder.hpp	/^	const Base &get_base(void) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) const volatile
get_ms_diff	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^unsigned long get_ms_diff(boost::xtime& start, boost::xtime& end)$/;"	f	signature:(boost::xtime& start, boost::xtime& end)
get_offset	./lockfree/boost/atomic/detail/builder.hpp	/^	unsigned int get_offset(void) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) const volatile
get_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T * get_ptr(void) const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void) const volatile
get_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    T * get_ptr() const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const volatile
get_shift	./lockfree/boost/atomic/detail/builder.hpp	/^	unsigned int get_shift(void) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(void) const volatile
get_tag	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tag_t get_tag() const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const volatile
get_tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    tag_t get_tag() const volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const volatile
head_	./lockfree/boost/lockfree/fifo.hpp	/^    atomic<tagged_node_ptr> head_;$/;"	m	class:boost::lockfree::detail::fifo	access:private
i	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type i;$/;"	m	class:boost::detail::atomic::build_base_from_larger_type	access:private
i	./lockfree/boost/atomic/detail/fallback.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::fallback_atomic	access:protected
i	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_alpha_32	access:private
i	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_alpha_64	access:private
i	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_arm_4	access:private
i	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_ppc_32	access:private
i	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_ppc_64	access:private
i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_16	access:private
i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_32	access:private
i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_64	access:private
i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_x86_8	access:private
i	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T i;$/;"	m	class:boost::detail::atomic::atomic_x86_128	access:private
i	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	mutable int32_t i;$/;"	m	class:boost::detail::atomic::atomic_generic_cas32	access:private
i	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_interlocked_32	access:private
i	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	T i;$/;"	m	class:boost::detail::atomic::atomic_linux_arm_4	access:private
image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  image() : m_content(0)	{}$/;"	f	class:image	access:public	signature:()
image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  image(const image& src)$/;"	f	class:image	access:public	signature:(const image& src)
image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  image(int content) : m_content(content)	{}$/;"	f	class:image	access:public	signature:(int content)
image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^class image$/;"	c	file:
image::image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  image() : m_content(0)	{}$/;"	f	class:image	access:public	signature:()
image::image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  image(const image& src)$/;"	f	class:image	access:public	signature:(const image& src)
image::image	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  image(int content) : m_content(content)	{}$/;"	f	class:image	access:public	signature:(int content)
image::m_content	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  int m_content;	\/\/ represents image data in this example$/;"	m	class:image	file:	access:protected
image::operator <	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  bool operator<(const image& l) const$/;"	f	class:image	access:public	signature:(const image& l) const
immediately	./threadpool/boost/threadpool/shutdown_policies.hpp	/^  class immediately$/;"	c	namespace:boost::threadpool
info_arch	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
init	./logger.cxx	/^void Logger::init(LOG_LEVEL level,$/;"	f	class:Logger	signature:(LOG_LEVEL level, const char* fileName)
init	./logger.hxx	/^            static void init(LOG_LEVEL level,$/;"	p	class:LUtil::Logger	access:public	signature:(LOG_LEVEL level, const char* fileName)
init	./threadpool/boost/threadpool/size_policies.hpp	/^    static void init(Pool& pool, size_t const worker_count)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(Pool& pool, size_t const worker_count)
initialize	./lockfree/boost/lockfree/fifo.hpp	/^    void initialize(void)$/;"	f	class:boost::lockfree::detail::fifo	access:private	signature:(void)
insert	./lockfree/boost/atomic/detail/builder.hpp	/^	larger_integral_type insert(larger_integral_type target, integral_type source) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:private	signature:(larger_integral_type target, integral_type source) const volatile
instance	./logger.hxx	/^            static log4cplus::Logger& instance()$/;"	f	class:LUtil::Logger	access:public	signature:()
integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::internal_atomic	access:public
integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::platform_atomic	access:protected
integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:protected
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef Type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_larger_type	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef Type integral_type;$/;"	t	class:boost::detail::atomic::build_base_from_larger_type	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_arithmeticops	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_const_fetch_add	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_exchange	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_fetch_add	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_logicops	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_add	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_exchange	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_minimal	access:public
integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename super::integral_type integral_type;$/;"	t	class:boost::detail::atomic::build_atomic_from_typical	access:public
integral_type	./lockfree/boost/atomic/detail/fallback.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::fallback_atomic	access:protected
integral_type	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_alpha_32	access:public
integral_type	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_alpha_64	access:public
integral_type	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_arm_4	access:public
integral_type	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_ppc_32	access:public
integral_type	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_ppc_64	access:public
integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_16	access:protected
integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_32	access:protected
integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_64	access:protected
integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_8	access:protected
integral_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_x86_128	access:protected
integral_type	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_generic_cas32	access:public
integral_type	./lockfree/boost/atomic/detail/interlocked.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_interlocked_32	access:public
integral_type	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef T integral_type;$/;"	t	class:boost::detail::atomic::atomic_linux_arm_4	access:public
internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	explicit internal_atomic(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(T v)
internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	internal_atomic() {}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:()
internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	internal_atomic(const internal_atomic &);$/;"	p	class:boost::detail::atomic::internal_atomic	access:private	signature:(const internal_atomic &)
internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^class internal_atomic<T, Size, int> : private detail::atomic::platform_atomic_integral<T> {$/;"	c	namespace:boost::detail::atomic	inherits:detail::atomic::platform_atomic_integral
internal_atomic	./lockfree/boost/atomic/detail/base.hpp	/^class internal_atomic<T, Size, void> : private detail::atomic::platform_atomic<T> {$/;"	c	namespace:boost::detail::atomic	inherits:detail::atomic::platform_atomic
is_cancelled	./threadpool/boost/threadpool/detail/future.hpp	/^   bool is_cancelled() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
is_cancelled	./threadpool/boost/threadpool/future.hpp	/^   bool is_cancelled() const$/;"	f	class:boost::threadpool::future	access:public	signature:() const
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<char> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed char> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed int> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed long long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed short> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned char> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned int> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned short> {typedef int test;};$/;"	s	namespace:boost::detail::atomic
is_integral_type	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<typename T> struct is_integral_type {typedef void test;};$/;"	s	namespace:boost::detail::atomic
is_lock_free	./lockfree/boost/atomic/detail/builder.hpp	/^	bool is_lock_free(void)$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(void)
is_lock_free	./lockfree/boost/atomic/detail/fallback.hpp	/^	bool is_lock_free(void) const volatile {return false;}$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/interlocked.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	bool is_lock_free(void) const volatile {return true;}$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(void) const volatile
is_lock_free	./lockfree/boost/lockfree/detail/freelist.hpp	/^    bool is_lock_free(void) const$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void) const
is_lock_free	./lockfree/boost/lockfree/fifo.hpp	/^    bool is_lock_free (void) const$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void) const
is_lock_free	./lockfree/boost/lockfree/ringbuffer.hpp	/^    bool is_lock_free(void) const$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:public	signature:(void) const
is_lock_free	./lockfree/boost/lockfree/stack.hpp	/^    bool is_lock_free (void) const$/;"	f	class:boost::lockfree::stack	access:public	signature:(void) const
join	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	  void join()$/;"	f	class:boost::threadpool::detail::worker_thread	access:public	signature:()
kernel_cmpxchg_t	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef int (kernel_cmpxchg_t)(T oldval, T newval, volatile T *ptr);$/;"	t	class:boost::detail::atomic::atomic_linux_arm_4	access:private
kernel_dmb_t	./lockfree/boost/atomic/detail/linux-arm.hpp	/^typedef void (kernel_dmb_t)(void);$/;"	t	namespace:boost::detail::atomic
larger_integral_type	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef typename Base::integral_type larger_integral_type;$/;"	t	class:boost::detail::atomic::build_base_from_larger_type	access:private
lifo_pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef thread_pool<task_func, lifo_scheduler, static_size, resize_controller, wait_for_all_tasks> lifo_pool;$/;"	t	namespace:boost::threadpool
lifo_pool_test	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void lifo_pool_test()$/;"	f	signature:()
lifo_scheduler	./threadpool/boost/threadpool/scheduling_policies.hpp	/^  class lifo_scheduler$/;"	c	namespace:boost::threadpool
likely	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^    inline bool likely(bool expr)$/;"	f	namespace:boost::lockfree	signature:(bool expr)
load	./lockfree/boost/atomic.hpp	/^	T *load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::atomic	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/builder.hpp	/^	integral_type load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/fallback.hpp	/^	T load(memory_order \/*order*\/=memory_order_seq_cst) volatile const$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(memory_order =memory_order_seq_cst) volatile const
load	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	T load(memory_order order=memory_order_seq_cst) volatile const$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(memory_order order=memory_order_seq_cst) volatile const
load	./lockfree/boost/atomic/detail/interlocked.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
load	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	T load(memory_order order=memory_order_seq_cst) const volatile$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(memory_order order=memory_order_seq_cst) const volatile
lockfree	./lockfree/boost/lockfree/detail/atomic.hpp	/^namespace lockfree {$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^namespace lockfree$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/detail/freelist.hpp	/^namespace lockfree$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^namespace lockfree {$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^namespace lockfree {$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/fifo.hpp	/^namespace lockfree {$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/ringbuffer.hpp	/^namespace lockfree$/;"	n	namespace:boost
lockfree	./lockfree/boost/lockfree/stack.hpp	/^namespace lockfree {$/;"	n	namespace:boost
locking_ptr	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    locking_ptr(volatile T& obj, const volatile Mutex& mtx)$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:(volatile T& obj, const volatile Mutex& mtx)
locking_ptr	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^  class locking_ptr $/;"	c	namespace:boost::threadpool::detail	inherits:noncopyable
looped_task	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^bool looped_task()$/;"	f	signature:()
looped_task	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^bool looped_task()$/;"	f	signature:()
looped_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^    looped_task_func(function0<bool> const & function, unsigned int const interval = 0)$/;"	f	class:boost::threadpool::looped_task_func	access:public	signature:(function0<bool> const & function, unsigned int const interval = 0)
looped_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^  class looped_task_func$/;"	c	namespace:boost::threadpool
loops	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^int loops = 0;$/;"	v
loops	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^int loops = 0;$/;"	v
m_active_worker_count	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    volatile size_t m_active_worker_count;$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_break_ns	./threadpool/boost/threadpool/task_adaptors.hpp	/^    unsigned int m_break_ns;             \/\/!< Duration of breaks in nano seconds.$/;"	m	class:boost::threadpool::looped_task_func	access:private
m_break_s	./threadpool/boost/threadpool/task_adaptors.hpp	/^    unsigned int m_break_s;              \/\/!< Duration of breaks in seconds.$/;"	m	class:boost::threadpool::looped_task_func	access:private
m_condition_ready	./threadpool/boost/threadpool/detail/future.hpp	/^    mutable condition m_condition_ready;	$/;"	m	class:boost::threadpool::detail::future_impl	access:private
m_container	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    std::deque<task_type> m_container;  \/\/!< Internal task container.	$/;"	m	class:boost::threadpool::fifo_scheduler	access:protected
m_container	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    std::deque<task_type> m_container;  \/\/!< Internal task container.	$/;"	m	class:boost::threadpool::lifo_scheduler	access:protected
m_container	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    std::priority_queue<task_type> m_container;  \/\/!< Internal task container.$/;"	m	class:boost::threadpool::prio_scheduler	access:protected
m_content	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  int m_content;	\/\/ represents image data in this example$/;"	m	class:image	file:	access:protected
m_core	./threadpool/boost/threadpool/pool.hpp	/^    shared_ptr<pool_core_type>          m_core; \/\/ pimpl idiom$/;"	m	class:boost::threadpool::thread_pool	access:private
m_data	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  boost::shared_array<T> m_data;$/;"	m	class:merge_job	file:	access:protected
m_executing	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile bool m_executing;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
m_function	./threadpool/boost/threadpool/detail/future.hpp	/^  function_type             m_function;$/;"	m	class:boost::threadpool::detail::future_impl_task_func	access:private
m_function	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	function0<void> const m_function;$/;"	m	class:boost::threadpool::detail::scope_guard	access:private
m_function	./threadpool/boost/threadpool/task_adaptors.hpp	/^    function0<bool> m_function;   \/\/!< The task's function.$/;"	m	class:boost::threadpool::looped_task_func	access:private
m_function	./threadpool/boost/threadpool/task_adaptors.hpp	/^    task_func m_function;     \/\/!< The task's function.$/;"	m	class:boost::threadpool::prio_task_func	access:private
m_future	./threadpool/boost/threadpool/detail/future.hpp	/^  shared_ptr<future_type>   m_future;$/;"	m	class:boost::threadpool::detail::future_impl_task_func	access:private
m_impl	./threadpool/boost/threadpool/future.hpp	/^  shared_ptr<detail::future_impl<Result> > m_impl;$/;"	m	class:boost::threadpool::future	access:private
m_is_active	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	bool                  m_is_active;$/;"	m	class:boost::threadpool::detail::scope_guard	access:private
m_is_cancelled	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile bool m_is_cancelled;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
m_length	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  unsigned int m_length;$/;"	m	class:merge_job	file:	access:protected
m_monitor	./threadpool/boost/threadpool/detail/future.hpp	/^    mutable mutex m_monitor;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
m_monitor	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    mutable recursive_mutex  m_monitor;$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_mutex	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    Mutex & m_mutex;              \/\/!< Mutex is used for scoped locking.$/;"	m	class:boost::threadpool::detail::locking_ptr	access:private
m_obj	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    T* m_obj;                     \/\/!< The instance pointer. $/;"	m	class:boost::threadpool::detail::locking_ptr	access:private
m_policy	./threadpool/boost/threadpool/size_policies.hpp	/^    reference_wrapper<size_policy_type> m_policy;$/;"	m	class:boost::threadpool::resize_controller	access:private
m_pool	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    shared_ptr<pool_type>      m_pool;     \/\/!< Pointer to the pool which created the worker.$/;"	m	class:boost::threadpool::detail::worker_thread	access:private
m_pool	./threadpool/boost/threadpool/size_policies.hpp	/^    reference_wrapper<Pool volatile> m_pool;$/;"	m	class:boost::threadpool::static_size	access:private
m_pool	./threadpool/boost/threadpool/size_policies.hpp	/^    shared_ptr<Pool> m_pool;                           \/\/!< to make sure that the pool is alive (the policy pointer is valid) as long as the controller exists$/;"	m	class:boost::threadpool::resize_controller	access:private
m_pool	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^  pool m_pool;$/;"	m	class:CTest	file:	access:private
m_position	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  unsigned int m_position;$/;"	m	class:merge_job	file:	access:protected
m_priority	./threadpool/boost/threadpool/task_adaptors.hpp	/^    unsigned int m_priority;  \/\/!< The priority of the task's function.$/;"	m	class:boost::threadpool::prio_task_func	access:private
m_ready	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile bool m_ready;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
m_result	./threadpool/boost/threadpool/detail/future.hpp	/^    volatile future_result_type m_result;$/;"	m	class:boost::threadpool::detail::future_impl	access:private
m_scheduler	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    scheduler_type  m_scheduler;$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_shutdown_controller	./threadpool/boost/threadpool/pool.hpp	/^    shared_ptr<void>                    m_shutdown_controller; \/\/ If the last pool holding a pointer to the core is deleted the controller shuts the pool down.$/;"	m	class:boost::threadpool::thread_pool	access:private
m_size_policy	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    scoped_ptr<size_policy_type> m_size_policy; \/\/ is never null$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_target_worker_count	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    volatile size_t m_target_worker_count;	$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_task_or_terminate_workers_event	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    mutable condition m_task_or_terminate_workers_event;  \/\/ Task is available OR total worker count should be reduced.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_terminate_all_workers	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool  m_terminate_all_workers;								\/\/ Indicates if termination of all workers was triggered.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_terminated_workers	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    std::vector<shared_ptr<worker_type> > m_terminated_workers; \/\/ List of workers which are terminated but not fully destructed.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_thread	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    shared_ptr<boost::thread>  m_thread;   \/\/!< Pointer to the thread which executes the run loop.$/;"	m	class:boost::threadpool::detail::worker_thread	access:private
m_worker_count	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    volatile size_t m_worker_count;	$/;"	m	class:boost::threadpool::detail::pool_core	access:private
m_worker_idle_or_terminated_event	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    mutable condition m_worker_idle_or_terminated_event;	\/\/ A worker is idle or was terminated.$/;"	m	class:boost::threadpool::detail::pool_core	access:private
main	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	./CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	./CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	signature:(int argc, char* argv[])
main	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^int main (int argc, char * const argv[]) $/;"	f	signature:(int argc, char * const argv[])
main	./threadpool/libs/threadpool/quickstart/quickstart.cpp	/^int main(int argc,char *argv[])$/;"	f	signature:(int argc,char *argv[])
main	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^int main (int , char * const []) $/;"	f	signature:(int , char * const [])
main	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^int main (int , char * const []) $/;"	f	signature:(int , char * const [])
max_size_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    size_t max_size_;$/;"	m	class:boost::lockfree::ringbuffer	access:private
memory_order	./lockfree/boost/memory_order.hpp	/^enum memory_order$/;"	g	namespace:boost
memory_order_acq_rel	./lockfree/boost/memory_order.hpp	/^    memory_order_acq_rel = 3, \/\/ acquire | release$/;"	e	enum:boost::memory_order
memory_order_acquire	./lockfree/boost/memory_order.hpp	/^    memory_order_acquire = 1,$/;"	e	enum:boost::memory_order
memory_order_consume	./lockfree/boost/memory_order.hpp	/^    memory_order_consume = 8$/;"	e	enum:boost::memory_order
memory_order_relaxed	./lockfree/boost/memory_order.hpp	/^    memory_order_relaxed = 0,$/;"	e	enum:boost::memory_order
memory_order_release	./lockfree/boost/memory_order.hpp	/^    memory_order_release = 2,$/;"	e	enum:boost::memory_order
memory_order_seq_cst	./lockfree/boost/memory_order.hpp	/^    memory_order_seq_cst = 7, \/\/ acq_rel | 4$/;"	e	enum:boost::memory_order
merge_job	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  merge_job(boost::shared_array<T> data, unsigned int position, unsigned int length) $/;"	f	class:merge_job	access:public	signature:(boost::shared_array<T> data, unsigned int position, unsigned int length)
merge_job	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^class merge_job$/;"	c	file:
merge_job::m_data	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  boost::shared_array<T> m_data;$/;"	m	class:merge_job	file:	access:protected
merge_job::m_length	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  unsigned int m_length;$/;"	m	class:merge_job	file:	access:protected
merge_job::m_position	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  unsigned int m_position;$/;"	m	class:merge_job	file:	access:protected
merge_job::merge_job	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  merge_job(boost::shared_array<T> data, unsigned int position, unsigned int length) $/;"	f	class:merge_job	access:public	signature:(boost::shared_array<T> data, unsigned int position, unsigned int length)
merge_job::run	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  void run()$/;"	f	class:merge_job	access:public	signature:()
next	./lockfree/boost/lockfree/detail/freelist.hpp	/^    tagged_ptr<freelist_node> next;$/;"	m	struct:boost::lockfree::detail::freelist_node	access:public
next	./lockfree/boost/lockfree/fifo.hpp	/^        atomic<tagged_node_ptr> next;$/;"	m	struct:boost::lockfree::detail::fifo::node	access:public
next	./lockfree/boost/lockfree/stack.hpp	/^        tagged_node_ptr next;$/;"	m	struct:boost::lockfree::stack::node	access:public
next_index	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static size_t next_index(size_t arg, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(size_t arg, size_t max_size)
node	./lockfree/boost/lockfree/fifo.hpp	/^        node (void):$/;"	f	struct:boost::lockfree::detail::fifo::node	access:public	signature:(void)
node	./lockfree/boost/lockfree/fifo.hpp	/^        node(T const & v):$/;"	f	struct:boost::lockfree::detail::fifo::node	access:public	signature:(T const & v)
node	./lockfree/boost/lockfree/fifo.hpp	/^    struct BOOST_LOCKFREE_CACHELINE_ALIGNMENT node$/;"	s	class:boost::lockfree::detail::fifo	access:private
node	./lockfree/boost/lockfree/stack.hpp	/^        node(T const & v):$/;"	f	struct:boost::lockfree::stack::node	access:public	signature:(T const & v)
node	./lockfree/boost/lockfree/stack.hpp	/^    struct node$/;"	s	class:boost::lockfree::stack	access:private
node_allocator	./lockfree/boost/lockfree/fifo.hpp	/^    typedef typename Alloc::template rebind<node>::other node_allocator;$/;"	t	class:boost::lockfree::detail::fifo	access:private
node_allocator	./lockfree/boost/lockfree/stack.hpp	/^    typedef typename Alloc::template rebind<node>::other node_allocator;$/;"	t	class:boost::lockfree::stack	access:private
notEmptyOrNull	./strutil.cxx	/^bool StrUtil::notEmptyOrNull(const char* data) $/;"	f	class:StrUtil	signature:(const char* data)
notEmptyOrNull	./strutil.hxx	/^            static bool notEmptyOrNull(const char*);$/;"	p	class:LUtil::StrUtil	access:public	signature:(const char*)
operator !=	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    bool operator!= (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
operator !=	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    bool operator!= (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
operator &=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator&=(integral_type c) volatile {return fetch_and(c)&c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
operator ()	./threadpool/boost/threadpool/detail/future.hpp	/^  result_type operator()() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
operator ()	./threadpool/boost/threadpool/detail/future.hpp	/^  void operator()()$/;"	f	class:boost::threadpool::detail::future_impl_task_func	access:public	signature:()
operator ()	./threadpool/boost/threadpool/future.hpp	/^   result_type operator()() \/\/ throw( thread::cancelation_exception, ... )$/;"	f	class:boost::threadpool::future	access:public	signature:()
operator ()	./threadpool/boost/threadpool/task_adaptors.hpp	/^    void operator() (void) const$/;"	f	class:boost::threadpool::looped_task_func	access:public	signature:(void) const
operator ()	./threadpool/boost/threadpool/task_adaptors.hpp	/^    void operator() (void) const$/;"	f	class:boost::threadpool::prio_task_func	access:public	signature:(void) const
operator *	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T & operator*() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
operator *	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    T & operator*() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
operator *	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    T& operator*() const$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:() const
operator ++	./lockfree/boost/atomic.hpp	/^	T *operator++(int) volatile {return fetch_add(1);}$/;"	f	class:boost::atomic	access:public	signature:(int) volatile
operator ++	./lockfree/boost/atomic.hpp	/^	T *operator++(void) volatile {return fetch_add(1)+1;}$/;"	f	class:boost::atomic	access:public	signature:(void) volatile
operator ++	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator++(int) volatile {return fetch_add(1);}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(int) volatile
operator ++	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator++(void) volatile {return fetch_add(1)+1;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) volatile
operator +=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator+=(integral_type c) volatile {return fetch_add(c)+c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
operator --	./lockfree/boost/atomic.hpp	/^	T *operator--(int) volatile {return fetch_sub(1);}$/;"	f	class:boost::atomic	access:public	signature:(int) volatile
operator --	./lockfree/boost/atomic.hpp	/^	T *operator--(void) volatile {return fetch_sub(1)-1;}$/;"	f	class:boost::atomic	access:public	signature:(void) volatile
operator --	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator--(int) volatile {return fetch_sub(1);}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(int) volatile
operator --	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator--(void) volatile {return fetch_sub(1)-1;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) volatile
operator -=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator-=(integral_type c) volatile {return fetch_sub(c)-c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
operator ->	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T * operator->() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
operator ->	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    T * operator->() const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:() const
operator ->	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    T* operator->() const$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:() const
operator <	./threadpool/boost/threadpool/task_adaptors.hpp	/^    bool operator< (const prio_task_func& rhs) const$/;"	f	class:boost::threadpool::prio_task_func	access:public	signature:(const prio_task_func& rhs) const
operator <	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  bool operator<(const image& l) const$/;"	f	class:image	access:public	signature:(const image& l) const
operator =	./lockfree/boost/atomic.hpp	/^	T * operator=(T * v) volatile {store(v); return v;}$/;"	f	class:boost::atomic	access:public	signature:(T * v) volatile
operator =	./lockfree/boost/atomic.hpp	/^	T * operator=(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
operator =	./lockfree/boost/atomic.hpp	/^	bool operator=(bool v) volatile {store(v); return v;}	$/;"	f	class:boost::atomic	access:public	signature:(bool v) volatile
operator =	./lockfree/boost/atomic.hpp	/^	void * operator=(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
operator =	./lockfree/boost/atomic.hpp	/^	void * operator=(void * v) volatile {store(v); return v;}$/;"	f	class:boost::atomic	access:public	signature:(void * v) volatile
operator =	./lockfree/boost/atomic.hpp	/^	void operator=(const atomic &);$/;"	p	class:boost::atomic	access:private	signature:(const atomic &)
operator =	./lockfree/boost/atomic/detail/base.hpp	/^	T operator=(T v) volatile {store(v); return v;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(T v) volatile
operator =	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator=(integral_type v) volatile {store(v); return v;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type v) volatile
operator =	./lockfree/boost/atomic/detail/base.hpp	/^	void operator=(const internal_atomic &);$/;"	p	class:boost::detail::atomic::internal_atomic	access:private	signature:(const internal_atomic &)
operator =	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	T operator=(T v) volatile {store(v); return v;}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T v) volatile
operator =	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void operator= (tagged_ptr const & p)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
operator =	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void operator= (tagged_ptr const & p)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
operator ==	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    bool operator== (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
operator ==	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    bool operator== (volatile tagged_ptr const & p) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(volatile tagged_ptr const & p) const
operator T	./lockfree/boost/atomic/detail/base.hpp	/^	operator T(void) const volatile {return load();}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) const volatile
operator T	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	operator T(void) const volatile {return load();}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(void) const volatile
operator T *	./lockfree/boost/atomic.hpp	/^	operator T *(void) const volatile {return load();}$/;"	f	class:boost::atomic	access:public	signature:(void) const volatile
operator ^=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator^=(integral_type c) volatile {return fetch_xor(c)^c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
operator bool	./lockfree/boost/atomic.hpp	/^	operator bool(void) const volatile {return load();}$/;"	f	class:boost::atomic	access:public	signature:(void) const volatile
operator bool	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    operator bool(void) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void) const
operator bool	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    operator bool(void) const$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void) const
operator integral_type	./lockfree/boost/atomic/detail/base.hpp	/^	operator integral_type(void) const volatile {return load();}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(void) const volatile
operator void *	./lockfree/boost/atomic.hpp	/^	operator void *(void) const volatile {return load();}$/;"	f	class:boost::atomic	access:public	signature:(void) const volatile
operator |=	./lockfree/boost/atomic/detail/base.hpp	/^	integral_type operator|=(integral_type c) volatile {return fetch_or(c)|c;}$/;"	f	class:boost::detail::atomic::internal_atomic	access:public	signature:(integral_type c) volatile
pack_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static compressed_ptr_t pack_ptr(T * ptr, int tag)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:private	signature:(T * ptr, int tag)
padding	./lockfree/boost/lockfree/stack.hpp	/^    char padding[padding_size];$/;"	m	class:boost::lockfree::stack	access:private
padding1	./lockfree/boost/lockfree/fifo.hpp	/^    char padding1[padding_size];$/;"	m	class:boost::lockfree::detail::fifo	access:private
padding1	./lockfree/boost/lockfree/ringbuffer.hpp	/^    char padding1[padding_size]; \/* force read_index and write_index to different cache lines *\/$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
padding2	./lockfree/boost/lockfree/fifo.hpp	/^    char padding2[padding_size];$/;"	m	class:boost::lockfree::detail::fifo	access:private
padding_size	./lockfree/boost/lockfree/fifo.hpp	/^    static const int padding_size = BOOST_LOCKFREE_CACHELINE_BYTES - sizeof(tagged_node_ptr);$/;"	m	class:boost::lockfree::detail::fifo	access:private
padding_size	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static const int padding_size = BOOST_LOCKFREE_CACHELINE_BYTES - sizeof(size_t);$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
padding_size	./lockfree/boost/lockfree/stack.hpp	/^    static const int padding_size = BOOST_LOCKFREE_CACHELINE_BYTES - sizeof(tagged_node_ptr);$/;"	m	class:boost::lockfree::stack	access:private
pending	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_t pending() const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
pending	./threadpool/boost/threadpool/pool.hpp	/^    size_t pending() const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
platform_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	explicit platform_atomic(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T v)
platform_atomic	./lockfree/boost/atomic/detail/base.hpp	/^	platform_atomic() {}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:()
platform_atomic	./lockfree/boost/atomic/detail/base.hpp	/^class platform_atomic : public fallback_atomic<T> {$/;"	c	namespace:boost::detail::atomic	inherits:fallback_atomic
platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	explicit platform_atomic(T t) : super(to_integral(t))$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T t)
platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	platform_atomic() {}$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:()
platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 1> : private platform_atomic_integral<uint8_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 2> : private platform_atomic_integral<uint16_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 4> : private platform_atomic_integral<uint32_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
platform_atomic	./lockfree/boost/atomic/detail/integral-casts.hpp	/^class platform_atomic<T, 8> : private platform_atomic_integral<uint64_t> {$/;"	c	namespace:boost::detail::atomic	inherits:platform_atomic_integral
platform_atomic_address	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^typedef build_exchange<atomic_arm_4<void *> > platform_atomic_address;$/;"	t	namespace:boost::detail::atomic
platform_atomic_address	./lockfree/boost/atomic/detail/linux-arm.hpp	/^typedef atomic_linux_arm_4<void *> platform_atomic_address;$/;"	t	namespace:boost::detail::atomic
platform_atomic_integral	./lockfree/boost/atomic/detail/base.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/base.hpp	/^	platform_atomic_integral() {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:()
platform_atomic_integral	./lockfree/boost/atomic/detail/base.hpp	/^class platform_atomic_integral : public build_atomic_from_exchange<fallback_atomic<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_exchange
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_arm_4<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_arm_4<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_arm_4<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_ppc_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_ppc_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_typical<build_exchange<atomic_ppc_32<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_typical<build_exchange<atomic_ppc_64<T> > > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_typical
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 16> : public build_atomic_from_add<atomic_x86_128<T> >{$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 1> : public build_atomic_from_add<atomic_x86_8<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 2> : public build_atomic_from_add<atomic_x86_16<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_add<atomic_x86_32<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
platform_atomic_integral	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^class platform_atomic_integral<T, 8> : public build_atomic_from_add<atomic_x86_64<T> >{$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/generic-cas.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_exchange<atomic_generic_cas32<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_exchange
platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^class platform_atomic_integral<T, 1>: public build_atomic_from_larger_type<atomic_interlocked_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^class platform_atomic_integral<T, 2>: public build_atomic_from_larger_type<atomic_interlocked_32<uint32_t>, T> {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/interlocked.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_add<atomic_interlocked_32<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_add
platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	explicit platform_atomic_integral(T v) : super(v) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(T v)
platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	platform_atomic_integral(void) {}$/;"	f	class:boost::detail::atomic::platform_atomic_integral	access:public	signature:(void)
platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class platform_atomic_integral<T, 1> : public build_atomic_from_larger_type<atomic_linux_arm_4<uint32_t>, T > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class platform_atomic_integral<T, 2> : public build_atomic_from_larger_type<atomic_linux_arm_4<uint32_t>, T > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_larger_type
platform_atomic_integral	./lockfree/boost/atomic/detail/linux-arm.hpp	/^class platform_atomic_integral<T, 4> : public build_atomic_from_exchange<atomic_linux_arm_4<T> > {$/;"	c	namespace:boost::detail::atomic	inherits:build_atomic_from_exchange
platform_atomic_thread_fence	./lockfree/boost/atomic/detail/base.hpp	/^static inline void platform_atomic_thread_fence(T order);$/;"	p	namespace:boost::detail::atomic	signature:(T order)
platform_atomic_thread_fence	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
platform_atomic_thread_fence	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
platform_atomic_thread_fence	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
platform_atomic_thread_fence	./lockfree/boost/atomic/detail/integral-casts.hpp	/^static inline void platform_atomic_thread_fence(T order)$/;"	f	namespace:boost::detail::atomic	signature:(T order)
platform_atomic_thread_fence	./lockfree/boost/atomic/detail/interlocked.hpp	/^inline void platform_atomic_thread_fence(memory_order order)$/;"	f	namespace:boost::detail::atomic	signature:(memory_order order)
pool	./lockfree/boost/lockfree/fifo.hpp	/^    pool_t pool;$/;"	m	class:boost::lockfree::detail::fifo	access:private
pool	./lockfree/boost/lockfree/stack.hpp	/^    pool_t pool;$/;"	m	class:boost::lockfree::stack	access:private
pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef fifo_pool pool;$/;"	t	namespace:boost::threadpool
pool_	./lockfree/boost/lockfree/detail/freelist.hpp	/^    atomic<tagged_node_ptr> pool_;$/;"	m	class:boost::lockfree::detail::freelist_stack	access:private
pool_core	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    pool_core()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
pool_core	./threadpool/boost/threadpool/detail/pool_core.hpp	/^  class pool_core$/;"	c	namespace:boost::threadpool::detail	inherits:enable_shared_from_this,noncopyable
pool_core_type	./threadpool/boost/threadpool/pool.hpp	/^                              ShutdownPolicy> pool_core_type;$/;"	t	class:boost::threadpool::thread_pool	access:private
pool_t	./lockfree/boost/lockfree/fifo.hpp	/^                                     >::type pool_t;$/;"	t	class:boost::lockfree::detail::fifo	access:private
pool_t	./lockfree/boost/lockfree/stack.hpp	/^                                     >::type pool_t;$/;"	t	class:boost::lockfree::stack	access:private
pool_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^                      ShutdownPolicy > pool_type;           \/\/!< Indicates the thread pool's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
pool_type	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    typedef Pool pool_type;         	   \/\/!< Indicates the pool's type.$/;"	t	class:boost::threadpool::detail::worker_thread	access:public
pop	./lockfree/boost/lockfree/stack.hpp	/^    bool pop(T & ret)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T & ret)
pop	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:()
pop	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:()
pop	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:()
pop_unsafe	./lockfree/boost/lockfree/stack.hpp	/^    bool pop_unsafe(T & ret)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T & ret)
print	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^void print(string text)$/;"	f	signature:(string text)
print	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void print(string text)$/;"	f	signature:(string text)
print	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^void print(string text)$/;"	f	signature:(string text)
prio_pool	./threadpool/boost/threadpool/pool.hpp	/^  typedef thread_pool<prio_task_func, prio_scheduler, static_size, resize_controller, wait_for_all_tasks> prio_pool;$/;"	t	namespace:boost::threadpool
prio_pool_test	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void prio_pool_test()$/;"	f	signature:()
prio_scheduler	./threadpool/boost/threadpool/scheduling_policies.hpp	/^  class prio_scheduler$/;"	c	namespace:boost::threadpool
prio_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^    prio_task_func(unsigned int const priority, task_func const & function)$/;"	f	class:boost::threadpool::prio_task_func	access:public	signature:(unsigned int const priority, task_func const & function)
prio_task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^  class prio_task_func$/;"	c	namespace:boost::threadpool
ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    T * ptr;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:protected
ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    compressed_ptr_t ptr;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:protected
ptr_mask	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static const compressed_ptr_t ptr_mask = 0xffffffffffff; \/\/(1L<<48L)-1;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:private
push	./lockfree/boost/lockfree/stack.hpp	/^    bool push(T const & v)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T const & v)
push	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:(task_type const & task)
push	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:(task_type const & task)
push	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:(task_type const & task)
push_unsafe	./lockfree/boost/lockfree/stack.hpp	/^    bool push_unsafe(T const & v)$/;"	f	class:boost::lockfree::stack	access:public	signature:(T const & v)
read_available	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static size_t read_available(size_t write_index, size_t read_index, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(size_t write_index, size_t read_index, size_t max_size)
read_index_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    atomic<size_t> read_index_;$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
ready	./threadpool/boost/threadpool/detail/future.hpp	/^  bool ready() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
ready	./threadpool/boost/threadpool/future.hpp	/^  bool ready() const$/;"	f	class:boost::threadpool::future	access:public	signature:() const
reserve	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void reserve (std::size_t count)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(std::size_t count)
reserve	./lockfree/boost/lockfree/fifo.hpp	/^    void reserve(std::size_t n)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(std::size_t n)
reserve	./lockfree/boost/lockfree/stack.hpp	/^    void reserve(std::size_t n)$/;"	f	class:boost::lockfree::stack	access:public	signature:(std::size_t n)
reserve_unsafe	./lockfree/boost/lockfree/detail/freelist.hpp	/^    void reserve_unsafe (std::size_t count)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(std::size_t count)
reserve_unsafe	./lockfree/boost/lockfree/fifo.hpp	/^    void reserve_unsafe(std::size_t n)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(std::size_t n)
reserve_unsafe	./lockfree/boost/lockfree/stack.hpp	/^    void reserve_unsafe(std::size_t n)$/;"	f	class:boost::lockfree::stack	access:public	signature:(std::size_t n)
reset	./lockfree/boost/lockfree/ringbuffer.hpp	/^    void reset(void)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:public	signature:(void)
resize	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool resize(size_t const worker_count) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(size_t const worker_count) volatile
resize	./threadpool/boost/threadpool/size_policies.hpp	/^    bool resize(size_t const worker_count)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(size_t const worker_count)
resize	./threadpool/boost/threadpool/size_policies.hpp	/^    bool resize(size_t worker_count)$/;"	f	class:boost::threadpool::resize_controller	access:public	signature:(size_t worker_count)
resize_controller	./threadpool/boost/threadpool/size_policies.hpp	/^    resize_controller(size_policy_type& policy, shared_ptr<Pool> pool)$/;"	f	class:boost::threadpool::resize_controller	access:public	signature:(size_policy_type& policy, shared_ptr<Pool> pool)
resize_controller	./threadpool/boost/threadpool/size_policies.hpp	/^  class resize_controller$/;"	c	namespace:boost::threadpool
result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef Result const & result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::detail::future_impl	access:public
result_type	./threadpool/boost/threadpool/detail/future.hpp	/^  typedef void result_type;                         \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func	access:public
result_type	./threadpool/boost/threadpool/future.hpp	/^    typedef Result const & result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::future	access:public
result_type	./threadpool/boost/threadpool/task_adaptors.hpp	/^    typedef void result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::looped_task_func	access:public
result_type	./threadpool/boost/threadpool/task_adaptors.hpp	/^    typedef void result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::prio_task_func	access:public
ringbuffer	./lockfree/boost/lockfree/ringbuffer.hpp	/^    explicit ringbuffer(size_t max_size):$/;"	f	class:boost::lockfree::ringbuffer	access:public	signature:(size_t max_size)
ringbuffer	./lockfree/boost/lockfree/ringbuffer.hpp	/^class ringbuffer:$/;"	c	namespace:boost::lockfree	inherits:detail::ringbuffer_base
ringbuffer	./lockfree/boost/lockfree/ringbuffer.hpp	/^class ringbuffer<T, 0>:$/;"	c	namespace:boost::lockfree	inherits:detail::ringbuffer_base
ringbuffer_base	./lockfree/boost/lockfree/ringbuffer.hpp	/^    ringbuffer_base(void):$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(void)
ringbuffer_base	./lockfree/boost/lockfree/ringbuffer.hpp	/^class ringbuffer_base:$/;"	c	namespace:boost::lockfree::detail	inherits:boost::noncopyable
run	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^	  void run()$/;"	f	class:boost::threadpool::detail::worker_thread	access:public	signature:()
run	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^  void run()$/;"	f	class:merge_job	access:public	signature:()
sEmpty	./strutil.hxx	/^            static std::string sEmpty;$/;"	m	class:LUtil::StrUtil	access:public
sLogger	./logger.cxx	/^log4cplus::Logger Logger::sLogger = log4cplus::Logger::getInstance(LOGGER_NAME);$/;"	m	class:Logger	file:
sLogger	./logger.hxx	/^            static log4cplus::Logger sLogger;$/;"	m	class:LUtil::Logger	access:private
schedule	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool schedule(task_type const & task) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:(task_type const & task) volatile
schedule	./threadpool/boost/threadpool/future.hpp	/^schedule(Pool& pool, const Function& task)$/;"	f	namespace:boost::threadpool	signature:(Pool& pool, const Function& task)
schedule	./threadpool/boost/threadpool/pool.hpp	/^     bool schedule(task_type const & task)$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(task_type const & task)
schedule	./threadpool/boost/threadpool/pool_adaptors.hpp	/^    bool schedule(Pool& pool, shared_ptr<Runnable> const & obj)$/;"	f	namespace:boost::threadpool	signature:(Pool& pool, shared_ptr<Runnable> const & obj)
schedule	./threadpool/boost/threadpool/pool_adaptors.hpp	/^    schedule(Pool& pool, typename Pool::task_type const & task)$/;"	f	namespace:boost::threadpool	signature:(Pool& pool, typename Pool::task_type const & task)
schedule	./threadpool/boost/threadpool/pool_adaptors.hpp	/^    schedule(shared_ptr<Pool> const pool, typename Pool::task_type const & task)$/;"	f	namespace:boost::threadpool	signature:(shared_ptr<Pool> const pool, typename Pool::task_type const & task)
scheduler_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef SchedulingPolicy<task_type> scheduler_type;     \/\/!< Indicates the scheduler's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
scheduler_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef SchedulingPolicy<task_type> scheduler_type;       \/\/!< Indicates the scheduler's type.$/;"	t	class:boost::threadpool::thread_pool	access:public
scope_guard	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	scope_guard(function0<void> const & call_on_exit)$/;"	f	class:boost::threadpool::detail::scope_guard	access:public	signature:(function0<void> const & call_on_exit)
scope_guard	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^class scope_guard$/;"	c	namespace:boost::threadpool::detail	inherits:boost::noncopyable
second_task	./threadpool/libs/threadpool/quickstart/quickstart.cpp	/^void second_task()$/;"	f	signature:()
set	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void set(T * p, tag_t t)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t)
set	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void set(T * p, tag_t t)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t)
set_execution_status	./threadpool/boost/threadpool/detail/future.hpp	/^   void set_execution_status(bool executing) volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:(bool executing) volatile
set_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void set_ptr(T * p) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p) volatile
set_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void set_ptr(T * p) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p) volatile
set_tag	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    void set_tag(tag_t t) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tag_t t) volatile
set_tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    void set_tag(tag_t t) volatile$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tag_t t) volatile
set_value	./threadpool/boost/threadpool/detail/future.hpp	/^  void set_value(future_result_type const & r) volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:(future_result_type const & r) volatile
shutdown	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void shutdown()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
shutdown	./threadpool/boost/threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::immediately	access:public	signature:(Pool& pool)
shutdown	./threadpool/boost/threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::wait_for_active_tasks	access:public	signature:(Pool& pool)
shutdown	./threadpool/boost/threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::wait_for_all_tasks	access:public	signature:(Pool& pool)
shutdown_policy_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef ShutdownPolicy<pool_type> shutdown_policy_type;\/\/!< Indicates the shutdown policy's type.  $/;"	t	class:boost::threadpool::detail::pool_core	access:public
size	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_t size()	const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:() const volatile
size	./threadpool/boost/threadpool/pool.hpp	/^    size_t size()	const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:() const
size	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:() const
size	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:() const
size	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:() const
size_controller	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    size_controller_type size_controller()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
size_controller	./threadpool/boost/threadpool/pool.hpp	/^    size_controller_type size_controller()$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:()
size_controller_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef SizePolicyController<pool_type> size_controller_type;$/;"	t	class:boost::threadpool::detail::pool_core	access:public
size_controller_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef SizePolicyController<pool_core_type> size_controller_type;$/;"	t	class:boost::threadpool::thread_pool	access:public
size_policy_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef SizePolicy<pool_type> size_policy_type;         \/\/!< Indicates the sizer's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
size_policy_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef SizePolicy<pool_core_type> size_policy_type; $/;"	t	class:boost::threadpool::thread_pool	access:public
size_policy_type	./threadpool/boost/threadpool/size_policies.hpp	/^    typedef typename Pool::size_policy_type size_policy_type;$/;"	t	class:boost::threadpool::resize_controller	access:private
size_t	./lockfree/boost/lockfree/ringbuffer.hpp	/^    typedef std::size_t size_t;$/;"	t	class:boost::lockfree::detail::ringbuffer_base	access:private
size_t	./lockfree/boost/lockfree/ringbuffer.hpp	/^    typedef std::size_t size_t;$/;"	t	class:boost::lockfree::ringbuffer	access:private
stack	./lockfree/boost/lockfree/stack.hpp	/^    explicit stack(std::size_t n):$/;"	f	class:boost::lockfree::stack	access:public	signature:(std::size_t n)
stack	./lockfree/boost/lockfree/stack.hpp	/^    stack(void):$/;"	f	class:boost::lockfree::stack	access:public	signature:(void)
stack	./lockfree/boost/lockfree/stack.hpp	/^class stack:$/;"	c	namespace:boost::lockfree	inherits:boost::noncopyable
static_freelist_t	./lockfree/boost/lockfree/detail/freelist.hpp	/^struct static_freelist_t {};$/;"	s	namespace:boost::lockfree
static_size	./threadpool/boost/threadpool/size_policies.hpp	/^    static_size(Pool volatile & pool)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(Pool volatile & pool)
static_size	./threadpool/boost/threadpool/size_policies.hpp	/^  class static_size$/;"	c	namespace:boost::threadpool
store	./lockfree/boost/atomic.hpp	/^	void store(T *v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::atomic	access:public	signature:(T *v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/builder.hpp	/^	void store(integral_type v,$/;"	f	class:boost::detail::atomic::build_base_from_larger_type	access:public	signature:(integral_type v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/fallback.hpp	/^	void store(const T &t, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::fallback_atomic	access:public	signature:(const T &t, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_alpha_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_arm_4	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_ppc_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_16	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_64	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_8	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_x86_128	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_generic_cas32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	void store(T t, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::platform_atomic	access:public	signature:(T t, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/interlocked.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_interlocked_32	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
store	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	void store(T v, memory_order order=memory_order_seq_cst) volatile$/;"	f	class:boost::detail::atomic::atomic_linux_arm_4	access:public	signature:(T v, memory_order order=memory_order_seq_cst) volatile
super	./lockfree/boost/atomic.hpp	/^	typedef atomic<int> super;$/;"	t	class:boost::atomic_flag	access:public
super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<T> super;$/;"	t	class:boost::atomic	access:public
super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<bool> super;$/;"	t	class:boost::atomic	access:public
super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<intptr_t> super;$/;"	t	class:boost::atomic	access:public
super	./lockfree/boost/atomic.hpp	/^	typedef detail::atomic::internal_atomic<void *, sizeof(void *), int> super;$/;"	t	class:boost::atomic	access:public
super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef build_atomic_from_exchange<fallback_atomic<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef detail::atomic::platform_atomic<T> super;$/;"	t	class:boost::detail::atomic::internal_atomic	access:public
super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef detail::atomic::platform_atomic_integral<T> super;$/;"	t	class:boost::detail::atomic::internal_atomic	access:public
super	./lockfree/boost/atomic/detail/base.hpp	/^	typedef fallback_atomic<T> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_atomic_from_minimal< build_base_from_larger_type<Base, Type> > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_larger_type	access:public
super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops< build_const_fetch_add<Base> > > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_typical	access:public
super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops< build_fetch_add< build_exchange<Base> > > > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_minimal	access:public
super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops< build_fetch_add<Base> > > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_exchange	access:public
super	./lockfree/boost/atomic/detail/builder.hpp	/^	typedef build_logicops< build_arithmeticops<Base> > super;$/;"	t	class:boost::detail::atomic::build_atomic_from_add	access:public
super	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef build_atomic_from_larger_type<atomic_alpha_32<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_alpha_32<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-alpha.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_alpha_64<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	typedef build_atomic_from_larger_type<atomic_arm_4<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-armv6+.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_arm_4<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef build_atomic_from_larger_type<atomic_ppc_32<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_ppc_32<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-ppc.hpp	/^	typedef build_atomic_from_typical<build_exchange<atomic_ppc_64<T> > > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_16<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_32<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_64<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef build_atomic_from_add<atomic_x86_8<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^    typedef build_atomic_from_add<atomic_x86_128<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef build_atomic_from_exchange<atomic_generic_cas32<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef build_atomic_from_larger_type<atomic_generic_cas32<int32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint16_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint32_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint64_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
super	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	typedef platform_atomic_integral<uint8_t> super;$/;"	t	class:boost::detail::atomic::platform_atomic	access:public
super	./lockfree/boost/atomic/detail/interlocked.hpp	/^	typedef build_atomic_from_add<atomic_interlocked_32<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/interlocked.hpp	/^	typedef build_atomic_from_larger_type<atomic_interlocked_32<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef build_atomic_from_exchange<atomic_linux_arm_4<T> > super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
super	./lockfree/boost/atomic/detail/linux-arm.hpp	/^	typedef build_atomic_from_larger_type<atomic_linux_arm_4<uint32_t>, T> super;$/;"	t	class:boost::detail::atomic::platform_atomic_integral	access:public
tag	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tag_t tag;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:protected
tag	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^        tag_t tag[4];$/;"	m	union:boost::lockfree::detail::tagged_ptr::cast_unit	access:public
tag_index	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    static const int tag_index = 3;$/;"	m	class:boost::lockfree::detail::tagged_ptr	access:private
tag_t	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    typedef std::size_t tag_t;$/;"	t	class:boost::lockfree::detail::tagged_ptr	access:public
tag_t	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    typedef boost::uint16_t tag_t;$/;"	t	class:boost::lockfree::detail::tagged_ptr	access:private
tagged_node_ptr	./lockfree/boost/lockfree/detail/freelist.hpp	/^    typedef tagged_ptr<freelist_node> tagged_node_ptr;$/;"	t	class:boost::lockfree::detail::freelist_stack	access:private
tagged_node_ptr	./lockfree/boost/lockfree/fifo.hpp	/^        typedef tagged_ptr<node> tagged_node_ptr;$/;"	t	struct:boost::lockfree::detail::fifo::node	access:public
tagged_node_ptr	./lockfree/boost/lockfree/fifo.hpp	/^    typedef tagged_ptr<node> tagged_node_ptr;$/;"	t	class:boost::lockfree::detail::fifo	access:private
tagged_node_ptr	./lockfree/boost/lockfree/stack.hpp	/^        typedef detail::tagged_ptr<node> tagged_node_ptr;$/;"	t	struct:boost::lockfree::stack::node	access:public
tagged_node_ptr	./lockfree/boost/lockfree/stack.hpp	/^    typedef detail::tagged_ptr<node> tagged_node_ptr;$/;"	t	class:boost::lockfree::stack	access:private
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    explicit tagged_ptr(T * p, tag_t t = 0):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t = 0)
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tagged_ptr(tagged_ptr const & p):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^    tagged_ptr(void)\/\/: ptr(0), tag(0)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void)
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_dcas.hpp	/^class BOOST_LOCKFREE_DCAS_ALIGNMENT tagged_ptr$/;"	c	namespace:boost::lockfree::detail
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    explicit tagged_ptr(T * p, tag_t t = 0):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(T * p, tag_t t = 0)
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    tagged_ptr(tagged_ptr const & p):$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(tagged_ptr const & p)
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^    tagged_ptr(void)\/\/: ptr(0), tag(0)$/;"	f	class:boost::lockfree::detail::tagged_ptr	access:public	signature:(void)
tagged_ptr	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^class tagged_ptr$/;"	c	namespace:boost::lockfree::detail
tail_	./lockfree/boost/lockfree/fifo.hpp	/^    atomic<tagged_node_ptr> tail_;$/;"	m	class:boost::lockfree::detail::fifo	access:private
task_1	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void task_1()$/;"	f	signature:()
task_1	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^void task_1()$/;"	f	signature:()
task_2	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void task_2()$/;"	f	signature:()
task_2	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^void task_2()$/;"	f	signature:()
task_3	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void task_3()$/;"	f	signature:()
task_3	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^void task_3()$/;"	f	signature:()
task_4	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^int task_4()$/;"	f	signature:()
task_finished	./threadpool/boost/threadpool/size_policies.hpp	/^    void task_finished() {}$/;"	f	class:boost::threadpool::static_size	access:public	signature:()
task_func	./threadpool/boost/threadpool/task_adaptors.hpp	/^  typedef function0<void> task_func;$/;"	t	namespace:boost::threadpool
task_int	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^int task_int()$/;"	f	signature:()
task_int_1	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^int task_int_1()$/;"	f	signature:()
task_int_23	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^int task_int_23()$/;"	f	signature:()
task_scheduled	./threadpool/boost/threadpool/size_policies.hpp	/^    void task_scheduled() {}$/;"	f	class:boost::threadpool::static_size	access:public	signature:()
task_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef Task task_type;                                 \/\/!< Indicates the task's type.$/;"	t	class:boost::threadpool::detail::pool_core	access:public
task_type	./threadpool/boost/threadpool/pool.hpp	/^    typedef Task task_type;                                   \/\/!< Indicates the task's type.$/;"	t	class:boost::threadpool::thread_pool	access:public
task_type	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    typedef Task task_type;  \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::lifo_scheduler	access:public
task_type	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    typedef Task task_type; \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::fifo_scheduler	access:public
task_type	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    typedef Task task_type; \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::prio_scheduler	access:public
task_with_parameter	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^void task_with_parameter(int value)$/;"	f	signature:(int value)
task_with_parameter	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^void task_with_parameter(int value)$/;"	f	signature:(int value)
terminate_all_workers	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void terminate_all_workers(bool const wait) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(bool const wait) volatile
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<char> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed char> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed int> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed long long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<signed short> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned char> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned int> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned long> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<> struct is_integral_type<unsigned short> {typedef int test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test	./lockfree/boost/atomic/detail/valid_integral_types.hpp	/^template<typename T> struct is_integral_type {typedef void test;};$/;"	t	struct:boost::detail::atomic::is_integral_type	access:public
test_and_set	./lockfree/boost/atomic.hpp	/^	bool test_and_set(memory_order order=memory_order_seq_cst)$/;"	f	class:boost::atomic_flag	access:public	signature:(memory_order order=memory_order_seq_cst)
this_type	./lockfree/boost/atomic/detail/gcc-x86.hpp	/^	typedef atomic_x86_64 this_type;$/;"	t	class:boost::detail::atomic::atomic_x86_64	access:private
this_type	./lockfree/boost/atomic/detail/generic-cas.hpp	/^	typedef atomic_generic_cas32 this_type;$/;"	t	class:boost::detail::atomic::atomic_generic_cas32	access:private
thread_pool	./threadpool/boost/threadpool/pool.hpp	/^    thread_pool(size_t initial_threads = 0)$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(size_t initial_threads = 0)
thread_pool	./threadpool/boost/threadpool/pool.hpp	/^  class thread_pool $/;"	c	namespace:boost::threadpool
threadpool	./threadpool/boost/threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/future.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/pool.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/pool_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/scheduling_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/shutdown_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/size_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	./threadpool/boost/threadpool/task_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
timed_wait	./threadpool/boost/threadpool/detail/future.hpp	/^  bool timed_wait(boost::xtime const & timestamp) const$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:(boost::xtime const & timestamp) const
timed_wait	./threadpool/boost/threadpool/future.hpp	/^  bool timed_wait(boost::xtime const & timestamp) const$/;"	f	class:boost::threadpool::future	access:public	signature:(boost::xtime const & timestamp) const
to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint16_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint32_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint64_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
to_integral	./lockfree/boost/atomic/detail/integral-casts.hpp	/^	static inline uint8_t to_integral(T &t)$/;"	f	class:boost::detail::atomic::platform_atomic	access:protected	signature:(T &t)
to_string	./threadpool/libs/threadpool/example/mergesort/mergesort.cpp	/^string to_string(const T& value)$/;"	f	signature:(const T& value)
to_string	./threadpool/libs/threadpool/test/compile_all/compile_all.cpp	/^string to_string(T const & value)$/;"	f	signature:(T const & value)
to_string	./threadpool/libs/threadpool/tutorial/tutorial.cpp	/^string to_string(T const & value)$/;"	f	signature:(T const & value)
top	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::fifo_scheduler	access:public	signature:() const
top	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::lifo_scheduler	access:public	signature:() const
top	./threadpool/boost/threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::prio_scheduler	access:public	signature:() const
tos	./lockfree/boost/lockfree/stack.hpp	/^    detail::atomic<tagged_node_ptr> tos;$/;"	m	class:boost::lockfree::stack	access:private
unlikely	./lockfree/boost/lockfree/detail/branch_hints.hpp	/^    inline bool unlikely(bool expr)$/;"	f	namespace:boost::lockfree	signature:(bool expr)
v	./lockfree/boost/lockfree/stack.hpp	/^        T v;$/;"	m	struct:boost::lockfree::stack::node	access:public
value	./lockfree/boost/lockfree/detail/tagged_ptr_ptrcompression.hpp	/^        compressed_ptr_t value;$/;"	m	union:boost::lockfree::detail::tagged_ptr::cast_unit	access:public
wait	./threadpool/boost/threadpool/detail/future.hpp	/^  void wait() const volatile$/;"	f	class:boost::threadpool::detail::future_impl	access:public	signature:() const volatile
wait	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    bool wait(xtime const & timestamp, size_t const task_threshold = 0) const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:(xtime const & timestamp, size_t const task_threshold = 0) const volatile
wait	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void wait(size_t const task_threshold = 0) const volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:(size_t const task_threshold = 0) const volatile
wait	./threadpool/boost/threadpool/future.hpp	/^  void wait() const$/;"	f	class:boost::threadpool::future	access:public	signature:() const
wait	./threadpool/boost/threadpool/pool.hpp	/^    bool wait(xtime const & timestamp, size_t task_threshold = 0) const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(xtime const & timestamp, size_t task_threshold = 0) const
wait	./threadpool/boost/threadpool/pool.hpp	/^    void wait(size_t task_threshold = 0) const$/;"	f	class:boost::threadpool::thread_pool	access:public	signature:(size_t task_threshold = 0) const
wait_for_active_tasks	./threadpool/boost/threadpool/shutdown_policies.hpp	/^  class wait_for_active_tasks$/;"	c	namespace:boost::threadpool
wait_for_all_tasks	./threadpool/boost/threadpool/shutdown_policies.hpp	/^  class wait_for_all_tasks$/;"	c	namespace:boost::threadpool
worker_destructed	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void worker_destructed(shared_ptr<worker_type> worker) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(shared_ptr<worker_type> worker) volatile
worker_died_unexpectedly	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    void worker_died_unexpectedly(shared_ptr<worker_type> worker) volatile$/;"	f	class:boost::threadpool::detail::pool_core	access:private	signature:(shared_ptr<worker_type> worker) volatile
worker_died_unexpectedly	./threadpool/boost/threadpool/size_policies.hpp	/^    void worker_died_unexpectedly(size_t const new_worker_count)$/;"	f	class:boost::threadpool::static_size	access:public	signature:(size_t const new_worker_count)
worker_thread	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^    worker_thread(shared_ptr<pool_type> const & pool)$/;"	f	class:boost::threadpool::detail::worker_thread	access:private	signature:(shared_ptr<pool_type> const & pool)
worker_thread	./threadpool/boost/threadpool/detail/worker_thread.hpp	/^  class worker_thread$/;"	c	namespace:boost::threadpool::detail	inherits:enable_shared_from_this,noncopyable
worker_type	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    typedef worker_thread<pool_type> worker_type;$/;"	t	class:boost::threadpool::detail::pool_core	access:public
write_available	./lockfree/boost/lockfree/ringbuffer.hpp	/^    static size_t write_available(size_t write_index, size_t read_index, size_t max_size)$/;"	f	class:boost::lockfree::detail::ringbuffer_base	access:protected	signature:(size_t write_index, size_t read_index, size_t max_size)
write_index_	./lockfree/boost/lockfree/ringbuffer.hpp	/^    atomic<size_t> write_index_;$/;"	m	class:boost::lockfree::detail::ringbuffer_base	access:private
~fifo	./lockfree/boost/lockfree/fifo.hpp	/^    ~fifo(void)$/;"	f	class:boost::lockfree::detail::fifo	access:public	signature:(void)
~freelist_stack	./lockfree/boost/lockfree/detail/freelist.hpp	/^    ~freelist_stack(void)$/;"	f	class:boost::lockfree::detail::freelist_stack	access:public	signature:(void)
~locking_ptr	./threadpool/boost/threadpool/detail/locking_ptr.hpp	/^    ~locking_ptr()$/;"	f	class:boost::threadpool::detail::locking_ptr	access:public	signature:()
~pool_core	./threadpool/boost/threadpool/detail/pool_core.hpp	/^    ~pool_core()$/;"	f	class:boost::threadpool::detail::pool_core	access:public	signature:()
~scope_guard	./threadpool/boost/threadpool/detail/scope_guard.hpp	/^	~scope_guard()$/;"	f	class:boost::threadpool::detail::scope_guard	access:public	signature:()
~stack	./lockfree/boost/lockfree/stack.hpp	/^    ~stack(void)$/;"	f	class:boost::lockfree::stack	access:public	signature:(void)
